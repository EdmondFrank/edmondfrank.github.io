<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux杂谈 | EdmondFrank's 时光足迹]]></title>
  <link href="https://edmondfrank.github.io/blog/categories/linuxza-tan/atom.xml" rel="self"/>
  <link href="https://edmondfrank.github.io/"/>
  <updated>2022-05-19T10:59:11+08:00</updated>
  <id>https://edmondfrank.github.io/</id>
  <author>
    <name><![CDATA[EdmondFrank]]></name>
    <email><![CDATA[EdmomdFrank@yahoo.co.jp]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2016-10-12:天翼校园网客户端登录协议更新]]></title>
    <link href="https://edmondfrank.github.io/blog/2016/10/12/tian-yi-xiao-yuan-wang-ke-hu-duan-deng-lu-xie-yi-geng-xin/"/>
    <updated>2016-10-12T22:14:07+08:00</updated>
    <id>https://edmondfrank.github.io/blog/2016/10/12/tian-yi-xiao-yuan-wang-ke-hu-duan-deng-lu-xie-yi-geng-xin</id>
    <content type="html"><![CDATA[<h2>天翼校园网客户端登录协议更新</h2>

<p><strong>PS:此登录协议仅供参考,未必适合所有高校.</strong>
<strong>本项目源码不遵循任何协议,各位可以随意下载及修改,但请勿用作非法 or 商业用途!</strong></p>

<h3>主要变化</h3>

<p><strong><a href="https://github.com/EdmondFrank/Esurfing">原登录协议</a> 步骤为:challange -> 获取rescode -> login,现登录协议取消了rescode认证,因此可以省略challange可以直接login</strong></p>

<h3>登录协议主要源码如下:</h3>

<pre><code class="ruby">#coding:utf-8
require 'json'
require 'net/http'
require 'uri'
require 'digest/md5'
body = File.read("./config.json")
config = JSON.parse(body)
username = config["username"].to_s
password = config["password"].to_s
clientip = config["clientip"].to_s
nasip = config["nasip"].to_s
mac = config["mac"].to_s
iswifi="1050"
def get_timestamp()
  return Time.now.to_i.to_s+'444'
end
def get_md5(str)
  return  Digest::MD5.hexdigest(str+'Eshore!@#').upcase
end

def active(username,clientip,nasip,mac)
  timestamp = get_timestamp
  authenticator= get_md5(clientip+nasip+mac+timestamp)
  puts username,clientip,nasip,mac,timestamp,authenticator
  url="http://enet.10000.gd.cn:8001/hbservice/client/active?username=#{username}&amp;clientip=#{clientip}&amp;nasip=#{nasip}&amp;mac=#{mac}&amp;timestamp=#{timestamp}&amp;authenticator=#{authenticator}"
  uri = URI(url)
  resp = Net::HTTP.get(uri)
  #resp = `curl -A "" -H "Accept:" -H "Host:enet.10000.gd.cn:8001" #{url}`
  result = JSON.parse(resp)
  puts result
  return result["rescode"].to_s
end

def login(username,password,clientip,nasip,mac,iswifi)
  url = "http://enet.10000.gd.cn:10001/client/login"
  timestamp =  get_timestamp
  authenticator=get_md5(clientip+nasip+mac+timestamp)
  postdata={}
  postdata["username"]=username
  postdata["password"]=password
  postdata["clientip"]=clientip
  postdata["nasip"]=nasip
  postdata["mac"]=mac
  postdata["timestamp"]=timestamp
  postdata["authenticator"]=authenticator
  postdata["iswifi"]=iswifi
  data=postdata.to_json

  headers = {"Content-Type" =&gt; "application/json"}
  headers["Host"]="enet.10000.gd.cn:10001"
  headers["Content-Length"]=data.bytesize.to_s
  headers["Expect"]="100-continue"
  headers["Connection"]="Keep-Alive"
  puts `curl -d '#{data}' -A "" -H "Accept:" -H "Content-Type:application/json" -H "Host:enet.10000.gd.cn:10001" -H "Content-Length:#{data.bytesize.to_s}" -H "Expect:100-continue" -H "Connection:Keep-Alive" -X POST #{url}`
end
code = active(username,clientip,nasip,mac)
if code != "0"
  login(username,password,clientip,nasip,mac,iswifi)
end
</code></pre>

<p><strong>注:源码中才用了curl发送post包,使用前需先确认系统中是否用curl工具.若是改回Ruby的net/http发包请去掉[Expect]=&ldquo;100-continue"头</strong></p>

<p><strong>目前仅提供登录协议供大家参考,有能力者可自行实现完整程序及Gui界面,完整的程序(Cli版本/Gui版本),博主也会后续在我的<a href="https://github.com/EdmondFrank">Github</a>上发布</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gdb的简单使用]]></title>
    <link href="https://edmondfrank.github.io/blog/2016/08/11/gdbde-jian-dan-shi-yong/"/>
    <updated>2016-08-11T14:26:20+08:00</updated>
    <id>https://edmondfrank.github.io/blog/2016/08/11/gdbde-jian-dan-shi-yong</id>
    <content type="html"><![CDATA[<h2>gdb的简单使用</h2>

<h3>1.单步执行和跟踪函数调用</h3>

<p><strong>测试源码</strong>
<code>c
 #include &lt;stdio.h&gt;
 int add_range(int low,int high)
 {
    int i,sum;
    for (i=low;i&lt;=high;i++)
    {
        sum = sum + i;
    }
    printf("sum = %d\n",sum);
    return sum;
 }
 int main()
 {
    int result[100];
    result[0]=add_range(1,10);
    result[1]=add_range(1,100);
    printf("result[0]=%d \n result[1]=%d \n",result[0],result[1]);
    return 0;
 }
</code>
在编译并运行以上代码后,我们会发现最后的输出结果并非如我们预料一样.
无论是result[0]或result[1]基本都是错误的结果,然而代码中的逻辑却没有任何的问题.
在这里心细的朋友可能已经发现问题的所在了.
但既然是练习gdb的使用,那么我们就加上 -g 选项,再重新编译一次代码以便生成的可执行文件可以用gdb进行调试.</p>

<blockquote><p>$ gcc -g main.c -o main
$ gdb main</p></blockquote>

<p><strong>注:-g选项的作用是在可执行文件中加入源代码的信息,比如可执行文件中第几条机器指令对应源代码的第几行,但并不是把整个源文件嵌入到可执行文件中,所以在调试时必须保证gdb能找到源文件</strong></p>

<p><strong>除此之外</strong>,gdb提供一个类似shell的命令行环境,上面的 (gdb) 就是提示符,在这个提示符下输
入help可以查看命令的类别.</p>

<p><strong>help命令</strong>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) help
</span><span class='line'>List of classes of commands:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;aliases &ndash; Aliases of other commands
</span><span class='line'>breakpoints &ndash; Making program stop at certain points
</span><span class='line'>data &ndash; Examining data
</span><span class='line'>files &ndash; Specifying and examining files
</span><span class='line'>internals &ndash; Maintenance commands
</span><span class='line'>obscure &ndash; Obscure features
</span><span class='line'>running &ndash; Running the program
</span><span class='line'>stack &ndash; Examining the stack
</span><span class='line'>status &ndash; Status inquiries
</span><span class='line'>support &ndash; Support facilities
</span><span class='line'>tracepoints &ndash; Tracing of program execution without stopping the program
</span><span class='line'>user-defined &ndash; User-defined commands&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Type &ldquo;help&rdquo; followed by a class name for a list of commands in that class.
</span><span class='line'>Type &ldquo;help all&rdquo; for the list of all commands.
</span><span class='line'>Type &ldquo;help&rdquo; followed by command name for full documentation.
</span><span class='line'>Type &ldquo;apropos word&rdquo; to search for commands related to &ldquo;word&rdquo;.
</span><span class='line'>Command name abbreviations are allowed if unambiguous.
</span><span class='line'>(gdb)</span></code></pre></td></tr></table></div></figure></p>

<p><strong>list命令</strong>
list命令用于列出代码或指定函数,列出的代码行的起始位置为上一次列出的代码的结尾,
第一次使用时,默认从第一行开始.每次默认列出十行代码.list命令也可简写成l.
要是要列出指定函数的代码,直接在list后面加函数名即可.</p>

<blockquote><p>eg: list add_range</p></blockquote>

<p>且可以通过 show listsize  和 show listsize NUM(NUM为整数)来查询和修改每次最大列出代码行数.</p>

<p><strong>在什么都不输入的情况下敲击回车,gdb默认会执行上一条命令</strong></p>

<p><strong>quit命令</strong>
退出gdb环境</p>

<p><strong>start命令</strong>
开始执行程序,start命令默认停在main函数变量定义后的第一条语句,并等待下一次命令.</p>

<p><strong>next命令(简写n)</strong>
单步步过</p>

<p><strong>step命令(简写s)</strong>
单步步入</p>

<p><strong>backtrace命令(简写bt)</strong>
查看函数调用栈帧</p>

<p><strong>info命令(简写i)</strong>
查询相关信息</p>

<blockquote><p>eg:查询add_range函数局部变量的值,i locals</p></blockquote>

<p><strong>print命令(简写p)</strong>
打印指定变量值</p>

<p><strong>finish命令</strong>
执行到返回</p>

<p>介绍完以上几个简单的命令之后再返回到测试代码的调试之中.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) start
</span><span class='line'>Temporary breakpoint 1 at 0x80484c7: file ./gdbtest2.c, line 13.
</span><span class='line'>Starting program: /home/ef/c/gdbtest2&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Temporary breakpoint 1, main () at ./gdbtest2.c:13
</span><span class='line'>13  {
</span><span class='line'>(gdb) n
</span><span class='line'>15      result[0]=add_range(1,10);
</span><span class='line'>(gdb) s
</span><span class='line'>add_range (low=1, high=10) at ./gdbtest2.c:5
</span><span class='line'>5       for (i=low;i&lt;=high;i++)
</span><span class='line'>(gdb) bt&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;0  add_range (low=1, high=10) at ./gdbtest2.c:5&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;1  0x080484de in main () at ./gdbtest2.c:15&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;(gdb) i locals
</span><span class='line'>i = -1208074951
</span><span class='line'>sum = -1208114904</span></code></pre></td></tr></table></div></figure>
在以上最后两行输出我们可以明白,程序之所以没有输出我们预期的结果,
其根本原因就是因为局部变量i和sum没有进行初始化.虽然变量i会在for循环之前进行重新赋值,
但作为累积变量的sum由于初始值不是0,导致最后的累加结果错误.</p>

<p>找出错误的所在后,我们即可以退出gdb,修改源码再重新进行调试;或者直接通过gdb的命令</p>

<blockquote><p>set var sum = 0</p></blockquote>

<p>修改局部变量sum的值,然后再寻找下一处Bug.</p>

<h3>2.断点的使用</h3>

<p><strong>测试代码</strong>
<code>c
 #include &lt;stdio.h&gt;
 int main(void)
 {
  int sum = 0, i = 0;
  char input[5];
  while (1) {
  scanf("%s", input);
  for (i = 0; input[i] != '\0'; i++)
  sum = sum*10 + input[i] - '0';
  printf("input=%d\n", sum);
  }
  return 0;
 }
</code>
编译以上代码并运行
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gcc main.c -g -o main
</span><span class='line'>$ ./main
</span><span class='line'>123
</span><span class='line'>input=123
</span><span class='line'>234
</span><span class='line'>input=123234&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;我们发现程序第一次运行是对的,但第二次却又出乎了我们意料.
</span><span class='line'>于是我们也把这个程序也放入gdb中调试.
</span><span class='line'>
</span><span class='line'>**display命令**
</span><span class='line'>display命令可以使得每次停下来的时候都显示执行变量的值,亦称变量跟踪.
</span><span class='line'>
</span><span class='line'>**undisplay命令**
</span><span class='line'>取消之前设置的变量跟踪
</span><span class='line'>
</span><span class='line'>**break命令(简称b)**
</span><span class='line'>在指定位置设定断点,参数可以是指定行也可以是某个函数
</span><span class='line'>
</span><span class='line'>**i breakpoints**
</span><span class='line'>输出目前已有断点的信息
</span><span class='line'>
</span><span class='line'>**enable breakpoints NUM(NUM为断点号)**
</span><span class='line'>启用指定断点(NUM为空时,默认为全部断点)
</span><span class='line'>
</span><span class='line'>**disable breakpoints NUM(NUM为断点号)**
</span><span class='line'>禁用指定断点(NUM为空时,默认为全部断点)
</span><span class='line'>
</span><span class='line'>**delete breakpoints NUM(NUM为断点号)**
</span><span class='line'>删除指定断点(NUM为空时,默认为全部断点)
</span><span class='line'>
</span><span class='line'>**continue命令(简称c)**
</span><span class='line'>继续执行,注意,continue命令是连续运行而非单步执行.
</span><span class='line'>
</span><span class='line'>介绍完命令后我们又再次回到调试中,首先我们执行完start命令后,使用
</span><span class='line'>&gt; b 9
</span><span class='line'>
</span><span class='line'>在sum的赋值处下一个断点,并用命令
</span><span class='line'>&gt; display sum
</span><span class='line'>
</span><span class='line'>来时刻监视变量sum的变化&lt;br/&gt;
</span><span class='line'>这时我们发现在我们输入完"123"后,再次想输入"456"时,gdb显示
</span><span class='line'>"sum = 123" ,这样我们便发现错误所在,即我们并没有在新的循环中清空sum的先值
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;(gdb) start
</span><span class='line'>Temporary breakpoint 1 at 0x804848c: file ./gdbtest3.c, line 3.
</span><span class='line'>Starting program: /home/ef/c/gdbtest3&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Temporary breakpoint 1, main () at ./gdbtest3.c:3
</span><span class='line'>3   {
</span><span class='line'>(gdb) list
</span><span class='line'>1   #include &lt;stdio.h&gt;
</span><span class='line'>2   int main(void)
</span><span class='line'>3   {
</span><span class='line'>4   int sum = 0, i = 0;
</span><span class='line'>5   char input[5];
</span><span class='line'>6   while (1) {
</span><span class='line'>7   scanf(&ldquo;%s&rdquo;, input);
</span><span class='line'>8   for (i = 0; input[i] != &lsquo;\0&rsquo;; i++)
</span><span class='line'>9   sum = sum*10 + input[i] - &lsquo;0&rsquo;;
</span><span class='line'>10  printf(&ldquo;input=%d\n&rdquo;, sum);
</span><span class='line'>(gdb) b 9
</span><span class='line'>Breakpoint 2 at 0x80484c2: file ./gdbtest3.c, line 9.
</span><span class='line'>(gdb) display sum
</span><span class='line'>1: sum = 134514011
</span><span class='line'>(gdb) c
</span><span class='line'>Continuing.
</span><span class='line'>123&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Breakpoint 2, main () at ./gdbtest3.c:9
</span><span class='line'>9   sum = sum*10 + input[i] - &lsquo;0&rsquo;;
</span><span class='line'>1: sum = 0
</span><span class='line'>(gdb) c
</span><span class='line'>Continuing.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Breakpoint 2, main () at ./gdbtest3.c:9
</span><span class='line'>9   sum = sum*10 + input[i] - &lsquo;0&rsquo;;
</span><span class='line'>1: sum = 1
</span><span class='line'>(gdb) c
</span><span class='line'>Continuing.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Breakpoint 2, main () at ./gdbtest3.c:9
</span><span class='line'>9   sum = sum*10 + input[i] - &lsquo;0&rsquo;;
</span><span class='line'>1: sum = 12
</span><span class='line'>(gdb) c
</span><span class='line'>Continuing.
</span><span class='line'>input=123
</span><span class='line'>456&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Breakpoint 2, main () at ./gdbtest3.c:9
</span><span class='line'>9   sum = sum*10 + input[i] - &lsquo;0&rsquo;;
</span><span class='line'>1: sum = 123
</span><span class='line'>(gdb)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>    &lt;title type="html"&gt;&lt;![CDATA[Linux进程内存管理]]&gt;&lt;/title&gt;
</span><span class='line'>    &lt;link href="https://edmondfrank.github.io/blog/2016/08/10/linuxjin-cheng-nei-cun-guan-li/"/&gt;
</span><span class='line'>    &lt;updated&gt;2016-08-10T11:24:22+08:00&lt;/updated&gt;
</span><span class='line'>    &lt;id&gt;https://edmondfrank.github.io/blog/2016/08/10/linuxjin-cheng-nei-cun-guan-li&lt;/id&gt;
</span><span class='line'>    &lt;content type="html"&gt;&lt;![CDATA[&lt;h2&gt;Linux进程内存管理&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;1.程序的结构与进程结构&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ size test&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;blockquote&gt;&lt;p&gt;text       data     bss     dec     hex filename &lt;br/&gt;
</span><span class='line'>181617      432   18844  200893   310bd ./book &lt;br/&gt;&lt;/p&gt;&lt;/blockquote&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;strong&gt;一个可执行程序包括三个部分&lt;/strong&gt; &lt;br/&gt;
</span><span class='line'>代码段:存放指令,操作以及只读的常量&lt;br/&gt;
</span><span class='line'>数据段:全局或者静态的已经初始化的变量&lt;br/&gt;
</span><span class='line'>BSS段 :全局或者静态的未初始化的变量&lt;br/&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;2.进程管理的过程&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在执行程序时,系统首先在内核空间中创建一个进程,为这个进程申请一个PCB
</span><span class='line'>(进程控制块task_struct),用于管理整个进程的所有资源,其中mm_struct成员用来管理与当前
</span><span class='line'>进程相关的所有内存资源.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;blockquote&gt;&lt;p&gt;(1)代码段,数据段,BSS段,直接从磁盘拷贝到当前内存空间,大小相等.&lt;br/&gt;
</span><span class='line'>(2)动态的空间:堆,栈空间,mmap段(用于映射其他的库的相关信息)&lt;/p&gt;&lt;/blockquote&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;$ cat /proc/7450/maps
</span><span class='line'>08048000-08152000 r-xp 00000000 08:01 36175926   /bin/bash
</span><span class='line'>08152000-08153000 r--p 00109000 08:01 36175926   /bin/bash
</span><span class='line'>08153000-08158000 rw-p 0010a000 08:01 36175926   /bin/bash
</span><span class='line'>08158000-0815d000 rw-p 00000000 00:00 0 
</span><span class='line'>084cf000-08994000 rw-p 00000000 00:00 0          [heap]
</span><span class='line'>b710d000-b7118000 r-xp 00000000 08:01 21496849   /lib/i386-linux-gnu/libnss_files-2.23.so
</span><span class='line'>b7118000-b7119000 r--p 0000a000 08:01 21496849   /lib/i386-linux-gnu/libnss_files-2.23.so
</span><span class='line'>b7119000-b711a000 rw-p 0000b000 08:01 21496849   /lib/i386-linux-gnu/libnss_files-2.23.so
</span><span class='line'>b711a000-b7120000 rw-p 00000000 00:00 0 
</span><span class='line'>b7120000-b712b000 r-xp 00000000 08:01 21496770   /lib/i386-linux-gnu/libnss_nis-2.23.so
</span><span class='line'>b712b000-b712c000 r--p 0000a000 08:01 21496770   /lib/i386-linux-gnu/libnss_nis-2.23.so
</span><span class='line'>b712c000-b712d000 rw-p 0000b000 08:01 21496770   /lib/i386-linux-gnu/libnss_nis-2.23.so
</span><span class='line'>b7151000-b7158000 r--s 00000000 08:01 48245384   /usr/lib/i386-linux-gnu/gconv/gconv-modules.cache
</span><span class='line'>b7158000-b730b000 r--p 002d7000 08:01 48234512   /usr/lib/locale/locale-archive
</span><span class='line'>b730b000-b750b000 r--p 00000000 08:01 48234512   /usr/lib/locale/locale-archive
</span><span class='line'>b750b000-b750c000 rw-p 00000000 00:00 0 
</span><span class='line'>b750c000-b76bb000 r-xp 00000000 08:01 21497064   /lib/i386-linux-gnu/libc-2.23.so
</span><span class='line'>b76bb000-b76bc000 ---p 001af000 08:01 21497064   /lib/i386-linux-gnu/libc-2.23.so
</span><span class='line'>b76bc000-b76be000 r--p 001af000 08:01 21497064   /lib/i386-linux-gnu/libc-2.23.so
</span><span class='line'>b76be000-b76bf000 rw-p 001b1000 08:01 21497064   /lib/i386-linux-gnu/libc-2.23.so
</span><span class='line'>b76bf000-b76c2000 rw-p 00000000 00:00 0 
</span><span class='line'>b76c2000-b76c5000 r-xp 00000000 08:01 21497066   /lib/i386-linux-gnu/libdl-2.23.so
</span><span class='line'>b76c5000-b76c6000 r--p 00002000 08:01 21497066   /lib/i386-linux-gnu/libdl-2.23.so
</span><span class='line'>b76c6000-b76c7000 rw-p 00003000 08:01 21497066   /lib/i386-linux-gnu/libdl-2.23.so
</span><span class='line'>b76c7000-b76e7000 r-xp 00000000 08:01 21496816   /lib/i386-linux-gnu/libtinfo.so.5.9
</span><span class='line'>b76e7000-b76e9000 r--p 0001f000 08:01 21496816   /lib/i386-linux-gnu/libtinfo.so.5.9
</span><span class='line'>b76e9000-b76ea000 rw-p 00021000 08:01 21496816   /lib/i386-linux-gnu/libtinfo.so.5.9
</span><span class='line'>b76ef000-b7706000 r-xp 00000000 08:01 21496768   /lib/i386-linux-gnu/libnsl-2.23.so
</span><span class='line'>b7706000-b7707000 r--p 00016000 08:01 21496768   /lib/i386-linux-gnu/libnsl-2.23.so
</span><span class='line'>b7707000-b7708000 rw-p 00017000 08:01 21496768   /lib/i386-linux-gnu/libnsl-2.23.so
</span><span class='line'>b7708000-b770a000 rw-p 00000000 00:00 0 
</span><span class='line'>b770a000-b7712000 r-xp 00000000 08:01 21496134   /lib/i386-linux-gnu/libnss_compat-2.23.so
</span><span class='line'>b7712000-b7713000 r--p 00007000 08:01 21496134   /lib/i386-linux-gnu/libnss_compat-2.23.so
</span><span class='line'>b7713000-b7714000 rw-p 00008000 08:01 21496134   /lib/i386-linux-gnu/libnss_compat-2.23.so
</span><span class='line'>b7714000-b7715000 r--p 002d4000 08:01 48234512   /usr/lib/locale/locale-archive
</span><span class='line'>b7715000-b7717000 rw-p 00000000 00:00 0 
</span><span class='line'>b7717000-b7719000 r--p 00000000 00:00 0          [vvar]
</span><span class='line'>b7719000-b771a000 r-xp 00000000 00:00 0          [vdso]
</span><span class='line'>b771a000-b773c000 r-xp 00000000 08:01 21497056   /lib/i386-linux-gnu/ld-2.23.so
</span><span class='line'>b773c000-b773d000 rw-p 00000000 00:00 0 
</span><span class='line'>b773d000-b773e000 r--p 00022000 08:01 21497056   /lib/i386-linux-gnu/ld-2.23.so
</span><span class='line'>b773e000-b773f000 rw-p 00023000 08:01 21497056   /lib/i386-linux-gnu/ld-2.23.so
</span><span class='line'>bff73000-bff94000 rw-p 00000000 00:00 0          [stack]
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;strong&gt;所示地址并不是真正的物理地址,而是虚拟地址.使用虚拟地址是出于对资源的保护&lt;/strong&gt;
</span><span class='line'>对系统来说,内存资源是宝贵的,而一个程序执行并不需要立即将所有资源加载到内存,
</span><span class='line'>而实际上可采用写时申请的方法
</span><span class='line'>&lt;br/&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;虚拟地址的优点:&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;保护系统,避免用户程序非法访问内存造成内核崩溃.&lt;/li&gt;
</span><span class='line'>&lt;li&gt;节约资源,采用映射方法,使用时全用缺页的方法申请物理空间,即提高了效率也节约物理空间&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;3.进程地址空间的申请&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;32bit平台下,一个进程拥有4G的虚拟地址空间&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;blockquote&gt;&lt;p&gt;映射规则 &lt;br/&gt;
</span><span class='line'>1. 代码段,数据段,BSS段,直接从磁盘拷贝至内存.在linux 32bit平台上起始地址一般为
</span><span class='line'>0x08048000&lt;br/&gt;
</span><span class='line'>2. 堆栈,动态变化.&lt;br/&gt;
</span><span class='line'>3. mmap映射的文件(普通文件以及库),用户需自行调用mmap函数&lt;br/&gt;
</span><span class='line'>4. 高地址1G空间:供内核映射处理,用户空间不能直接访问&lt;br/&gt;&lt;/p&gt;&lt;/blockquote&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;strong&gt;堆和栈的起始地址是随机产生的,其目的是避免产生安全漏洞,但是可以使用brk/sbrk函数指定在堆中申请空间的起始地址&lt;/strong&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;brk/sbrk函数声明</span></code></pre></td></tr></table></div></figure>c
       #include &lt;unistd.h></p>

<pre><code>   int brk(void *addr);  //指定下次申请堆空间的起始地址

   void *sbrk(intptr_t increment);  //在当前地址位置后移increament字节,为0时返回当前地址
</code></pre>

<pre><code>
**代码示例:**
</code></pre>

<p> #include&lt;stdlib.h>
 #include&lt;stdio.h>
 int i = 10;
 int main(int argc,char <em>argv[])
 {
     brk(0x09e50000);
     printf(&ldquo;brk return:%p\n&rdquo;,sbrk(0));
     char </em>ptr = malloc(102400);
     printf(&ldquo;new malloc:%p \n&rdquo;,ptr);
     return 0;
 }
```</p>

<blockquote><p>输出结果 <br/>
brk return:0x9e50000 <br/>
new malloc:0x9e51010 <br/></p></blockquote>

<p><strong>strace工具可以追踪进程空间的加载</strong></p>

<h3>4.空间分配规则</h3>

<ol>
<li>代码段,数据段,BSS段的地址在编译时已经固定.</li>
<li>BSS的结束段与堆的起始地址之间有一定间隙,间隙大小随机.</li>
<li>brk调整的仅仅是堆中申请空间的起始值</li>
<li>系统默认认为每个进程分配的堆空间大小是固定的.使用sbrk(0)得到的是我们堆空间的结束值.</li>
<li>真正编程中,很少使用brk/sbrk调整位置</li>
</ol>


<h3>5.栈的说明</h3>

<p>栈:从高地址向低地址增长,起始值也是随机的.主要存放局部变量,
新调用子函数时函数的参数以及返回值,由OS自动管理.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux程序开发-命令行选项及参数]]></title>
    <link href="https://edmondfrank.github.io/blog/2016/08/09/linuxcheng-xu-kai-fa-ming-ling-xing-xuan-xiang-ji-can-shu/"/>
    <updated>2016-08-09T16:16:57+08:00</updated>
    <id>https://edmondfrank.github.io/blog/2016/08/09/linuxcheng-xu-kai-fa-ming-ling-xing-xuan-xiang-ji-can-shu</id>
    <content type="html"><![CDATA[<h2>Linux程序开发-命令行选项及参数</h2>

<h3>1.C语言中命令行参数的读取与输出</h3>

<pre><code class="c"> #include &lt;stdio.h&gt;
 int main(int argc,char* argv[])
 {
    int i;
    for(i=0;i&lt;argc;i++)
    {
        printf("argv[%d] = %s\n",i,argv[i]);
    }
 }
</code></pre>

<p><strong>当命令行选项很多时,可以使用库函数获取</strong>
<code>c
getopt      //短选项
getlongopt  //长选项
</code>
<strong>函数声明</strong>
<code>c
 #include &lt;unistd.h&gt;
 int getopt(int argc,char* const argv[],const char *optstring);
</code>
以下全局变量用于配合getopt函数</p>

<blockquote><p>extern char *optargr;<br/>
extern int optind;<br/>
extern int optopt;<br/>
extern int opterr;<br/></p></blockquote>

<h3>2.有关选项和参数的区别</h3>

<p>eg:</p>

<p>-a : 选项,一般表示所有</p>

<p>-h host: 其中,h表示选项,而host代表了一个主机ip也就是选项h的参数</p>

<p><strong>具体参数的解析,可以参考getopt的第三个参数的使用约定</strong></p>

<h3>3.getopt的执行过程</h3>

<p>当getopt每成功执行一次
<code>c
extern char *optarg; //指向下一个要扫描的参数
extern int optind;   //索引修改为下一个要处理的指针的下标
extern int optopt;   //用于存储可能的错误
extern int opterr;   //如果opterr == 0;则不将错误输出到标准错误输出设备
</code></p>

<h3>4.getopt使用实例</h3>

<pre><code class="c">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
int main(int argc,char** argv)
{
    int result;
    opterr = 0;
    while ((result = getopt(argc,argv,"ab:c::"))!= -1)
    {
        switch(result)
        {
        case 'a':
            printf("option=a,optopt=%c,optarg=%s\n",optopt,optarg);
            break;
        case 'b':
            printf("option=b,optopt=%c,optarg=%s\n",optopt,optarg);
            break;
        case 'c':
            printf("option=c,optopt=%c,optarg=%s\n",optopt,optarg);
            break;
        case '?':
            printf("result=?,optopt=%c,optarg=%s\n",optopt,optarg);
        default:
            printf("default,result=%c\n",result);
        }
        printf("argv[%d]=%s\n",optind,argv[optind]);
    }
    printf("result=-1,optind=%d\n",optind);
    return 0;
}
</code></pre>

<blockquote><p>输入示例
./first -a -b host -cShell</p></blockquote>

<pre><code>输出结果
option=a,optopt=,optarg=(null)
argv[2]=-b
option=b,optopt=,optarg=host
argv[4]=-cShell
option=c,optopt=,optarg=Shell
argv[5]=(null)
result=-1,optind=5
</code></pre>

<h3>5.长选项判断函数getopt_long的声明</h3>

<pre><code class="c">#include &lt;unistd.h&gt;

int getopt(int argc, char * const argv[],
                  const char *optstring);

extern char *optarg;
extern int optind, opterr, optopt;

#include &lt;getopt.h&gt;

int getopt_long(int argc, 
                  char * const argv[],
                  const char *optstring,          //当前支持的短选项列表
                  const struct option *longopts,  //长选项信息
                  int *longindex);                //索引

struct option {
               const char *name;         //选项名
               int         has_arg;      //是否有参数
               int        *flag;         //标志
               int         val;          //返回值
                                };
int getopt_long_only(int argc, char * const argv[],
                  const char *optstring,
                  const struct option *longopts, int *longindex);
</code></pre>

<p><strong>第四个参数的使用示例:</strong>
<code>c
struct optino my_option = {
   {"help",0,NULL,'h'},
   {"output",1,NULL,'o'}
}
</code>
除了以上区别外,长选项与短选项的使用方法类似.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[emacs+w3m:我的浏览我做主]]></title>
    <link href="https://edmondfrank.github.io/blog/2016/07/04/emacs-plus-w3m-wo-de-liu-lan-wo-zuo-zhu/"/>
    <updated>2016-07-04T19:23:04+08:00</updated>
    <id>https://edmondfrank.github.io/blog/2016/07/04/emacs-plus-w3m-wo-de-liu-lan-wo-zuo-zhu</id>
    <content type="html"><![CDATA[<h1>如何使用emacs + w3m 上网浏览</h1>

<h2>关于w3m的简介:</h2>

<p> w3m与Links一样,是一种基本文本的浏览器.w3m在表格、框架、SSL连接以及颜色方面都具有很强的支持性.甚至在支持图形界面的终端下还可以显示图片.同时w3m具备了浏览速度快、快捷键操作强、隐蔽性高的三大特点.使它成为了在emacs下工作的人的不二浏览器之选.</p>

<h2>如何在emacs下使用w3m:</h2>

<p>为了实现在emacs中使用w3m浏览网页,那我们就要通过Emacs-w3m这个emacs的扩展来实现.再次博主首先要说明的一点是Emacs-w3m只是Emacs调用w3m的接口,所以安装w3m浏览器的这个步骤必不可少.如果各位想要在浏览器中能够显示图片,那么则还需要w3m-img.</p>

<p>关于w3m的安装,Ubuntu用户可以直接通过包管理器或是在软件中心中添加软件源即可.其他的Linux用户可以自行在网络上下载w3m的源代码并进行编译安装.</p>

<p>安装完w3m后,接下来便是emacs-w3m这个emacs的扩展的安装与配置了.在这个步骤中需要注意的问题是:<strong>如果发现emacs提示不能加载w3m时,可以使用网络上发布的cvs版本,或是使用linux自带的cvs版本控制工具,将最新的emacs-w3m下载至本地再进行配置</strong></p>

<p>最后当一切工作都准备就绪之后就可以修改~/.emacs这个配置文件，并加入以下内容:</p>

<hr />

<pre><code>;;w3m的相关设置
(add-to-list'load-path "/usr/local/src/emacs_plugins/emacs-w3m-1.4.4/share/emacs/site-lisp/w3m")
(require 'w3m-load)
(setq w3m-home-page "https://www.google.com.hk") 
</code></pre>

<hr />

<p>然后重启emacs,按下M-x输入w3m,开始浏览网页即可.</p>
]]></content>
  </entry>
  
</feed>
