<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 安全渗透 | EdmondFrank's 时光足迹]]></title>
  <link href="https://edmondfrank.github.io/blog/categories/an-quan-shen-tou/atom.xml" rel="self"/>
  <link href="https://edmondfrank.github.io/"/>
  <updated>2022-05-19T10:59:11+08:00</updated>
  <id>https://edmondfrank.github.io/</id>
  <author>
    <name><![CDATA[EdmondFrank]]></name>
    <email><![CDATA[EdmomdFrank@yahoo.co.jp]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[httpscan爬虫扫描小工具]]></title>
    <link href="https://edmondfrank.github.io/blog/2016/06/20/httpscanpa-chong-sao-miao-xiao-gong-ju/"/>
    <updated>2016-06-20T16:30:07+08:00</updated>
    <id>https://edmondfrank.github.io/blog/2016/06/20/httpscanpa-chong-sao-miao-xiao-gong-ju</id>
    <content type="html"><![CDATA[<h1>httpscan 爬虫扫描小工具</h1>

<p>httpscan是一个扫描指定网段的Web主机的小工具。<strong>和端口扫描器不一样，httpscan是以爬虫的方式进行Web主机发现，因此相对来说不容易被防火墙拦截。</strong>
httpscan会返回IP http状态码 Web容器版本 以及网站标题。</p>

<hr />

<p>　<img src="/images/httpscan.png"></p>

<hr />

<pre><code>Usage：./httpscan IP/CIDR –t threads
Example:./httpscan.py 10.20.30.0/24 –t 10
</code></pre>

<p><a href="https://github.com/zer0h/httpscan">Github地址</a></p>

<h2>代码预览:</h2>

<pre><code class="python">#!/usr/bin/env python
#coding:utf-8
# Author: Zeroh

import re
import sys
import Queue
import threading
import optparse
import requests
from IPy import IP

printLock = threading.Semaphore(1)  #lock Screen print
TimeOut = 5  #request timeout

#User-Agent
header = {'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.125 Safari/537.36','Connection':'close'}

class scan():

  def __init__(self,cidr,threads_num):
    self.threads_num = threads_num
    self.cidr = IP(cidr)
    #build ip queue
    self.IPs = Queue.Queue()
    for ip in self.cidr:
      ip = str(ip)
      self.IPs.put(ip)

  def request(self):
    with threading.Lock():
      while self.IPs.qsize() &gt; 0:
        ip = self.IPs.get()
        try:
          r = requests.Session().get('http://'+str(ip),headers=header,timeout=TimeOut)
          status = r.status_code
          title = re.search(r'&lt;title&gt;(.*)&lt;/title&gt;', r.text) #get the title
          if title:
            title = title.group(1).strip().strip("\r").strip("\n")[:30]
          else:
            title = "None"
          banner = ''
          try:
            banner += r.headers['Server'][:20] #get the server banner
          except:pass
          printLock.acquire()
          print "|%-16s|%-6s|%-20s|%-30s|" % (ip,status,banner,title)
          print "+----------------+------+--------------------+------------------------------+"

          #Save log
          with open("./log/"+self.cidr.strNormal(3)+".log",'a') as f:
            f.write(ip+"\n")

        except Exception,e:
          printLock.acquire()
        finally:
          printLock.release()

  #Multi thread
  def run(self):
    for i in range(self.threads_num):
      t = threading.Thread(target=self.request)
      t.start()

if __name__ == "__main__":
  parser = optparse.OptionParser("Usage: %prog [options] target")
  parser.add_option("-t", "--thread", dest = "threads_num",
    default = 1, type = "int",
    help = "[optional]number of  theads,default=10")
  (options, args) = parser.parse_args()
  if len(args) &lt; 1:
    parser.print_help()
    sys.exit(0)

  print "+----------------+------+--------------------+------------------------------+"
  print "|     IP         |Status|       Server       |            Title             |"
  print "+----------------+------+--------------------+------------------------------+"

  s = scan(cidr=args[0],threads_num=options.threads_num)
  s.run()
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[图片截获工具driftnet]]></title>
    <link href="https://edmondfrank.github.io/blog/2016/06/12/tu-pian-jie-huo-gong-ju-driftnet/"/>
    <updated>2016-06-12T16:37:33+08:00</updated>
    <id>https://edmondfrank.github.io/blog/2016/06/12/tu-pian-jie-huo-gong-ju-driftnet</id>
    <content type="html"><![CDATA[<h1>图片截获工具driftnet</h1>

<p>driftnet是一款简单强大的图片捕获工具,可以在网络数据包之中实时判断和离线捕获图片,该工具内置于kali工具包之中.在正常的Linux系统系统也可以在<a href="https://github.com/deiv/driftnet">Github</a>上下载源码编译使用.</p>

<h3><strong>语法</strong>:driftnet [options] [fifter code]</h3>

<h3><strong>常用选项</strong>:</h3>

<ul>
<li>-h:显示帮助信息</li>
<li>-b:捕获到新图片时,发出蜂鸣声.</li>
<li>-i interface:选择监听接口(默认为全部接口,<em>此选项为关键选项</em>.)</li>
<li>-f file:读取一个指定pcap数据包中的图片</li>
<li>-p:不让所监听的接口使用混杂模式</li>
<li>-a:后台模式,即截取的图片自动保存至临时目录中,不显示在屏幕上.</li>
<li>-m number:指定保存图片的最大数目</li>
<li>-d directory:指定保存图片的路径</li>
<li>-x prefix:指定保存图片的前缀名</li>
<li>-s:尝试解读网络数据包中的音频流或视频流信息,现只支持MPEG格式</li>
<li>-S:类似-s</li>
</ul>


<blockquote><p>使用示例:</p></blockquote>

<p>Wlan0监听:
<code>
driftnet -i wlan0
</code>
读取指定pcap数据包:
<code>
driftnet -f /home/tmp/tmp.pcapng -a -d /tmp/
</code></p>

<h3>常用组合:</h3>

<blockquote><p>ettercap + driftnet</p>

<p>arproof + driftnet</p></blockquote>

<p>(有关组合的使用以及dirftnet的其他用法,博主会在后期的博客,陆续更新,敬请期待.)</p>
]]></content>
  </entry>
  
</feed>
