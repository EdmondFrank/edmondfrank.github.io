<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[EdmondFrank's 时光足迹]]></title>
  <link href="https://edmondfrank.github.io/atom.xml" rel="self"/>
  <link href="https://edmondfrank.github.io/"/>
  <updated>2022-05-19T10:59:11+08:00</updated>
  <id>https://edmondfrank.github.io/</id>
  <author>
    <name><![CDATA[EdmondFrank]]></name>
    <email><![CDATA[EdmomdFrank@yahoo.co.jp]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java Reflection]]></title>
    <link href="https://edmondfrank.github.io/blog/2020/11/21/java-reflection/"/>
    <updated>2020-11-21T16:25:03+08:00</updated>
    <id>https://edmondfrank.github.io/blog/2020/11/21/java-reflection</id>
    <content type="html"><![CDATA[<h2>Java Reflection - Private Fields and Methods</h2>

<blockquote><p>Note: This only works when running the code as a standalone Java application, like you do with unit tests and regular applications.
if you try to do this inside a Java Applet, you will need to fiddle around with <code>SecurityManager</code>.</p></blockquote>

<h3>Accessing Private Fields</h3>

<p>To access a private field you will need to call <code>Class.getDeclaredFiled(String name)</code> method</p>

<p>The methods <code>Class.getField(String name)</code> only return public fields.</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.lang.reflect.Field</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">PrivateObject</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">privateString</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">PrivateObject</span><span class="o">(</span><span class="n">String</span> <span class="n">privateString</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">privateString</span> <span class="o">=</span> <span class="n">privateString</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">test</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">NoSuchFieldException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">PrivateObject</span> <span class="n">privateObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">PrivateObject</span><span class="o">(</span><span class="s">&quot;The Private Value&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Field</span> <span class="n">privateStringField</span> <span class="o">=</span> <span class="n">privateObject</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&quot;privateString&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">privateStringField</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">oldFieldValue</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">privateStringField</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">privateObject</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;fieldValue: &quot;</span> <span class="o">+</span> <span class="n">oldFieldValue</span><span class="o">);</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">newFieldValue</span> <span class="o">=</span> <span class="n">oldFieldValue</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">&quot;The&quot;</span><span class="o">,</span> <span class="s">&quot;That&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">privateStringField</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">privateObject</span><span class="o">,</span> <span class="n">newFieldValue</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IllegalAccessException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>PS</strong>:
    by calling <code>Field.setAccessible(true)</code> just turn off the access checks for this particular Field instance, for reflection only. Now you can access it even if it is <strong>private/protected</strong> or <strong>package scope</strong>. even if <code>the caller is not part of those scopes</code> But you still can&rsquo;t access the field using normal code which would be disallowed by compiler.</p>

<h3>Accessing Private Methods</h3>

<p>To access a private method you will need to call the <code>Class.getDeclaredMethod(String name, Class[] parameterTypes)</code></p>

<p>The methods <code>Class.getMethod(String name, Class[] parameterTypes)</code>  only return public methods</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.lang.reflect.InvocationTargetException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.reflect.Method</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">PrivateObject</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">privateString</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">PrivateObject</span><span class="o">(</span><span class="n">String</span> <span class="n">privateString</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">privateString</span> <span class="o">=</span> <span class="n">privateString</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="nf">getPrivateString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">privateString</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">test</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">NoSuchMethodException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">PrivateObject</span> <span class="n">privateObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">PrivateObject</span><span class="o">(</span><span class="s">&quot;The Private Value&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Method</span> <span class="n">privateStringMethod</span> <span class="o">=</span> <span class="n">PrivateObject</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getDeclaredMethod</span><span class="o">(</span><span class="s">&quot;getPrivateString&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>            <span class="n">privateStringMethod</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">returnValue</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">privateStringMethod</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">privateObject</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;returnValue = &quot;</span> <span class="o">+</span> <span class="n">returnValue</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IllegalAccessException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvocationTargetException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Dev tools and Debugging notes]]></title>
    <link href="https://edmondfrank.github.io/blog/2020/10/26/java-dev-tools-and-debugging-notes/"/>
    <updated>2020-10-26T23:27:35+08:00</updated>
    <id>https://edmondfrank.github.io/blog/2020/10/26/java-dev-tools-and-debugging-notes</id>
    <content type="html"><![CDATA[<h1>Jave Dev tools and Debugging Notes</h1>

<ol>
<li><a href="#org1b5c54c">Java</a>

<ol>
<li><a href="#org65d3833">Maven</a>

<ol>
<li><a href="#org6c8dc4e">use maven with proxy and skip tests:</a></li>
<li><a href="#orge347d7a">Structure</a></li>
</ol>
</li>
<li><a href="#orgb3fa18c">JShell</a></li>
<li><a href="#orgd240f02">Javap</a></li>
<li><a href="#org6db32e3">Jar Files</a>

<ol>
<li><a href="#orgef3a76f">compile and package as a FAT-JAR</a></li>
<li><a href="#orgc84a88c">differences between &ldquo;java -cp&rdquo; and &ldquo;java -jar&rdquo;</a></li>
</ol>
</li>
<li><a href="#orge743cbc">Debugging</a>

<ol>
<li><a href="#org8d022e6">Exec args:</a></li>
<li><a href="#orgdc3e49d">Jdb</a></li>
</ol>
</li>
</ol>
</li>
</ol>


<p><a id="org1b5c54c"></a></p>

<h1>Java</h1>

<p>Some notes about Java dev tools and debuggers</p>

<p><a id="org65d3833"></a></p>

<h2>Maven</h2>

<p><strong>build lifecycle targets</strong></p>

<ul>
<li><strong>validate</strong>: validate the project is correct and all necessary information is available</li>
<li><strong>compile:</strong> compile the source code of the project</li>
<li><strong>test</strong>: test the compiled source code using a suitable unit testing framework. There tests should not require the code be packaged or deployed</li>
<li><strong>package</strong>: take the compiled code and package it in its distributable format, such as JAR</li>
<li><strong>verify</strong>: run any checks on results of integration tests to ensure quality criteria are met</li>
<li><strong>install</strong>: install the package into the local repository, for use as a dependency in other projects locally</li>
<li><strong>deploy</strong>: done in the build environment, copies the final package to the remote repository for sharing with other developers and projects</li>
</ul>


<p><a id="org6c8dc4e"></a></p>

<h3>use maven with proxy and skip tests:</h3>

<p>-Dmaven.test.skip=true
-Dhttps.proxyHost=127.0.0.1
-Dhttps.proxyPort=1081
-Dhttp.proxyHost=127.0.0.1
-Dhttp.proxyPort=1081</p>

<p><a id="orge347d7a"></a></p>

<h3>Structure</h3>

<ol>
<li>Expected directory structure:

<ul>
<li>Java files are in src/main/java as well as src/test/java.</li>
<li>Resource files are under src/main/resources and src/test/resources.</li>
</ul>
</li>
<li><strong>mvn archetype:generate</strong>: Generates a skeleton of a project based on your inputs (package name, versioning, project name, etc)</li>
<li>Edit pom.xml and set the jdk version there..</li>
<li>mvn package - compile, test, bundle.</li>
</ol>


<p><a id="orgb3fa18c"></a></p>

<h2>JShell</h2>

<p>Java REPL(Read Eval Print Loop) import after Java 9</p>

<ul>
<li><strong>/list</strong> -start - shows modules imported at startup.</li>
<li><strong>/edit <number></strong> - edit that line in a new window.</li>
<li><strong>/set editor &ldquo;vi&rdquo;</strong> - use vi instead of the default graphical edit pad.</li>
<li><strong>/save abc.java</strong> - save current buffer to file.</li>
<li><strong>/load abc.java</strong> - load from file into shell.</li>
<li><strong>/-1</strong> - execute last snippet.</li>
<li><strong>/1</strong> - execute first snippet.</li>
<li><strong>/drop N</strong> - drop Nth snippet.</li>
<li><strong>/vars</strong> - show only variables that were defined in snippets.</li>
<li><strong>/types</strong> - show only classes that were defined in snippets.</li>
</ul>


<p><a id="orgd240f02"></a></p>

<h2>Javap</h2>

<p>javap TestDecompile.class - decompile .class file to human readable format. Does not show content of methods though.
javap -c TestDecompile.class - show jvm bytecode in human readable -form, including methods.</p>

<p><a id="org6db32e3"></a></p>

<h2>Jar Files</h2>

<p>These are zip files that have a META-INF folder with a Manifest.mf file inside.</p>

<p><a id="orgef3a76f"></a></p>

<h3>compile and package as a FAT-JAR</h3>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;build&gt;
   &lt;finalName&gt;indexer-spider&lt;/finalName&gt;
   &lt;plugins&gt;
      &lt;plugin&gt;
         &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
         &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
         &lt;version&gt;2.4.1&lt;/version&gt;
         &lt;configuration&gt;
            &lt;!--  get all project dependencies  --&gt;
            &lt;descriptorRefs&gt;
               &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;
            &lt;/descriptorRefs&gt;
            &lt;!--  MainClass in mainfest make a executable jar  --&gt;
            &lt;archive&gt;
               &lt;manifest&gt;
                  &lt;mainClass&gt;org.apache.maven.indexer.examples.BasicUsageExample&lt;/mainClass&gt;
               &lt;/manifest&gt;
            &lt;/archive&gt;
         &lt;/configuration&gt;
         &lt;executions&gt;
            &lt;execution&gt;
               &lt;id&gt;make-assembly&lt;/id&gt;
               &lt;!--  bind to the packaging phase  --&gt;
               &lt;phase&gt;package&lt;/phase&gt;
               &lt;goals&gt;
                  &lt;goal&gt;single&lt;/goal&gt;
               &lt;/goals&gt;
            &lt;/execution&gt;
         &lt;/executions&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
         &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
         &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
         &lt;configuration&gt;
            &lt;source&gt;8&lt;/source&gt;
            &lt;target&gt;8&lt;/target&gt;
         &lt;/configuration&gt;
      &lt;/plugin&gt;
   &lt;/plugins&gt;
&lt;/build&gt;
</code></pre>

<p><a id="orgc84a88c"></a></p>

<h3>differences between &ldquo;java -cp&rdquo; and &ldquo;java -jar&rdquo;</h3>

<ul>
<li>There won&rsquo;t be any difference in terms of performance.</li>
<li><strong>java -cp:</strong> must specify the required classes and jar&rsquo;s in the classpath for running a java class file.</li>
<li><strong>java -jar:</strong> jvm finds the class that it needs to run from <strong>/META-INF/MANIFEST.MF</strong> file inside the jar file</li>
</ul>


<p><a id="orge743cbc"></a></p>

<h2>Debugging</h2>

<ul>
<li><strong>jps</strong> - Shows all runnning java processes.</li>
<li><strong>jvisualvm</strong> - If you have it, it shows the java processes on the system with details on threads, profiler etc.</li>
<li><strong>debugging mode</strong> - Use these args to start a process in debugging mode</li>
</ul>


<p><a id="org8d022e6"></a></p>

<h3>Exec args:</h3>

<p><code>-Xagentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=&lt;port&gt;</code></p>

<ul>
<li><strong>agentlib=jdwp</strong> - Load the jdwp agent, for debugging.</li>
<li><strong>transport=dt_socket</strong> - for connecting a debugging client over the network.</li>
<li><strong>server=y</strong> - this one is the server half of the debugging.</li>
<li><strong>suspend=y</strong> - don&rsquo;t start executing until a client debugger attaches.</li>
<li><strong>address=7777</strong> - port we listen on.</li>
</ul>


<p><a id="orgdc3e49d"></a></p>

<h3>Jdb</h3>

<ul>
<li><strong>jdb -attach <port></strong>: attach debug process start with debugging mode.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 常量加载机制]]></title>
    <link href="https://edmondfrank.github.io/blog/2020/04/09/rails-chang-liang-jia-zai-ji-zhi/"/>
    <updated>2020-04-09T09:12:45+08:00</updated>
    <id>https://edmondfrank.github.io/blog/2020/04/09/rails-chang-liang-jia-zai-ji-zhi</id>
    <content type="html"><![CDATA[<h2>0x1 基本介绍</h2>

<p>首先，在编写Rails应用时，代码会预加载：通过约定类定义所在的文件名与类名一致映射，实现自动加载</p>

<p>Rails 通过config.cache_classes参数来设置常见加载的模式，主要有以下两种形式：</p>

<ul>
<li>Kernel#require(一般用于生产环境，只加载一次)</li>
<li>Kernel#load（一般用于开发环境）</li>
</ul>


<p>除了加载的方式不同，在<code>config.cache_classes = false</code>时，Rails还会启用Reloader中间件
在代码发生变更时，通过<code>remove_constant</code>/<code>const_missing</code>等方法实现么常量、模块热替换</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># railties-4.0.13/lib/rails/application.rb:384</span>
</span><span class='line'><span class="k">unless</span> <span class="n">config</span><span class="o">.</span><span class="n">cache_classes</span>
</span><span class='line'>    <span class="n">middleware</span><span class="o">.</span><span class="n">use</span> <span class="o">::</span><span class="no">ActionDispatch</span><span class="o">::</span><span class="no">Reloader</span><span class="p">,</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="n">app</span><span class="o">.</span><span class="n">reload_dependencies?</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面，本文逐步解析下Ruby及Rails下的常量加载机制</p>

<h2>0x2 常量刷新机载</h2>

<p>Ruby中常见的常量：</p>

<ul>
<li>模块 module</li>
<li>类 class</li>
<li>自定义常量</li>
</ul>


<p>其中，既然module和class在Ruby中本质就是常量的话，类和模块定义的嵌套创建的命名空间也是常量了</p>

<p>Ruby 的常量嵌套从内向外展开，嵌套通过Module.nesting方法审查</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">X</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Y</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">test</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="no">Module</span><span class="o">.</span><span class="n">nesting</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">X</span><span class="o">::</span><span class="n">Y</span><span class="o">.</span><span class="n">test</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">A</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">B</span>
</span><span class='line'>     <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">test</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="no">Module</span><span class="o">.</span><span class="n">nesting</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">A</span><span class="o">::</span><span class="n">B</span><span class="o">.</span><span class="n">test</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">X::Y</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">A::B</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">test</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="no">Module</span><span class="o">.</span><span class="n">nesting</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">A</span><span class="o">::</span><span class="n">B</span><span class="o">.</span><span class="n">test</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &gt;&gt;</span>
</span><span class='line'><span class="c1">#[X::Y, X]</span>
</span><span class='line'><span class="c1">#[A::B, A]</span>
</span><span class='line'><span class="c1">#[A::B, X::Y]</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面的例子看出，嵌套中的类和模块的名称与所在的命名空间没有必然联系</p>

<p>嵌套是解释器维护的一个内部堆栈，根据下述规则修改：
1. 执行 class 关键字后面的定义体时，类对象入栈；执行完毕后出栈。
2. 执行 module 关键字后面的定义体时，模块对象入栈；执行完毕后出栈。
3. 执行 class &lt;&lt; object 打开的单例类时，类对象入栈；执行完毕后出栈。
4. 调用 <code>instance_eval</code> 时如果传入字符串参数，接收者的单例类入栈求值的代码所在的嵌套层次。
5. 调用 <code>class_eval</code> 或 <code>module_eval</code> 时如果传入字符串参数，接收者入栈求值的代码所在的嵌套层次.
6. 顶层代码中由 Kernel#load 解释嵌套是空的，除非调用 load 时把第二个参数设为真值；如果是这样，Ruby 会创建一个匿名模块，将其入栈。</p>

<p>定义类和模块的本质是为常量赋值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; 本质：在Object中创建一个常量C，并将一个类对象存储进去</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Project</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="err">＃</span> <span class="o">=&gt;</span> <span class="err">本质：</span><span class="no">Project</span> <span class="o">=</span> <span class="no">Class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ApplicationRecord</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Admin</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; 本质：Admin = Module.new</span>
</span><span class='line'>
</span><span class='line'><span class="no">Admin</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; &quot;Admin&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>常量赋值的一条特殊规则：如果被赋值的对象是匿名类或模块，Ruby 会把对象的名称设为常量的名称。</p>

<p>自此之后常量和实例发生的事情无关紧要。例如，可以把常量删除，类对象可以赋值给其他常量，或者不再存储于常量中，等等。名称一旦设定就不会再变。</p>

<h2>0x3 常量解析</h2>

<h3>0x31 映射</h3>

<p>当常量存储在模块中，常量就会和类和模块中的常量表关联映射（类似哈希表）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Colors</span>
</span><span class='line'>    <span class="no">RED</span> <span class="o">=</span> <span class="s1">&#39;0xff0000&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>解析模块定义体时，会在Colors常量中的常量表新建一条映射，把"RED"映射到字符串"0xff0000"</p>

<h3>0x32 Ruby下的解析</h3>

<p>相对常量、绝对常量、限定常量</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Billing</span><span class="o">::</span><span class="no">Invoice</span> <span class="c1">#此时，Billing为相对常量，Invoice为限定常量</span>
</span><span class='line'><span class="o">::</span><span class="no">Billing</span><span class="o">::</span><span class="no">Invoice</span> <span class="c1">#此时，Billing为绝对常量（顶层常量）在Object中查找</span>
</span></code></pre></td></tr></table></div></figure>


<p>相对常量解析：
在代码中的特定位置，假如使用 cref 表示嵌套中的第一个元素，如果没有嵌套，则表示 Object。</p>

<ol>
<li>嵌套不为空，在嵌套元素中按元素顺序查找，元素祖先忽略不记</li>
<li>未果，向上回溯，进去cref的祖先链</li>
<li>未果，当cref为module时，进入Object查找常量</li>
<li>未果，在cref上调用const_missing，默认抛出NameError异常，可覆写</li>
</ol>


<p>限定常量解析：
上面例子 Invoice 由 Billing 限定，解析算法如下</p>

<ol>
<li>在 Billing 及其祖先中查找 Invoice 常量</li>
<li>未果，调用 Billing 的const_missing方法，默认抛出NameError异常</li>
</ol>


<p>但Rails 的自动加载机制没有仿照这个算法，查找的起点是要自动加载的常量名称和限定的类或模块对象</p>

<p>如果缺失限定常量，Rails 不会在父级命名空间中查找。</p>

<p>但是有一点要留意：缺失常量时，Rails 不知道它是相对引用还是限定引用。</p>

<p>如果类或模块的父级命名空间中没有缺失的常量，Rails 假定引用的是相对常量。否则是限定常量。</p>

<p>还有在Rails开发环境中，常量时惰性加载的。遇到不存在的常量再触发<code>const_missing</code>使用Rails的自动加载机制</p>

<p>但在生产环境中，预先把所有 autoload 目录下的文件都加载过了。没有触发<code>const_missing</code>使用Ruby本身的常量查找</p>

<h2>0x4 加载机制</h2>

<p>config.cache_classes 设为 false 时，Rails 会重新自动加载常量</p>

<p>在应用运行的过程中，如果相关的逻辑有变，会重新加载代码。为此，Rails 会监控下述文件：</p>

<ul>
<li>config/routes.rb</li>
<li>本地化文件</li>
<li>autoload_paths 中的 Ruby 文件</li>
<li>db/schema.rb 和 db/structure.sql</li>
</ul>


<p>如果这些文件中的内容有变，有个中间件会发现，然后重新加载代码。</p>

<p>主要原理：
1. 先覆写 <code>const_missing</code> 方法，按需去load对应依赖
2. 监听文件变化，自动加载机制会记录自动加载的常量
3. 检测到发生变更，重新加载机制使用 Module#remove_const 方法把它们从相应的类和模块中删除
4. 这样，运行代码时那些常量就变成未知了，从而按需重新加载文件。</p>

<p>但是，因为类之间的依赖极难处理。Rails默认reloader模块经常比较极端，不止重新加载有变化的代码，而是重载一切</p>

<h3>0x41 Ruby Module#autoload 的缺陷</h3>

<p>Module#autoload 是Ruby 提供的惰性常量加载机制，可以遍历应用树调用autoload把文件名和常规的常量名对应起来</p>

<p>但是，Module#autoload 只能使用 require 加载文件，因此无法重新加载。</p>

<p>不仅如此，它使用的还仅是 require 关键字，而不是 Kernel#require 方法。</p>

<p>因此，删除文件后，它无法移除声明。如果使用 Module#remove_const 把常量删除了，不会触发 Module#autoload</p>

<p>综上，在Rails的常量自动加载机制中使用了覆写Module#const_missing 的方式来实现</p>

<p>Rails(ActiveSupport) 中的会根据触发 const_missing 的常量名称来猜测并尝试加载对应的文件, 以加载 Auth::User 为例:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># demo/role.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Demo</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Role</span>
</span><span class='line'>    <span class="no">User</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># demo/user.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Demo</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>    <span class="s2">&quot;class Demo::User loaded&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># app/models/auth/user.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Auth</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Demo::Role 找不到 User 常量, 触发 <code>const_missing(const_name)</code>, 此处 <code>const_name == 'User'</code></p>

<p>ActiveSupport 中先拼接出来一个查询的起点 &ldquo;#{Demo::Role.name}::#{const_name}&rdquo;, 即 Demo::Role::User</p>

<p>首先尝试查找 autoload_paths 下的 demo/role/user.rb, 没找到</p>

<p>然后往上走一层, 尝试查找 autoload_paths 下的 demo/user.rb, 找到了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magit inside Emacs]]></title>
    <link href="https://edmondfrank.github.io/blog/2019/11/29/magit-inside-emacs/"/>
    <updated>2019-11-29T12:50:31+08:00</updated>
    <id>https://edmondfrank.github.io/blog/2019/11/29/magit-inside-emacs</id>
    <content type="html"><![CDATA[<h3>基本介绍</h3>

<p><a href="https://magit.vc/">Magit</a> 是 Emacs 下对git的封装，利用Magit可以让你在Emacs中即可完成对git仓库的管理（Emacs果然是一个伪装成编辑器的操作系统）</p>

<p>其次，Magit本不是Emacs的内置插件，使用时需要自己安装；具体的安装方法在Magit的官网上已经有<a href="https://magit.vc/manual/magit/Installing-from-Melpa.html#Installing-from-Melpa">相关教程</a>了，这里我就不再赘述了</p>

<h3>日常使用</h3>

<p>下面主要是列举一些日常开发和git管理中比较常使用的一些功能：</p>

<h4>1. M-x:magit-status(C-x g)</h4>

<p><img src="https://i.loli.net/2019/11/29/45276NGocmKRHdQ.png" alt="magit-status.png" />
该命令就类似于git status（查看项目的当前状态）；但是，在Magit中显示的状态信息会比git status更加丰富
其中包括：HEAD、Tag、未追踪文件、Stash列表、未staged文件、未push文件、最近commit等信息
然后，在相应的条目上回车还可以进行看到更加详细的内容，包括对应文件的修改、具体的commit信息等等</p>

<h4>2. (?) Magit Help</h4>

<p><img src="https://i.loli.net/2019/11/29/CZwBqeMlRDr24oI.png" alt="magit-help.png" />
在magit status buffer中键入？可以提示Magit的功能列表以及其相对应的key bindings，新手通过这样一个帮助列表，就可以找到对应的git功能一一操作试试，一段时间后就可以熟悉整个magit的操作了</p>

<h4>3. （s/S）Stage/Stage all</h4>

<p>Stage命令就类似于git add操作，在你修改了相关的git管理下的文件后，若是还未运行git add时，该文件处于Unstaged的状态
处于Unstaged状态的文件在git commit的时候其变更内容就不会提交；而运行git add [filename] 之后文件就变成Stage状态了，
此时如果再执行git commit，对应的文件变更内容则提交到本地，然后文件状态变更未Unpushed</p>

<h4>4. (u/U) Unstage/Unstage all</h4>

<p>Unstage命令就是Stage命令的反向操作，其对应git reset HEAD [filename]，在Magit中Stage/Unstage不仅能够作用于单个文件、所有的changes，还能作用于某个文件的部分区域上；在magit展开文件的diff时，你还发现在文件差异中用@@符号区分的差异区域，在对应的区域内键入Stage/Unstage命令即可仅仅存在该区域中的变更，然后在commit提交时，也可以单单提交这一部分变更</p>

<p><img src="https://i.loli.net/2019/11/29/J9Zq7wpPkUKn2ts.png" alt="diff.png" /></p>

<h4>5. &copy; Commit</h4>

<p>在magit-status-buffer中键入c键即为最常用的git commit指令，当然后除了最普通的Commit（cc）操作外
Magit还支持许多commit的扩展命令</p>

<table>
<thead>
<tr>
<th> key bindings </th>
<th> command </th>
<th> description                                                      </th>
</tr>
</thead>
<tbody>
<tr>
<td> cc           </td>
<td> Commit  </td>
<td> 最普通的 git commit                                              </td>
</tr>
<tr>
<td> ce           </td>
<td> Extend  </td>
<td> 当前Staged的文件合并到上一次提交中 git commit –amend –no-edit      </td>
</tr>
<tr>
<td> ca           </td>
<td> Amend   </td>
<td> 只修改上次提交的日志   git commit –amend                           </td>
</tr>
</tbody>
</table>


<h4>6. (F) Pull</h4>

<p>Pull命令对应git pull在git管理中用于拉取远程仓库代码，常用的组合命令有以下：</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> key bindings </th>
<th style="text-align:center;"> description                          </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> Fu           </td>
<td style="text-align:center;"> pull from upstream                   </td>
</tr>
<tr>
<td style="text-align:center;"> Fp           </td>
<td style="text-align:center;"> pull from pushremote                 </td>
</tr>
<tr>
<td style="text-align:center;"> Fe           </td>
<td style="text-align:center;"> pull from elsewhere 会引导你从哪pull   </td>
</tr>
</tbody>
</table>


<p>对于Fu 和 Fp来说，upstream是pushremote的上级，这样的场景对应fork分支开发的工作流；
比如User A 有个仓库 Project，User B fork了Project，这样对于User B来说
UserA/Project就是upstream，而pushremote是UserB/Project
另外，在Magit中只有设置了pushremote分支，这样magit status buffer才会显示有哪些变更没有push和pull</p>

<h4>7. (P) Push</h4>

<p>对应git push 命令</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> key bindings </th>
<th style="text-align:left;"> command                </th>
<th style="text-align:left;"> description                </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> pu           </td>
<td style="text-align:left;"> push to upstream       </td>
<td style="text-align:left;"> 最普通的git push            </td>
</tr>
<tr>
<td style="text-align:left;"> pe           </td>
<td style="text-align:left;"> push to elsewhere      </td>
<td style="text-align:left;"> 会引导你push到哪个远程分支    </td>
</tr>
<tr>
<td style="text-align:left;"> po           </td>
<td style="text-align:left;"> push another branch to </td>
<td style="text-align:left;"> 会引导你push到哪个分支       </td>
</tr>
<tr>
<td style="text-align:left;"> pT           </td>
<td style="text-align:left;"> push a tag             </td>
<td style="text-align:left;"> push 一个tag标签            </td>
</tr>
<tr>
<td style="text-align:left;"> pt           </td>
<td style="text-align:left;"> push all tag           </td>
<td style="text-align:left;"> push 所有tag标签            </td>
</tr>
</tbody>
</table>


<p>除此之外，上面的key bindings组合还可以添加对应的扩展参数，比如强制push，即p-Fu</p>

<h4>8. (l) Log查看日志</h4>

<p>对应git log，查看git日志记录</p>

<table>
<thead>
<tr>
<th> key bindings </th>
<th> description                  </th>
</tr>
</thead>
<tbody>
<tr>
<td> ll           </td>
<td> 查看当前分支的日志             </td>
</tr>
<tr>
<td> lo           </td>
<td> log other 查看其他分支的日志   </td>
</tr>
</tbody>
</table>


<p>在具体的commit上使用 l 键还可以根据给出的命令组合进一步查看commit提交的详情信息</p>

<h4>9. (a/A) cherry picking</h4>

<p>对应git cherry-pick，选择某一次的commit在当前分支重新commit一次，适用于合并代码但又不想merge整个PR和分支的场景</p>

<h4>10. (z)Stash</h4>

<p>对应git Stash，将临时的未commit的变更内容暂存起来
常用命令有：</p>

<table>
<thead>
<tr>
<th> key bindings </th>
<th> command       </th>
<th> description </th>
</tr>
</thead>
<tbody>
<tr>
<td> zz           </td>
<td> git stash     </td>
<td> 暂存        </td>
</tr>
<tr>
<td> zp           </td>
<td> git stash pop </td>
<td> 恢复        </td>
</tr>
</tbody>
</table>


<p>除此之外，还有一个有意思的用法是，当你希望单单想stash变更文件列表中的一个文件时，可以先将目标文件Stage在index索引区，然后适用 zi 组合暂存index区域，这样就可以实现单一文件的stash功能</p>

<h4>11. (k) Discard/Delete</h4>

<p>对应git中的checkout之类的命令，用作于放弃更改和删除相关的操作，例如，放弃一个Unstage文件的更改、删除一个Stash、删除一个@@区域差异等等</p>

<h4>12. (x) Resetting</h4>

<p>类似git reset命令，放弃最近的n次提交，这n次的提交内容变成staged状态，之后可以进行合并提交或者丢弃
只需要在日志日光标定位到想要丢弃的log,即可回滚到这一次的提交状态</p>

<h4>13. (m) Merge</h4>

<p>对应git中合并分支的操作，常用的组合命令为 mm ，之后会提示选择与哪个分支进行merge</p>

<h4>14. &reg; Rebase</h4>

<p>对应git中的变基操作</p>

<table>
<thead>
<tr>
<th> key bindings </th>
<th> description                        </th>
</tr>
</thead>
<tbody>
<tr>
<td> ru           </td>
<td> rebase on upstream                 </td>
</tr>
<tr>
<td> rp           </td>
<td> rebase on pushremote               </td>
</tr>
<tr>
<td> re           </td>
<td> 会提示你以哪个分支为基点进行rebase     </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsçš„ActiveSupport::Concern]]></title>
    <link href="https://edmondfrank.github.io/blog/2019/11/27/railsde-activesupport-concern/"/>
    <updated>2019-11-27T18:47:49+08:00</updated>
    <id>https://edmondfrank.github.io/blog/2019/11/27/railsde-activesupport-concern</id>
    <content type="html"><![CDATA[<h3>1）简单内部类</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ActiveSupport::Concern</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">MultipleIncludedBlocks</span> <span class="o">&lt;</span> <span class="no">StandardError</span> <span class="c1">#:nodoc:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>      <span class="k">super</span> <span class="s2">&quot;Cannot define multiple &#39;included&#39; blocks for a Concern&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ActiveSupport::Concern简单定义了一个内部的错误类型，
这个自定义错误类型主要用于提醒我们在扩展了ActiveSupport::Concern的模块中</p>

<p>只能够显式调用模块方法ActiveSupport::Concern::included一次，</p>

<p>第二次调用的话就会抛出这个自定义的错误类型。</p>

<h3>2）设置“胎记”</h3>

<p>我们前面说过扩展了ActiveSupport::Concern的模块我把它简称为依赖模块，那我们怎么知道一个模块是不是依赖模块呢？答案就在这个类方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ActiveSupport::Concern</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">extended</span><span class="p">(</span><span class="n">base</span><span class="p">)</span> <span class="c1">#:nodoc:</span>
</span><span class='line'>    <span class="n">base</span><span class="o">.</span><span class="n">instance_variable_set</span><span class="p">(</span><span class="ss">:@_dependencies</span><span class="p">,</span> <span class="o">[]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>写过Ruby的应该都知道，这个是当一个模块被扩展(extend)之后就会被调用的一个回调方法，</p>

<p>并以扩展它的模块做为参数(base)传入该回调方法。</p>

<p>当一个模块扩展了ActiveSupport::Concern之后就会在模块内部设置一个实例变量</p>

<p>@_dependencies并设置为空数组，我们姑且把它看做是ActiveSupport::Concern的“胎记”，</p>

<p>后面我们会利用这个“胎记”所包含的依赖项，优雅地增强我们的终端模块。</p>

<h3>3) 收集并扩展相关方法</h3>

<p>在分析后面的方法之前我们先来简单看一下的原理。</p>

<p>我们都知道在Ruby里面如何定义一个类，并且定义相关的类方法，和实例方法</p>

<p>（我们只需要用class关键字就能够很容易做到这一点），但不知道大家是否了解还有这样一种方式？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">instance_block</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">instance_method</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;I am instance method&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">class_method_in_instance_block</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;I am class method in instance block&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">class_block</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">class_method</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;I am class method&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="no">Example</span> <span class="o">=</span> <span class="no">Class</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="no">Example</span><span class="o">.</span><span class="n">class_eval</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instance_block</span><span class="p">)</span>
</span><span class='line'><span class="no">ClassModule</span> <span class="o">=</span> <span class="no">Module</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="no">ClassModule</span><span class="o">.</span><span class="n">module_eval</span><span class="p">(</span><span class="o">&amp;</span><span class="n">class_block</span><span class="p">)</span>
</span><span class='line'><span class="no">Example</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="no">ClassModule</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">Example</span><span class="o">.</span><span class="n">class_method</span>
</span><span class='line'><span class="no">Example</span><span class="o">.</span><span class="n">class_method_in_instance_block</span>
</span><span class='line'><span class="no">Example</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">instance_method</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行结果</p>

<blockquote><p>I am class method
I am class method in instance block
I am instance method</p></blockquote>

<p>运行结果有点意思，下面简单来分析一下:
我们以代码块的方式收集了类方法class_method，class_method_in_instance_block，</p>

<p>以及实例方法instance_method。然后我们创建一个空的类Example，</p>

<p>用Class#class_eval方法来打开类，在类的上下文环境下运行块instance_block，</p>

<p>其实这就相当于我们在类上下文中运行相应的语句，这样就能够得到Example#instance_method,</p>

<p>Example::class_method_in_instance_block这两个方法了。
另外，我们从已有的知识中了解到，可以通过Class#extend扩展模块的方式来获得类方法。</p>

<p>为此我们可以把class_block这个代码块包裹在模块ClassModule中，</p>

<p>最后我们只需要扩展(extend)这个模块就可以得到相应的类方法Example#class_method了。</p>

<p>ActiveSupport::Concern其实就是这种黑科技，</p>

<p>这里我简单把接下来的过程分为两部分</p>

<p>1）收集方法。</p>

<p>2）对收集的方法进行功能扩展</p>

<ol type="a">
<li>方法收集
来看看依赖模块如何收集方法的？</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ActiveSupport::Concern</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">included</span><span class="p">(</span><span class="n">base</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">base</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>      <span class="k">raise</span> <span class="no">MultipleIncludedBlocks</span> <span class="k">if</span> <span class="n">instance_variable_defined?</span><span class="p">(</span><span class="ss">:@_included_block</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="vi">@_included_block</span> <span class="o">=</span> <span class="n">block</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">super</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先我们来看ActiveSupport::Concern#included，</p>

<p>当ActiveSupport::Concern被扩展之后这个included方法就会变成相应模块的类方法了。</p>

<p>咦，这不是一个模块被包含之后才会被调用的回调函数吗？没错，为了不影响它原来的功能rails团队采用了个巧妙的做法，</p>

<p>当我们在扩展了ActiveSupport::Concern的模块的上下文中显式调用included方法，</p>

<p>并且不带任何参数而只传入代码块的情况下，便会在模块内部设置一个@_included_block实例变量来接收这个代码块，</p>

<p>换句话说这个实例变量就是我们将来需要在终端模块上下文运行的代码块。</p>

<p>而在其他情况下则通过super关键字来调用原始版本的included方法。</p>

<p>这样既增强了included方法又不影响原始方法的使用。</p>

<p>另外我们也注意到了，在一个模块里面included方法只能被显式调用一次，</p>

<p>否则会抛出MultipleIncludedBlocks这个自定义的错误，这便是前面定义的内部类的应用场景。</p>

<p>OK，收集完需要在模块上下文运行的代码，我们接下来要收集类方法了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ActiveSupport::Concern</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">class_methods</span><span class="p">(</span><span class="o">&amp;</span><span class="n">class_methods_module_definition</span><span class="p">)</span>
</span><span class='line'>    <span class="n">mod</span> <span class="o">=</span> <span class="nb">const_defined?</span><span class="p">(</span><span class="ss">:ClassMethods</span><span class="p">,</span> <span class="kp">false</span><span class="p">)</span> <span class="p">?</span>
</span><span class='line'>      <span class="nb">const_get</span><span class="p">(</span><span class="ss">:ClassMethods</span><span class="p">)</span> <span class="p">:</span>
</span><span class='line'>      <span class="nb">const_set</span><span class="p">(</span><span class="ss">:ClassMethods</span><span class="p">,</span> <span class="no">Module</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mod</span><span class="o">.</span><span class="n">module_eval</span><span class="p">(</span><span class="o">&amp;</span><span class="n">class_methods_module_definition</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实这个东西跟前面的included方法原理差不多，也是通过代码块来收集方法，只是有一点点不同，</p>

<p>我们需要把这个收集到的代码块包裹到一个模块中，以后再扩展这个模块。</p>

<p>首先通过const_defined?来判断常量ClassMethods是否存在，</p>

<p>该方法的第二个参数false表示只从当前模块查找该常量，而不会从祖先链中去查找。</p>

<p>如果没有则以ClassMethods为名定义一个模块，</p>

<p>然后以Module#module_eval方法打开该模块并在模块的上下文运行我们所接收的代码块class_methods_module_definition。</p>

<p>这样模块ClassMethods就会包含对应的方法了。</p>

<p>在以后的日子里我们只需要扩展ClassMethods，该模块里面的方法就能成为目标模块的类方法了。</p>

<ol type="a">
<li>功能增强
收集完相关功能之后可以来看如何增强我们的终端模块了。在分析代码之前，</li>
</ol>


<p>先来认识一下append_features，我们需要知道的是它会在模块被包含的时候调用，并且它会在included回调方法之前被调用。</p>

<p>接下来我们看看扩展功能的源代码，它应该是ActiveSupport::Concern里面最复杂的方法了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ActiveSupport::Concern</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">append_features</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">base</span><span class="o">.</span><span class="n">instance_variable_defined?</span><span class="p">(</span><span class="ss">:@_dependencies</span><span class="p">)</span>
</span><span class='line'>      <span class="n">base</span><span class="o">.</span><span class="n">instance_variable_get</span><span class="p">(</span><span class="ss">:@_dependencies</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">base</span> <span class="o">&lt;</span> <span class="nb">self</span>
</span><span class='line'>      <span class="vi">@_dependencies</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">dep</span><span class="o">|</span> <span class="n">base</span><span class="o">.</span><span class="n">include</span><span class="p">(</span><span class="n">dep</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">super</span>
</span><span class='line'>      <span class="n">base</span><span class="o">.</span><span class="n">extend</span> <span class="nb">const_get</span><span class="p">(</span><span class="ss">:ClassMethods</span><span class="p">)</span> <span class="k">if</span> <span class="nb">const_defined?</span><span class="p">(</span><span class="ss">:ClassMethods</span><span class="p">)</span>
</span><span class='line'>      <span class="n">base</span><span class="o">.</span><span class="n">class_eval</span><span class="p">(</span><span class="o">&amp;</span><span class="vi">@_included_block</span><span class="p">)</span> <span class="k">if</span> <span class="n">instance_variable_defined?</span><span class="p">(</span><span class="ss">:@_included_block</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在我们可以看到之前设置“胎记”起作用了，设置了“胎记”的依赖模块也可以被其他的依赖模块所包含，</p>

<p>但他们并不会进行相应的功能扩展，他们会做的只是在“胎记”列表@_dependencies里面添加对应的依赖选项。</p>

<p>然后返回false。这也是我们第一个条件分支的逻辑。
当我们的依赖模块终于被终端模块（不含“胎记”的模块）包含的时候我们程序便可以走else分支的逻辑。</p>

<p>如果该依赖模块已经在终端模块的祖先链中的话则表明这个模块已经在终端模块增强过了，我们就没必要做重复工作，直接返回false。</p>

<p>否则的话继续执行后面的代码，接下来这个语句有点意思
@_dependencies.each { |dep| base.include(dep) }</p>

<p>我们会以终端模块的身份去包含当前依赖模块的@_dependencies列表里面的所有模块，</p>

<p>这个时候我们@_dependencies的模块又会进入各自相应的append_features方法，并且都会走else分支，</p>

<p>然后查看各自@_dependencies接下来又会以终端模块的身份再去包含列表里的那些模块，</p>

<p>以此类推。这递归的过程就像是链式反应，这样就能保证不管各个依赖模块之间的依赖关系如何，</p>

<p>我们的终端模块都不用太过在意了，反正最后都会被我们终端模块给包含掉。</p>

<p>接下来调用super关键字来调用原始的append_features方法，保证了原始的功能。</p>

<p>毕竟我们这里做的是对原始功能加强，而并不是要复写掉原始功能。</p>

<p>最后我们在每一个依赖模块内部都会执行大家所熟悉的语句
base.extend const_get(:ClassMethods) if const_defined?(:ClassMethods)
base.class_eval(&amp;@<em>included_block) if instance_variable_defined?(:@</em>included_block)</p>

<p>最最最后，咱们的终端模块就会具备我们预先定义好的类方法，实例方法。</p>

<p>并且可以直接运行一些预先定义好需要在模块上下文运行的类方法了。</p>

<h3>优雅的Ruby</h3>

<p>源码分析暂时告一段落，为了让我们对ActiveSupport::Concern印象更加深刻一些。最后我用一个简单的例子来展示一下这个库的优雅之处</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_support&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">A</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">included</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">number1</span>
</span><span class='line'>      <span class="s2">&quot;number1 method&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">class_methods</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">active1</span>
</span><span class='line'>      <span class="s2">&quot;active1 class method&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">B</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
</span><span class='line'>  <span class="kp">include</span> <span class="n">A</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">included</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">number2</span>
</span><span class='line'>      <span class="s2">&quot;number2 method&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">class_methods</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">active2</span>
</span><span class='line'>      <span class="s2">&quot;active2 class method&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">C</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
</span><span class='line'>  <span class="kp">include</span> <span class="n">B</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">included</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">number3</span>
</span><span class='line'>      <span class="s2">&quot;number3 method&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">number2</span>
</span><span class='line'>      <span class="s2">&quot;number2 in C&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">class_methods</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">active3</span>
</span><span class='line'>      <span class="s2">&quot;active3 class method&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">active2</span>
</span><span class='line'>      <span class="s2">&quot;active2 in C&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Example</span>
</span><span class='line'>  <span class="kp">include</span> <span class="n">C</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">A</span><span class="o">.</span><span class="n">instance_variable_get</span><span class="p">(</span><span class="s2">&quot;@_dependencies&quot;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">B</span><span class="o">.</span><span class="n">instance_variable_get</span><span class="p">(</span><span class="s2">&quot;@_dependencies&quot;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">C</span><span class="o">.</span><span class="n">instance_variable_get</span><span class="p">(</span><span class="s2">&quot;@_dependencies&quot;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="no">Example</span><span class="o">.</span><span class="n">active3</span>
</span><span class='line'><span class="nb">puts</span> <span class="no">Example</span><span class="o">.</span><span class="n">active2</span>
</span><span class='line'><span class="nb">puts</span> <span class="no">Example</span><span class="o">.</span><span class="n">active1</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="no">Example</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">number3</span>
</span><span class='line'><span class="nb">puts</span> <span class="no">Example</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">number2</span>
</span><span class='line'><span class="nb">puts</span> <span class="no">Example</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">number1</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后的打印结果是</p>

<blockquote><p>&ldquo;[]&rdquo; &ldquo;[A]&rdquo; &ldquo;[B]&rdquo;
active3 class method
active2 in C
active1 class method
number3 method
number2 in C
number1 method</p></blockquote>

<p>利用ActiveSupport::Concern我们可以用少量的代码，优雅地定义我们的扩展模块，并在需要的时候进行功能增强。</p>

<p>在该例子中我通过打印“胎记”可以知道依赖模块之间的依赖关系，</p>

<p>而且他们之间的依赖关系终端模块根本不会在意，它只需要包含一个依赖模块，</p>

<p>便可以得到有依赖关系其他依赖模块中所定义的功能了。</p>

<p>另外，我在模块C中做了些手脚，复写了它所依赖的模块B中所收集的方法，</p>

<p>是为了展示我们所收集方法在各个有依赖关系模块中的优先级关系。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[文本建模算法入门-1]]></title>
    <link href="https://edmondfrank.github.io/blog/2019/01/04/wen-ben-jian-mo-suan-fa-ru-men-1/"/>
    <updated>2019-01-04T13:43:27+08:00</updated>
    <id>https://edmondfrank.github.io/blog/2019/01/04/wen-ben-jian-mo-suan-fa-ru-men-1</id>
    <content type="html"><![CDATA[<p>﻿<h1 id="文本建模算法入门一">文本建模算法入门（一）</h1></p>

<h3 id="0x1-文本建模">0x1 文本建模</h3>




<p>文本并不像其他数值型的数据一样可以比较轻易的通过运算、函数、方程、矩阵等来表达他们之间的相互关系。</p>




<p>在处理一篇文本的时候，假设每一个文本储存为一篇文档，那么从人的视角来看，这可以说是一段有序的词序列<script type="math/tex; mode=display" id="MathJax-Element-1">Document=(w_1,w_2,...,w_n)</script> <br>
统计学家将这些序列的生成，生动地描绘成了一个“上帝的游戏”，即人类产生的所有语料的文本都可以看作是：一个伟大的上帝在天堂中掷骰子形成的。我们所看到的文本其实就是这个游戏掷了若干次后产生的序列。</p>




<p>那么，在这个游戏中，我们<strong>最需要关注的两个核心问题</strong>就出现了：</p>




<ol>
<li>上帝有怎样的骰子？</li>
<li>上帝是怎么掷的骰子？</li>
</ol>




<p>对应这两个问题，各大学家持着不同的观点，于是便有了以下三种模型：</p>




<ol>
<li>Unigram Model</li>
<li>Topic Model(PLSA)</li>
<li>LDA</li>
</ol>




<h4 id="0x11-unigram-model">0x11 Unigram Model</h4>




<p>Unigram Model是非常简单直接的，它假设</p>




<ol>
<li>上帝只有一个V面的骰子，每一个面对应一个词，同时每个面的概率不一样。（这里可以通过“老千骰子”来理解下，有些面因为被做过了“手脚”，所以抛到的几率就大了，那如果没个面都这样，那么每个面抛到的几率也就不一样了）</li>
<li>每抛一次骰子，抛出的面就对应有一个词，那么抛n次骰子后，按抛掷顺序产生的序列就生成了一篇n个词的文档</li>
</ol>




<p><img src="https://ws1.sinaimg.cn/large/a3d23450gy1fyudrkxl14j2086052dg2.jpg" alt="enter image description here" title=""></p>




<p>那现在我们把上帝这个唯一的骰子各个面的概率记为<script type="math/tex" id="MathJax-Element-2">\vec{p}=\{p_1,p_2,...,p_v\}</script>，然后我们把掷这个V面骰子的实验记作<script type="math/tex" id="MathJax-Element-3">w \sim Mult(w|\vec{p}) </script></p>




<p>那么对应一篇文档d，该文档生成的概率就是 <br>
<script type="math/tex; mode=display" id="MathJax-Element-4">p(\vec{w})=p(w_1,w_2,...,w_n)=p(w_1)p(w_2)...p(w_n)</script></p>




<p>而文档和文档之间我们认为是独立的，所以如果语料中有多篇文档<script type="math/tex" id="MathJax-Element-5">W=(\vec{w_1},\vec{w_2},...,\vec{w_m})</script>，则该语料生成的概率就是<script type="math/tex; mode=display" id="MathJax-Element-6">p(W)=p(\vec{w_1})p(\vec{w_2})...p(\vec{w_m})</script></p>




<p>在Unigram Model中，我们又假设了文档之间是独立可交换的。即，词与词之间的顺序对文档表示并不造成影响，一篇文档相当于一个袋子，里面装着一些词。这样的模型也称为<strong>词袋模型（Bag-of-words）。</strong></p>




<p>那么，如果语料中的总词频是N，在N个词中，如果我们关注每一个词<script type="math/tex" id="MathJax-Element-7">w_i</script>的发生次数<script type="math/tex" id="MathJax-Element-8">n_i</script>，则<script type="math/tex" id="MathJax-Element-9">\vec{n}=(n_1,n_2,...,n_V)</script>正好是一个多项分布 <br>
<script type="math/tex; mode=display" id="MathJax-Element-10">p(\vec{n})=Mult(\vec{n}|\vec{p},N)</script> <br>
此时，语料的概率是 <br>
<script type="math/tex; mode=display" id="MathJax-Element-11">p(W)=p(\vec{w_1})p(\vec{w_2})...p(\vec{w_m})=\prod_{k=1}^Vp_k^{n_k}</script></p>




<h4 id="0x110-贝叶斯unigram-model假设">0x110 贝叶斯Unigram Model假设</h4>




<p>在贝叶斯统计学派看来，上帝拥有唯一一个固定的骰子是不合理的。于是他们觉得以上模型的骰子<script type="math/tex" id="MathJax-Element-12">\vec{p}</script>不应该唯一固定，而应该也是一个随机变量。</p>




<p>那这样我们就可以将整个掷骰子的游戏过程更新成以下形式：</p>




<ol>
<li>上帝有一个装着无穷多骰子的罐子，里面有各种骰子，每个骰子有V个面。每一个面对应一个词</li>
<li>上帝从罐子抽出一个骰子，然后用这个骰子不断的抛，每抛一次骰子，抛出的面就对应有一个词，那么抛n次骰子后，按抛掷顺序产生的序列就生成了一篇n个词的文档 <br>
<img src="https://ws1.sinaimg.cn/large/a3d23450gy1fyufvboyshj20a106cjs7.jpg" alt="enter image description here" title=""></li>
</ol>




<p>在以上的假设之下，由于我们事先并不知道上帝用了哪个骰子<script type="math/tex" id="MathJax-Element-13">\vec{p}</script>，所以每个骰子都是有可能被使用的，只是使用的概率由先验分布<script type="math/tex" id="MathJax-Element-14">p(\vec{p})</script>决定，对每一个具体的骰子<script type="math/tex" id="MathJax-Element-15">\vec{p}</script>，由该骰子产生数据的概率是<script type="math/tex" id="MathJax-Element-16">p(W|\vec{p})</script>，所以最终数据产生的概率就是对每个骰子上产生的数据概率进行积分累加求和 <br>
<script type="math/tex; mode=display" id="MathJax-Element-17">P(W)=\int p(W|\vec{p})p(\vec{p})d\vec{p}</script> <br>
在贝叶斯分析的框架之下，此处的先验分布概率其实就是一个多项分布的概率，其中一个比较好的选择即<strong>多项分布对应的共轭分布：Dirichlet分布</strong></p>




<h4 id="0x12-plsa-topic-model">0x12 PLSA Topic Model</h4>




<p>再来回顾Unigram Model我们发现：这个模型的假设过于简单，和人类真实的书写有着较大的差距</p>




<p>从人类视角看，我们在日常构思文章中，我们往往要先确定自己文章的主旨，包含了哪些主题，然后再围绕着这些主题展开阐述。</p>




<p>例如，一篇关于现代教育的文章，它可能就包含了这些主题：教育方法、多媒体技术、互联网等。篇幅上可能以教育方法为主，而其他为辅。然后，在不同的主题里面就包含了许多主题领域内常见的关键词。例如，谈到互联网时，我们会提及Web、Tcp等。</p>




<p>这样一种直观的想法就在<strong>PLSA模型中进行了明确的体现</strong>，如果我们再利用这个想法更新“掷骰子”的游戏就有以下情形：</p>




<ol>
<li>上帝有两种类型骰子，一类是doc-topic骰子，骰子共k个面代表了k个主题；一类是topic-word骰子，骰子V个面，每面对应主题内的一个词</li>
<li>生成文章的时候，首先要先创造一个特定的doc-topic骰子，使得骰子内的主题围绕文章要阐述的主题</li>
<li>投掷doc-topic骰子，得到一个主题z</li>
<li>根据得到的主题z，找到对应的topic-word骰子，投掷它得到一个词</li>
<li>不断重复3，4步，直至文章生成完成</li>
</ol>




<p><img src="https://ws1.sinaimg.cn/large/a3d23450gy1fyugrx9ybdj20a50810tj.jpg" alt="enter image description here" title=""></p>




<p>在上面的游戏规则中，文档与文档之间顺序无关，同一个文档内的词的顺序也是无关的。所以还是一个bag-of-words模型。</p>




<p>那么，在第m篇文档Dm中每个词的生成概率为： <br>
<script type="math/tex; mode=display" id="MathJax-Element-18">p(w|D_m)=\sum^K_{z=1}p(w|z)p(z|D_m)=\sum^K_{z=1}\phi_{zw_i}\theta_{dz}</script> <br>
<script type="math/tex" id="MathJax-Element-19">\phi_{zw_i}</script>:对应游戏中K个topic-word骰子中第z个骰子对应的词列表</p>




<p><script type="math/tex" id="MathJax-Element-20">\theta_{dz}</script>:文档对应的第z个主题，即对应的doc-topic</p>




<p>所以整篇文档的生成概率就为： <br>
<script type="math/tex; mode=display" id="MathJax-Element-21">p(w|D_m)=\prod^n_{i=1}\sum^K_{z=1}p(w_i|z)p(z|D_m)</script></p>




<h4 id="0x13-ldalatent-dirichlet-allocation">0x13 LDA(Latent Dirichlet Allocation)</h4>




<p>就像Unigram Model 加入贝叶斯框架那样，doc-topic和topic-word都是模型的参数，即随机变量。于是类似对Unigram Model的改造对以上两个骰子模型加入先验分布。然后由于<script type="math/tex" id="MathJax-Element-22">\vec{\theta}</script>，<script type="math/tex" id="MathJax-Element-23">\vec{\phi}</script>都对应着多项分布，因此先验分布依旧选择Drichlet分布。于是得到的这个新模型就是<strong>LDA(Latent Dirichlet Allocation)模型</strong> <br>
<img src="https://ws1.sinaimg.cn/large/a3d23450gy1fyuhfhrza5j20cx09bwgm.jpg" alt="enter image description here" title=""></p>




<p>在LDA模型中，上帝的游戏规则就又被更新成如下情形：</p>




<ol>
<li>上帝有两个罐子，第一个装着都哦doc-topic骰子，第二个装着topic-word骰子</li>
<li>上帝随机的从第二个罐子中独立抽出K个topic-doc骰子，编号1-K</li>
<li>每次生成新文档时，从第一个罐子随机抽一个doc-topic骰子</li>
<li>投掷得到的doc-topic骰子。得到一个主题编号z</li>
<li>在K个主题骰子里面选择编号为z的骰子，投掷骰子，得到一个词</li>
<li>重复4，5步，直至文档生成完成</li>
</ol>




<h3 id="0x2-后记">0x2 后记</h3>




<p>至此，入门篇（一）的内容就写到这了。由于是第一篇，文章中避过了许多较为复杂的数学证明和计算，尤其是关于LDA模型的。这样是为了，先建立对文本建模思路和过程的直观认识，而不是一上来就深究细节。</p>




<p>加上笔者目前也是在学习阶段，后面的细节再慢慢地一一补充，大家共同进步 !! <br>
                        \(^_^)/</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的算法天梯之路之-穷举搜索]]></title>
    <link href="https://edmondfrank.github.io/blog/2018/05/30/wo-de-suan-fa-tian-ti-zhi-lu-zhi-qiong-ju-sou-suo/"/>
    <updated>2018-05-30T22:15:17+08:00</updated>
    <id>https://edmondfrank.github.io/blog/2018/05/30/wo-de-suan-fa-tian-ti-zhi-lu-zhi-qiong-ju-sou-suo</id>
    <content type="html"><![CDATA[<h2 id="穷举搜索的例子google方程式">穷举搜索的例子－Google方程式</h2>




<h3 id="问题描述">　问题描述</h3>




<p>有一个由字符组成的等式，WWWDOT-GOOGLE = DOTCOM，每个字符代表一个0-9之间的数字，WWWDOT、GOOGLE和DOTCOM都是合法的数字，不能以零开头。请找出一组字符与数字的对应关系，使得他们可以互相转换，并且替换之后能够满足等式。</p>




<h3 id="问题分析">问题分析</h3>




<p>从排列组合的角度来看，这道题是一道典型的排列组合问题，题目中一共出现了9个字母。</p>




<p>如果不考虑0开头的情况下，这样的组合应该有10x9x8x7x6x5x4x3x2=3628800种组合。</p>




<p>在这样的情况之下，计算机的穷举处理应该是毫无压力的。</p>




<h3 id="问题求解">问题求解</h3>




<p>首先为了能够表示这样一种可变的字符元素列表，我们需要自定义一种数据结构。首先我们知道这个自定义结构中应该包含有三个属性，分别是 字符本身，字符代表的数字以及是否为数字的最高位，因为最高位是不能为0的，所以在这里我们要区别对待。</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">tagCharItem</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">leading</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="n">CHAR_ITEM</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<p>接着我们初始化这个列表。=</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">CHAR_ITEM</span> <span class="n">charItem</span><span class="p">[]</span><span class="o">=</span><span class="p">{</span>
</span><span class='line'><span class="p">{</span><span class="sc">&#39;W&#39;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nb">true</span><span class="p">},{</span><span class="sc">&#39;D&#39;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nb">true</span><span class="p">},{</span><span class="sc">&#39;O&#39;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nb">true</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="sc">&#39;T&#39;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nb">false</span><span class="p">},{</span><span class="sc">&#39;G&#39;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nb">true</span><span class="p">},{</span><span class="sc">&#39;L&#39;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nb">false</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="sc">&#39;E&#39;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nb">false</span><span class="p">},{</span><span class="sc">&#39;C&#39;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nb">false</span><span class="p">},{</span><span class="sc">&#39;M&#39;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nb">false</span><span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为这是一个组合问题，那么两个字母就不能被指定为相同的数字，这样我们需要定义额外的占用标识。</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">tagCharValue</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">isused</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="n">CHAR_VALUE</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//穷举算法实现如下</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">SearchingResult</span><span class="p">(</span><span class="n">CHAR_ITEM</span> <span class="n">ci</span><span class="p">[],</span><span class="n">CHAR_VALUE</span> <span class="n">cv</span><span class="p">[],</span>
</span><span class='line'><span class="kt">int</span> <span class="n">index</span><span class="p">,</span><span class="n">CharListReadyFuncPtr</span> <span class="n">callback</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">index</span> <span class="o">==</span> <span class="n">max_char_count</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">callback</span><span class="p">(</span><span class="n">ci</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">max_number_count</span><span class="p">;</span><span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">IsValueValid</span><span class="p">(</span><span class="n">ci</span><span class="p">[</span><span class="n">index</span><span class="p">],</span><span class="n">cv</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cv</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">isused</span><span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>      <span class="n">ci</span><span class="p">[</span><span class="n">index</span><span class="p">].</span><span class="n">value</span> <span class="o">=</span> <span class="n">cv</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'>      <span class="n">SearchingResult</span><span class="p">(</span><span class="n">ci</span><span class="p">,</span><span class="n">cv</span><span class="p">,</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">callback</span><span class="p">);</span>
</span><span class='line'>      <span class="n">cv</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">isused</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>根据题目要求，W，G，D三者都不能为0，为了加快穷举速度可以对他们为0的情况进行剪枝。 <br>
IsValueValid是评估函数，在剪枝操作之后，callback的被调用次数可以减少约30%。</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//callback代码实现</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">OnCharListReady</span><span class="p">(</span><span class="n">CHAR_ITEM</span> <span class="n">ci</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span> <span class="n">minuend</span> <span class="o">=</span> <span class="s">&quot;WWWDOT&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span> <span class="n">subtrahend</span> <span class="o">=</span> <span class="s">&quot;GOOGLE&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span> <span class="n">diff</span> <span class="o">=</span> <span class="s">&quot;DOTCOM&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">MakeIntegerValue</span><span class="p">(</span><span class="n">ci</span><span class="p">,</span><span class="n">minuend</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="n">MakeIntegerValue</span><span class="p">(</span><span class="n">ci</span><span class="p">,</span><span class="n">subtrahend</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="n">MakeIntegerValue</span><span class="p">(</span><span class="n">ci</span><span class="p">,</span><span class="n">diff</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">((</span><span class="n">m</span><span class="o">-</span><span class="n">s</span><span class="p">)</span><span class="o">==</span><span class="n">d</span><span class="p">){</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">m</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;-&quot;</span> <span class="o">&lt;&lt;</span><span class="n">s</span><span class="o">&lt;&lt;</span> <span class="s">&quot;=&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">d</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<blockquote>
  <p>问题答案 <br>
  777589 - 188103 = 589486 <br>
  777589 - 188106 = 589483</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[隐马尔可夫模型（HMM）的原理]]></title>
    <link href="https://edmondfrank.github.io/blog/2018/03/10/yin-ma-er-ke-fu-mo-xing-(hmm)de-yuan-li/"/>
    <updated>2018-03-10T08:48:21+08:00</updated>
    <id>https://edmondfrank.github.io/blog/2018/03/10/yin-ma-er-ke-fu-mo-xing-(hmm)de-yuan-li</id>
    <content type="html"><![CDATA[<p>﻿<h1 id="隐马尔可夫模型hmm的原理">隐马尔可夫模型（HMM）的原理</h1></p>

<h2 id="简介">简介</h2>




<p>隐马尔可夫模型是一个基于<a href="https://en.wikipedia.org/wiki/Markov_chain">马尔可夫链</a>的统计模型。</p>




<p><strong>马尔可夫链</strong>因<a href="http://wiki.mbalib.com/wiki/%E5%AE%89%E5%BE%B7%E7%83%88%C2%B7%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB">安德烈·马尔可夫（Andrey Markov，1856－1922）</a>得名，是数学中具有马尔可夫性质的离散时间随机过程。该过程中，在给定当前知识或信息的情况下，过去（即当期以前的历史状态）对于预测将来（即当期以后的未来状态）是无关的。</p>




<p>虽然从维基百科上摘取下来的概念和定义看着十分的晦涩难懂，但是模型背后的思想是非常简单的，即：首先假设你的系统可以建模为马尔可夫链，然后，系统所发出的信号（输出的可见结果）仅取决于系统当前的状态。那么，隐马尔可夫模型代表的一种情景就是：系统的状态对你而言是不可见的，你仅仅只能观测到系统所发出的信号或者说是系统所输出的结果。</p>




<p>举个通俗易懂的栗子。</p>




<p>假设你有一个住在国外的朋友，他通常会根据天气来安排他的日常活动。你不知道他的国家那边的天气如何（系统的状态），但你确可以在跟他的聊天中知道他今天进行了什么活动（系统的输出），然后这就是一个简单的隐马尔可夫模型。</p>




<p>我们将整个模型 <br>
<img src="https://i.loli.net/2017/09/10/59b49b5275c1d.jpg" alt="markov.jpg" title=""></p>




<p>现在有三个比较关键的问题有待我们解决： <br>
1.  知道整个模型后，你朋友告诉你他这三天的活动是：散步（Walk），购物（Shop），清洁屋子（Clean），那么根据模型，计算产生这些行为序列的概率是多少？ <br>
2. 知道整个模型后，朋友让你根据他的活动猜一猜他那边这三天天气怎么样 <br>
3. 朋友告诉你三天里他做了些什么，然后让你找出他活动规律的模型。</p>




<p>为了解决以上的问题我们首先要了解一些有关HMM的基本元素先：</p>




<p><strong>初始概率分布<script type="math/tex" id="MathJax-Element-5">\pi</script></strong>：初始概率分布即事件初始时发生的概率，我们这里隐藏的状态是天气，然后我们在图中可以看出的初始概率有：天气为晴天的概率为0.8 ; 天气为雨天的概率为0.2</p>




<p><strong>转移概率矩阵P</strong>：转移功率矩阵就可以通过一副图来描述了。</p>




<table>
<thead>
<tr>
  <th>晴天</th>
  <th>雨天</th>
</tr>
</thead>
<tbody><tr>
  <td>晴天</td>
  <td>0.7</td>
</tr>
<tr>
  <td>雨天</td>
  <td>0.6</td>
</tr>
</tbody></table>




<p>其中，列参数表示第一天的状态，行参数表示第二天状态。表格中的第一行的含义就是已知第一天为晴天，那么第二天为晴天的概率是0.7，而为雨天的概率只是0.3。</p>




<p><strong>观测量的概率分布B</strong>：在这个问题中观测量就是朋友的活动，其概率分布就分别表示为朋友在晴天和雨天的情况下进行散步，购物，打扫屋子各项活动的可能性（概率）。</p>




<p>现在，我们再次回到上面提到的三个问题。其实，每个问题的解决解决在历史上早有前人给出了算法。</p>




<blockquote>
  <p>问题1 -&gt; <a href="https://en.wikipedia.org/wiki/Forward_algorithm">Forward Algorithm</a>，向前算法 或 <a href="https://en.wikipedia.org/wiki/Forward%E2%80%93backward_algorithm">Backward Algorithm</a>，向后算法。</p>
  
  <p>问题2 -&gt; <a href="https://en.wikipedia.org/wiki/Viterbi_algorithm">Viterbi Algorithm</a>，维特比算法。</p>
  
  <p>问题3 -&gt; <a href="https://en.wikipedia.org/wiki/Baum%E2%80%93Welch_algorithm">Baum-Welch Algorithm</a>，鲍姆-维尔奇算法。</p>
</blockquote>




<h2 id="算法思路">算法思路</h2>




<p><strong>假设前提：</strong> <br>
已知，雨天，朋友选择去散步，购物，收拾的概率分别是0.1，0.4，0.5， 而如果是晴天，选择去散步，购物，收拾的概率分别是0.6，0.3，0.1。 <br>
三天活动序列：散步（Walk），购物（Shop），清洁屋子（Clean）</p>




<h3 id="forward-algorithm">Forward Algorithm</h3>




<p>然后我们先计算 t = 1 时，发生 “散步” 行为的概率，如果下雨，则<script type="math/tex" id="MathJax-Element-6">P(Walk,Rain) = P_{t=1}(Rain) * P(Walk|Rain) = 0.2 \times 0.1 = 0.02</script>；如果为晴天，则<script type="math/tex" id="MathJax-Element-7">P(Walk,Sunny) = 0.8 \times 0.6 = 0.48</script></p>




<p>t = 2 时，发生 “购物” 的概率，如果 t = 2 下雨，则<script type="math/tex" id="MathJax-Element-8">P(Walk_{t=1},Shop_{t=2},Rain_{t=2}) = [P(Walk_{t=1},Rain_{t=1}) \times P(Rain_{t=2}|Rain_{t=1}) \\ + P(Walk_{t=1},Sunny_{t=1})\times P(Rain_{t=2}|Sunny_{t=1})]\times P(Shop_{t=2}|Rain_{t=2}) \\ = [0.02*0.4+0.48*0.3]*0.4 = 0.0608 </script></p>




<p>如果为晴天，则</p>




<p><script type="math/tex" id="MathJax-Element-9">P(Walk_{t=1},Shop_{t=2},Sunny_{t=2}) = [0.02*0.6 +0.48*0.7]*0.3 = 0.1044</script></p>




<p>t = 3 时的算法也可以依此类推， <br>
<script type="math/tex" id="MathJax-Element-10">P(Walk_{t=1},Shop_{t=2},Clean_{t=3},Rain_{t=3}) = [0.0608*0.4+0.1044*0.3]*0.5 = 0.02782</script>； <br>
<script type="math/tex" id="MathJax-Element-11">P(Walk_{t=1},Shop_{t=2},Clean_{t=3},Sunny_{t=3}) = [0.0608*0.6+0.1044*0.7]*0.7 = 0.076692</script></p>




<p>所以，最终： <br>
<script type="math/tex" id="MathJax-Element-12">P(Walk_{t=1},Shop_{t=2},Clean_{t=3}) = 0.02782 + 0.076692 = 0.104512</script></p>




<p>从上面的例子可以看出，向前算法计算了每个时间点时，每个状态的发生观测序列的概率，看似复杂，但在T变大时，复杂度也会随之降低。</p>




<h3 id="backward-algorihm">Backward Algorihm</h3>




<p>既然，向前算法是在时间 t = 1 的时候，一步一步向前计算。那么反过来，向后算法就是从最后一个状态往前推。 <br>
假设最初时<script type="math/tex" id="MathJax-Element-13">\beta_3(Rain) = 1；\beta_3(Sunny) = 1</script></p>




<p>那么：</p>




<p><script type="math/tex" id="MathJax-Element-14">\beta_2(Rain) = a_{Rain \to Rain}b_{Rain}(O_3=Clean)\beta_3(Rain) \\+ a_{Rain \to Sunny}b_{Sunny}(O_3=Clean)\beta_3(Sunny)\\=0.4*0.5*1+0.6*0.1*1 = 0.26</script> <br>
其中第一项则是转移概率，第二天下雨转到第三天下雨的概率为0.4；第二项则是观测概率，第三天下雨的状况下，在家收拾的概率为0.5；第三项就是我们定义的向后变量（backward variable）。</p>




<p>同理也可推得其他数据，并且最终答案与向前算法的求解相同。</p>




<h3 id="viterbi-algorithm维比特算法">Viterbi Algorithm（维比特算法）</h3>




<p>利用动态规划求解概率最大的路径（最优路径）。利用动态规划，可以解决任何一个图中的最短路径问题。而维特比算法是针对一个特殊的图——<strong>篱笆网络的有向图（Lattice）</strong>的最短路径提出的。</p>




<p>我们假设用符号<script type="math/tex" id="MathJax-Element-15">x_{ij}</script>来表示系统的第 i 种状态<script type="math/tex" id="MathJax-Element-16">x_i</script>的第j个可能的值。如果把每个状态按照不同的值展开，就可以得到以下的篱笆网络（Lattice）：</p>




<p><img src="https://i.loli.net/2017/09/10/59b4e956e6a56.png" alt="lattice.png" title=""></p>




<p>那么从第一个状态到最后一个状态的任何一条路径（path）都可能产生我们观察到的输出序列Y。当然，这些路径的可能性不一样，而我们要做的就是找到最可能的这条路径。对于每一条给定的路径我们都可以用公式:</p>




<p><script type="math/tex" id="MathJax-Element-17">x_1,x_2,...,x_N = \text{ArgMax}\left[P\left(x_1,x_2,...,x_N|y_1,y_2,...,y_N\right)\right(x \in X)]\\=\text{ArgMax}\left[\prod _{i=1}^N P\left(x_i|x_{i-1}\right)P\left(y_i|x_i\right)\right (x \in X)]</script></p>




<p>计算出它的可能性，但是随着组合增多，它使得序列状态数的增长呈指数爆炸式。</p>




<p>为了解决这个问题，需要一个最好能和状态数成正比的算法。也就是我们要讲的维特比算法。</p>




<p>维特比算法的基础可以概括成三点：</p>




<ol>
<li><p>如果概率最大的路径P（或者说最优路径）经过某个点，如果上图中的<script type="math/tex" id="MathJax-Element-18">x_{22}</script>，那么这条路径上从起始点S 到 <script type="math/tex" id="MathJax-Element-19">x_{22}</script>的这一段子路径Q，一定是S到<script type="math/tex" id="MathJax-Element-20">x_{22}</script>的最短路径。否则用S到<script type="math/tex" id="MathJax-Element-21">x_{22}</script>的最短路径R来代替Q，便构成了一条比P更短的路径。</p></li>
<li><p>从S到E的路径必定经过第i个时刻的某个状态，假定第i个时刻有k个状态，那么如果记录了从S到第i个状态的所以k个节点的最短路径，最终最短路径必经过其中的一条。这样，在任何时刻，只要考虑非常有限条最短路径即可。</p></li>
<li><p>结合上述两点，假定当我们从状态 i 进入状态 i + 1 时，从 S 到状态 i 上各个节点的最短路径已经找到，并且记录在这些节点上，那么在计算从起点 S 到第 i + 1 状态的某个节点<script type="math/tex" id="MathJax-Element-22">x_{i+1}</script>的最短路径时，只要考虑从S到前一个状态 i 所有的 k 个节点的最短路径，以及从这 k 个节点到<script type="math/tex" id="MathJax-Element-23">x_{i+1}</script>，j 的距离即可。</p></li>
</ol>




<h4 id="实现过程">实现过程</h4>




<ol>
<li>从点S出发，对于第一个状态<script type="math/tex" id="MathJax-Element-24">x_1</script>的各个节点，不妨假定有<script type="math/tex" id="MathJax-Element-25">n_1</script>个。计算出 S 到它们的距离<script type="math/tex" id="MathJax-Element-26">d(S，x_{1i})</script>,其中<script type="math/tex" id="MathJax-Element-27">x_{1i}</script>代表任意状态 1 的节点。因为只有一步，所以这些距离都是S到它们各自的最短距离。</li>
<li>对于第二个状态<script type="math/tex" id="MathJax-Element-28">x_2</script>的所有节点，要计算出从S到它们的最短距离。我们知道，对于特定的节点<script type="math/tex" id="MathJax-Element-29">x_{2i}</script>，从S到它的路径可以经过状态1的<script type="math/tex" id="MathJax-Element-30">n_1</script>中任何一个节点<script type="math/tex" id="MathJax-Element-31">x_{1i}</script>，当然，对应的路径长度就是<script type="math/tex" id="MathJax-Element-32">d(S,x_{2i}) = d(S,x_{1j})  + d(x_{1j},x_{2j})</script>。由于 j 有<script type="math/tex" id="MathJax-Element-33">n_1</script>种可能性，我们要一一计算，然后找到最小值。即：<script type="math/tex" id="MathJax-Element-34">d(S,x_{2i}) = min_{i=1,n_1}d(S,x_{1j})  + d(x_{1j},x_{2j})</script></li>
<li>这样对于第二状态的每个节点，需要<script type="math/tex" id="MathJax-Element-35">n_1</script>次乘法计算。假定这个状态有<script type="math/tex" id="MathJax-Element-36">n_2</script>个节点，把S这些节点的距离都算一遍，就有<script type="math/tex" id="MathJax-Element-37">O(n_1 * n_2)</script>次计算。</li>
</ol>




<p>接下来，类似地按照上述方法从第二个状态走到第三个状态，一直走到最后一个状态，就得到了整个网格从头到尾的最短路径。每一步计算的复杂度都和相邻两个状态<script type="math/tex" id="MathJax-Element-38">S_i和S_{i+1}</script>各自的节点数目<script type="math/tex" id="MathJax-Element-39">n_i，n_{i+1}</script>的乘积成正比，即<script type="math/tex" id="MathJax-Element-40">O(n_i,n_{i+1})</script>。如果假定在这个隐含马尔可夫链中的节点最多的状态有D个节点，也就是说整个网络的宽度为D，那么任何一布的复杂度不超过<script type="math/tex" id="MathJax-Element-41">O(D^2)</script>,由于网络长度是N，所以整个维特比算法的复杂度是<script type="math/tex" id="MathJax-Element-42">O(N*D^2)</script> ——本段推理节选自<a href="https://www.amazon.cn/%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E-%E5%90%B4%E5%86%9B/dp/B00P6OJ09C/ref=cm_cr_arp_d_product_top?ie=UTF8">&lt;&lt;数学之美&gt;&gt;第二版</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[贝叶斯景象图]]></title>
    <link href="https://edmondfrank.github.io/blog/2018/02/27/bei-xie-si-jing-xiang-tu/"/>
    <updated>2018-02-27T22:51:43+08:00</updated>
    <id>https://edmondfrank.github.io/blog/2018/02/27/bei-xie-si-jing-xiang-tu</id>
    <content type="html"><![CDATA[<p>﻿<h1 id="贝叶斯景象图">贝叶斯景象图</h1></p>

<h2 id="理论说明">理论说明</h2>




<h3 id="均匀分布">均匀分布</h3>




<p>对于一个含有Ｎ个未知元素的贝叶斯推断问题，我们隐式地为其先验分布创建了一个Ｎ维空间。先验分布上某一点的概率，都投射到某个高维的面或曲线上，其形状由先验分布决定。比如，假定有两个未知元素 <script type="math/tex" id="MathJax-Element-81">p_1、p_2</script>，其先验分布都是（０，５）上的均匀分布，那么先验分布存在于一个边长为５的正方形空间，而其概率面就是正方形上方的一个平面（由于假定了均匀分布，因此每一点概率相同）。</p>




<h3 id="代码绘图演示">代码绘图演示</h3>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">scipy.stats</span> <span class="kn">as</span> <span class="nn">stats</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">IPython.core.pylabtools</span> <span class="kn">import</span> <span class="n">figsize</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="n">figsize</span><span class="p">(</span><span class="mf">12.5</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">plt</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">mpl_toolkits.mplot3d</span> <span class="kn">import</span> <span class="n">Axes3D</span>
</span><span class='line'>
</span><span class='line'><span class="n">jet</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">cm</span><span class="o">.</span><span class="n">jet</span>
</span><span class='line'><span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">()</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'><span class="n">X</span><span class="p">,</span> <span class="n">Y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">meshgrid</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">121</span><span class="p">)</span>
</span><span class='line'><span class="n">uni_x</span> <span class="o">=</span> <span class="n">stats</span><span class="o">.</span><span class="n">uniform</span><span class="o">.</span><span class="n">pdf</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">loc</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="n">uni_y</span> <span class="o">=</span> <span class="n">stats</span><span class="o">.</span><span class="n">uniform</span><span class="o">.</span><span class="n">pdf</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">loc</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="n">M</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">uni_x</span><span class="p">[:,</span> <span class="bp">None</span><span class="p">],</span> <span class="n">uni_y</span><span class="p">[</span><span class="bp">None</span><span class="p">,</span> <span class="p">:])</span>
</span><span class='line'><span class="n">im</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">M</span><span class="p">,</span> <span class="n">interpolation</span><span class="o">=</span><span class="s">&#39;none&#39;</span><span class="p">,</span> <span class="n">origin</span><span class="o">=</span><span class="s">&#39;lower&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">cmap</span><span class="o">=</span><span class="n">jet</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">vmin</span><span class="o">=-.</span><span class="mi">15</span><span class="p">,</span> <span class="n">extent</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">xlim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">&quot;Landscape formed by Uniform priors.&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">ax</span> <span class="o">=</span> <span class="n">fig</span><span class="o">.</span><span class="n">add_subplot</span><span class="p">(</span><span class="mi">122</span><span class="p">,</span> <span class="n">projection</span><span class="o">=</span><span class="s">&#39;3d&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">ax</span><span class="o">.</span><span class="n">plot_surface</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="n">M</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">plt</span><span class="o">.</span><span class="n">cm</span><span class="o">.</span><span class="n">jet</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">vmin</span><span class="o">=-.</span><span class="mi">15</span><span class="p">)</span>
</span><span class='line'><span class="n">ax</span><span class="o">.</span><span class="n">view_init</span><span class="p">(</span><span class="n">azim</span><span class="o">=</span><span class="mi">390</span><span class="p">)</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">&quot;Uniform prior landscape; alternate view&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<p><img src="https://ws1.sinaimg.cn/large/a3d23450ly1fovd74ecb8j20lg083tae.jpg" alt="" title=""></p>




<h3 id="指数分布">指数分布</h3>




<p>再者，如果 <script type="math/tex" id="MathJax-Element-192">p_1、p_2</script>的先验分布为Exp(3)和Exp(10)，那么对应的空间便是二维平面上，各维都取正值确定的范围，而对应的概率面的形状就是一个从（0，0）点向正值方向流淌的瀑布。</p>




<p>以下的示例图就描绘了这样的情形，其中颜色越是趋向于暗红的位置，其先验概率就越高。反过来，颜色越是趋向于深蓝的位置，其先验概率就越低。</p>




<h3 id="代码绘图演示">代码绘图演示</h3>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">figsize</span><span class="p">(</span><span class="mf">12.5</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">()</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">121</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">exp_x</span> <span class="o">=</span> <span class="n">stats</span><span class="o">.</span><span class="n">expon</span><span class="o">.</span><span class="n">pdf</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">exp_y</span> <span class="o">=</span> <span class="n">stats</span><span class="o">.</span><span class="n">expon</span><span class="o">.</span><span class="n">pdf</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="n">M</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">exp_x</span><span class="p">[:,</span> <span class="bp">None</span><span class="p">],</span> <span class="n">exp_y</span><span class="p">[</span><span class="bp">None</span><span class="p">,</span> <span class="p">:])</span>
</span><span class='line'><span class="n">CS</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">contour</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="n">M</span><span class="p">)</span>
</span><span class='line'><span class="n">im</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">M</span><span class="p">,</span> <span class="n">interpolation</span><span class="o">=</span><span class="s">&#39;none&#39;</span><span class="p">,</span> <span class="n">origin</span><span class="o">=</span><span class="s">&#39;lower&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">cmap</span><span class="o">=</span><span class="n">jet</span><span class="p">,</span> <span class="n">extent</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
</span><span class='line'><span class="c">#plt.xlabel(&quot;prior on $p_1$&quot;)</span>
</span><span class='line'><span class="c">#plt.ylabel(&quot;prior on $p_2$&quot;)</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">&quot;$Exp(3), Exp(10)$ prior landscape&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">ax</span> <span class="o">=</span> <span class="n">fig</span><span class="o">.</span><span class="n">add_subplot</span><span class="p">(</span><span class="mi">122</span><span class="p">,</span> <span class="n">projection</span><span class="o">=</span><span class="s">&#39;3d&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">ax</span><span class="o">.</span><span class="n">plot_surface</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="n">M</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">jet</span><span class="p">)</span>
</span><span class='line'><span class="n">ax</span><span class="o">.</span><span class="n">view_init</span><span class="p">(</span><span class="n">azim</span><span class="o">=</span><span class="mi">390</span><span class="p">)</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">&quot;$Exp(3), Exp(10)$ prior landscape; </span><span class="se">\n</span><span class="s">alternate view&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<p><img src="https://ws1.sinaimg.cn/large/a3d23450ly1fovdfq6o3cj20mg0a577q.jpg" alt="" title=""></p>




<p>这些二维空间的例子很简单，我们的大脑可以轻易想象得到。但实际中，先验分布所在的空间和其概率面往往具有更高的维度。</p>




<h3 id="观测值对先验分布的影响">观测值对先验分布的影响　</h3>




<p>在实际中，观测样本对空间不会有影响，但它会改变概率面的形状，将其在某些局部区域拉伸或挤压，以表明参数的真实性在哪里。更多的数据意味着对概率面更多的拉伸和挤压，使得最初的概率面形状变得十分奇怪。反之数据越少，那么最初的形状就保留得越好。不管如何，最后得到的概率面描述了后验分布的形状。</p>




<p>假如我们现在想对两个参数为<script type="math/tex" id="MathJax-Element-239">\lambda</script>的泊松分布进行估计。那么我们将要分别比较用均匀分布和指数分布来对<script type="math/tex" id="MathJax-Element-240">\lambda</script>的先验分布进行假设的不同效果。</p>




<h3 id="代码绘图演示-2">代码绘图演示</h3>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># create the observed data</span>
</span><span class='line'>
</span><span class='line'><span class="c"># sample size of data we observe, trying varying this (keep it less than 100 ;)</span>
</span><span class='line'><span class="n">N</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="c"># the true parameters, but of course we do not see these values...</span>
</span><span class='line'><span class="n">lambda_1_true</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">lambda_2_true</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'><span class="c">#...we see the data generated, dependent on the above two values.</span>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">concatenate</span><span class="p">([</span>
</span><span class='line'>    <span class="n">stats</span><span class="o">.</span><span class="n">poisson</span><span class="o">.</span><span class="n">rvs</span><span class="p">(</span><span class="n">lambda_1_true</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="mi">1</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">stats</span><span class="o">.</span><span class="n">poisson</span><span class="o">.</span><span class="n">rvs</span><span class="p">(</span><span class="n">lambda_2_true</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;observed (2-dimensional,sample size = </span><span class="si">%d</span><span class="s">):&quot;</span> <span class="o">%</span> <span class="n">N</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># plotting details.</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="o">.</span><span class="mo">01</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'><span class="n">likelihood_x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">stats</span><span class="o">.</span><span class="n">poisson</span><span class="o">.</span><span class="n">pmf</span><span class="p">(</span><span class="n">data</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">],</span> <span class="n">_x</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">for</span> <span class="n">_x</span> <span class="ow">in</span> <span class="n">x</span><span class="p">])</span><span class="o">.</span><span class="n">prod</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">likelihood_y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">stats</span><span class="o">.</span><span class="n">poisson</span><span class="o">.</span><span class="n">pmf</span><span class="p">(</span><span class="n">data</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">],</span> <span class="n">_y</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">for</span> <span class="n">_y</span> <span class="ow">in</span> <span class="n">y</span><span class="p">])</span><span class="o">.</span><span class="n">prod</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">L</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">likelihood_x</span><span class="p">[:,</span> <span class="bp">None</span><span class="p">],</span> <span class="n">likelihood_y</span><span class="p">[</span><span class="bp">None</span><span class="p">,</span> <span class="p">:])</span>
</span><span class='line'><span class="n">observed</span> <span class="p">(</span><span class="mi">2</span><span class="o">-</span><span class="n">dimensional</span><span class="p">,</span><span class="n">sample</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">1</span><span class="p">):</span> <span class="p">[[</span><span class="mi">0</span> <span class="mi">2</span><span class="p">]]</span>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span>
</span><span class='line'><span class="n">figsize</span><span class="p">(</span><span class="mf">12.5</span><span class="p">,</span> <span class="mi">12</span><span class="p">)</span>
</span><span class='line'><span class="c"># matplotlib heavy lifting below, beware!</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">221</span><span class="p">)</span>
</span><span class='line'><span class="n">uni_x</span> <span class="o">=</span> <span class="n">stats</span><span class="o">.</span><span class="n">uniform</span><span class="o">.</span><span class="n">pdf</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">loc</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="n">uni_y</span> <span class="o">=</span> <span class="n">stats</span><span class="o">.</span><span class="n">uniform</span><span class="o">.</span><span class="n">pdf</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">loc</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="n">M</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">uni_x</span><span class="p">[:,</span> <span class="bp">None</span><span class="p">],</span> <span class="n">uni_y</span><span class="p">[</span><span class="bp">None</span><span class="p">,</span> <span class="p">:])</span>
</span><span class='line'><span class="n">im</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">M</span><span class="p">,</span> <span class="n">interpolation</span><span class="o">=</span><span class="s">&#39;none&#39;</span><span class="p">,</span> <span class="n">origin</span><span class="o">=</span><span class="s">&#39;lower&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">cmap</span><span class="o">=</span><span class="n">jet</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">vmin</span><span class="o">=-.</span><span class="mi">15</span><span class="p">,</span> <span class="n">extent</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">lambda_2_true</span><span class="p">,</span> <span class="n">lambda_1_true</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s">&quot;k&quot;</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span> <span class="n">edgecolor</span><span class="o">=</span><span class="s">&quot;none&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">xlim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">&quot;Landscape formed by Uniform priors on $p_1, p_2$.&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">223</span><span class="p">)</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">contour</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">M</span> <span class="o">*</span> <span class="n">L</span><span class="p">)</span>
</span><span class='line'><span class="n">im</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">M</span> <span class="o">*</span> <span class="n">L</span><span class="p">,</span> <span class="n">interpolation</span><span class="o">=</span><span class="s">&#39;none&#39;</span><span class="p">,</span> <span class="n">origin</span><span class="o">=</span><span class="s">&#39;lower&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">cmap</span><span class="o">=</span><span class="n">jet</span><span class="p">,</span> <span class="n">extent</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">&quot;Landscape warped by </span><span class="si">%d</span><span class="s"> data observation;</span><span class="se">\n</span><span class="s"> Uniform priors on $p_1, p_2$.&quot;</span> <span class="o">%</span> <span class="n">N</span><span class="p">)</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">lambda_2_true</span><span class="p">,</span> <span class="n">lambda_1_true</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s">&quot;k&quot;</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span> <span class="n">edgecolor</span><span class="o">=</span><span class="s">&quot;none&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">xlim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">222</span><span class="p">)</span>
</span><span class='line'><span class="n">exp_x</span> <span class="o">=</span> <span class="n">stats</span><span class="o">.</span><span class="n">expon</span><span class="o">.</span><span class="n">pdf</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">loc</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">exp_y</span> <span class="o">=</span> <span class="n">stats</span><span class="o">.</span><span class="n">expon</span><span class="o">.</span><span class="n">pdf</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">loc</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="n">M</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">exp_x</span><span class="p">[:,</span> <span class="bp">None</span><span class="p">],</span> <span class="n">exp_y</span><span class="p">[</span><span class="bp">None</span><span class="p">,</span> <span class="p">:])</span>
</span><span class='line'>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">contour</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">M</span><span class="p">)</span>
</span><span class='line'><span class="n">im</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">M</span><span class="p">,</span> <span class="n">interpolation</span><span class="o">=</span><span class="s">&#39;none&#39;</span><span class="p">,</span> <span class="n">origin</span><span class="o">=</span><span class="s">&#39;lower&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">cmap</span><span class="o">=</span><span class="n">jet</span><span class="p">,</span> <span class="n">extent</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">lambda_2_true</span><span class="p">,</span> <span class="n">lambda_1_true</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s">&quot;k&quot;</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span> <span class="n">edgecolor</span><span class="o">=</span><span class="s">&quot;none&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">xlim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">&quot;Landscape formed by Exponential priors on $p_1, p_2$.&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">224</span><span class="p">)</span>
</span><span class='line'><span class="c"># This is the likelihood times prior, that results in the posterior.</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">contour</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">M</span> <span class="o">*</span> <span class="n">L</span><span class="p">)</span>
</span><span class='line'><span class="n">im</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">M</span> <span class="o">*</span> <span class="n">L</span><span class="p">,</span> <span class="n">interpolation</span><span class="o">=</span><span class="s">&#39;none&#39;</span><span class="p">,</span> <span class="n">origin</span><span class="o">=</span><span class="s">&#39;lower&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">cmap</span><span class="o">=</span><span class="n">jet</span><span class="p">,</span> <span class="n">extent</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">lambda_2_true</span><span class="p">,</span> <span class="n">lambda_1_true</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s">&quot;k&quot;</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span> <span class="n">edgecolor</span><span class="o">=</span><span class="s">&quot;none&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">&quot;Landscape warped by </span><span class="si">%d</span><span class="s"> data observation;</span><span class="se">\n</span><span class="s"> Exponential priors on </span><span class="se">\</span>
</span><span class='line'><span class="s">$p_1, p_2$.&quot;</span> <span class="o">%</span> <span class="n">N</span><span class="p">)</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">xlim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<p><img src="https://ws1.sinaimg.cn/large/a3d23450ly1fovdubnzc1j20mo0m10y2.jpg" alt="" title=""></p>




<p>四张图里的黑点代表了参数的真实取值，左下图为均匀先验得到的后验分布图。虽然观测值相同，但是两种假设下的后验分布形状是不一样的。其主要原因是因为观测点的位置在两者的假设的前提先验概率是不一样的。这样，我们可以知道，即便只有一个观测值，形成的山峰也试图要包括参数值的真实位置。当然，在真正的推断中，仅用一个观测值显然也是十分不科学的，这里仅仅为了方便阐述而已。</p>




<p>本文参考自<a href="https://github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/blob/master/Chapter3_MCMC/Ch3_IntroMCMC_PyMC3.ipynb">《Probabilistic-Programming-and-Bayesian-Methods-for-Hackers》</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Keras + LSTM 进行单变量时间序列预测]]></title>
    <link href="https://edmondfrank.github.io/blog/2018/02/22/python-keras-plus-lstm-jin-xing-dan-bian-liang-shi-jian-xu-lie-yu-ce/"/>
    <updated>2018-02-22T16:06:57+08:00</updated>
    <id>https://edmondfrank.github.io/blog/2018/02/22/python-keras-plus-lstm-jin-xing-dan-bian-liang-shi-jian-xu-lie-yu-ce</id>
    <content type="html"><![CDATA[<h1>Python Keras + LSTM 进行单变量时间序列预测</h1>

<p>首先，时间序列预测问题是一个复杂的预测模型问题，它不像一般的回归预测模型。时间序列预测的输入变量是一组按时间顺序的数字序列。它既具有延续性又具有随机性，所以在建模难度上相对回归预测更大。</p>

<p>但同时，正好有一种强大的神经网络适合处理这种存在依赖关系的序列问题：RNN（Recurrent neural networks）。在过去几年中，应用 RNN 在语音识别，语言建模，翻译，图片描述等问题上已经取得一定成功，并且应用领域还在扩展。</p>

<h2>LSTM网络</h2>

<p><strong>Long Short-Term Memory 网络</strong>亦称<strong>LSTM 网络</strong>，是一种在深度学习中应用的循环神经网络。可以学习长期依赖信息。LSTM 由Hochreiter &amp; Schmidhuber (1997)提出，并在近期被Alex Graves进行了改良和推广。在很多问题，LSTM 都取得相当巨大的成功，并得到了广泛的使用。LSTM 通过刻意的设计来避免长期依赖问题。记住长期的信息在实践中是 LSTM 的默认行为，而非需要付出很大代价才能获得的能力。</p>

<h2>具体应用</h2>

<p>下面以一个洗发水销售的例子，来实现LSTM。
首先，你可以在这里<a href="https://datamarket.com/data/set/22r0/sales-of-shampoo-over-a-three-year-period#!ds=22r0&amp;display=line">下载</a>到本文需要用的数据集。这是一个描述了3年内洗发水的月度销售数量的数据集。</p>

<h3>数据读取</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pandas</span> <span class="kn">import</span> <span class="n">read_csv</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pandas</span> <span class="kn">import</span> <span class="n">datetime</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">pyplot</span> <span class="k">as</span> <span class="n">plt</span>
</span><span class='line'><span class="k">def</span> <span class="nf">parser</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">datetime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="s">&#39;190&#39;</span><span class="o">+</span><span class="n">x</span><span class="p">,</span><span class="s">&quot;%Y-%m&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">series</span> <span class="o">=</span> <span class="n">read_csv</span><span class="p">(</span><span class="s">&#39;sales-of-shampoo-over-a-three-ye.csv&#39;</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">header</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">parse_dates</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">index_col</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">squeeze</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">date_parser</span><span class="o">=</span><span class="n">parser</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">series</span><span class="o">.</span><span class="n">head</span><span class="p">())</span>
</span><span class='line'><span class="n">series</span><span class="o">.</span><span class="n">plot</span><span class="p">()</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>数据划分</h3>

<p>首先我们把数据集划分成两个部分即：训练集和测试集。
那么我们该如何划分呢？因为我们今天研究的是时间序列分析，所以在数据集的划分上我们也应该按照时间来划分。我们可以将前两年的数据作为我们的训练集而将最后一年的数据作为测试集。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># split data into train and test</span>
</span><span class='line'><span class="n">X</span> <span class="o">=</span> <span class="n">series</span><span class="o">.</span><span class="n">values</span>
</span><span class='line'><span class="n">train</span><span class="p">,</span> <span class="n">test</span> <span class="o">=</span> <span class="n">X</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="o">-</span><span class="mi">12</span><span class="p">],</span> <span class="n">X</span><span class="p">[</span><span class="o">-</span><span class="mi">12</span><span class="p">:]</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里我们假设一个滚动预测的情景，又称<strong>前向模型验证（walk-forward model validation）</strong>。其原理很简单，举例来说就像当公司的预测期长达一年时，预测会将已过去的月份排除，而将预测期末的月份补上。好比一月份过去后，我们将其从预测中移除，同时次年的一月份就会作为收尾被添加到预测中以便预测总能保持12个月的完整性。</p>

<p>这样通过使用每月新的洗发水销售量来进行下个月的预测，我们就像模拟了一个更接近于真实世界的场景。</p>

<p>最后，我们将所有在测试集上的预测结果收集起来并计算出他们与真实值的均方根误差（RMSE）以此来作为评估我们模型的基准。</p>

<h3>持续模型预测(Persistence Model Forecast)</h3>

<p>持续性预测的基本思路就是从先前的（t-1）时间序列的结果用于预测当前时间（t）的取值。
那么根据以上的思路，我们可以通过滚动预测的原理从训练集的历史数据中获取最后一次观察值并使用它来预测当前时间的可能取值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pandas</span> <span class="kn">import</span> <span class="n">read_csv</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pandas</span> <span class="kn">import</span> <span class="n">datetime</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">mean_squared_error</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">sqrt</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">pyplot</span>
</span><span class='line'><span class="c"># load dataset</span>
</span><span class='line'><span class="k">def</span> <span class="nf">parser</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">datetime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="s">&#39;190&#39;</span><span class="o">+</span><span class="n">x</span><span class="p">,</span> <span class="s">&#39;%Y-%m&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">series</span> <span class="o">=</span> <span class="n">read_csv</span><span class="p">(</span><span class="s">&#39;sales-of-shampoo-over-a-three-ye.csv&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">header</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">parse_dates</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">index_col</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">squeeze</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">date_parser</span><span class="o">=</span><span class="n">parser</span><span class="p">)</span>
</span><span class='line'><span class="c"># split data into train and test</span>
</span><span class='line'><span class="n">X</span> <span class="o">=</span> <span class="n">series</span><span class="o">.</span><span class="n">values</span>
</span><span class='line'><span class="n">train</span><span class="p">,</span> <span class="n">test</span> <span class="o">=</span> <span class="n">X</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="o">-</span><span class="mi">12</span><span class="p">],</span> <span class="n">X</span><span class="p">[</span><span class="o">-</span><span class="mi">12</span><span class="p">:]</span>
</span><span class='line'><span class="c"># walk-forward validation</span>
</span><span class='line'><span class="n">history</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">train</span><span class="p">]</span>
</span><span class='line'><span class="n">predictions</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">test</span><span class="p">)):</span>
</span><span class='line'>  <span class="c"># make prediction</span>
</span><span class='line'>  <span class="n">predictions</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">history</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>  <span class="c"># observation</span>
</span><span class='line'>  <span class="n">history</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">test</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'><span class="c"># report performance</span>
</span><span class='line'><span class="n">rmse</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">mean_squared_error</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="n">predictions</span><span class="p">))</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;RMSE: </span><span class="si">%.3f</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">rmse</span><span class="p">)</span>
</span><span class='line'><span class="c"># line plot of observed vs predicted</span>
</span><span class='line'><span class="n">pyplot</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>
</span><span class='line'><span class="n">pyplot</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">predictions</span><span class="p">)</span>
</span><span class='line'><span class="n">pyplot</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://i.loli.net/2017/09/07/59b1503007a96.png" alt="persistence_rmse.png" /></p>

<p>通过持续模型的预测，我们得到了一个最基础的预测模型以及RMSE（baseline）为了提升我们预测模型的效果，下面让我们进入正题来构建LSTM模型来对数据集进行时间序列预测。</p>

<h3>数据处理</h3>

<p>为了能够构建一个LSTM模型对训练集进行训练，我们首先要对数据进行一下处理：</p>

<ol>
<li>将时间序列问题转化成监督学习问题</li>
<li>平稳时间序列</li>
<li>数据标准化</li>
</ol>


<h4>将时间序列转换成监督学习</h4>

<p>对于一个时间序列问题，我们可以通过使用从最后一个（t-1）时刻的观测值作为输入的特征X和当前时刻（t）的观测值作为输出Y来实现转换。</p>

<p>因为，需要转换的是一组时间序列数据，所以无法组合成像真正的监督学习那样有明确一对一映射的输入输出关系。尤其是在数据集的最开始或最后时，两个位置总有一个位置无法在训练集中找到对应关系。为了解决这样的问题，我们通常的做法是，在最开始时将输入特征置为0，而它对应的输出就是时间序列的第一个元素。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pandas</span> <span class="kn">import</span> <span class="n">read_csv</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pandas</span> <span class="kn">import</span> <span class="n">datetime</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pandas</span> <span class="kn">import</span> <span class="n">DataFrame</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pandas</span> <span class="kn">import</span> <span class="n">concat</span>
</span><span class='line'>
</span><span class='line'><span class="c"># frame a sequence as a supervised learning problem</span>
</span><span class='line'><span class="k">def</span> <span class="nf">timeseries_to_supervised</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">lag</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>  <span class="n">df</span> <span class="o">=</span> <span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="n">df</span><span class="o">.</span><span class="n">shift</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">lag</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
</span><span class='line'>  <span class="n">columns</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
</span><span class='line'>  <span class="n">df</span> <span class="o">=</span> <span class="n">concat</span><span class="p">(</span><span class="n">columns</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">df</span><span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">df</span>
</span><span class='line'>
</span><span class='line'><span class="c"># load dataset</span>
</span><span class='line'><span class="k">def</span> <span class="nf">parser</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">datetime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="s">&#39;190&#39;</span><span class="o">+</span><span class="n">x</span><span class="p">,</span> <span class="s">&#39;%Y-%m&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">series</span> <span class="o">=</span> <span class="n">read_csv</span><span class="p">(</span><span class="s">&#39;sales-of-shampoo-over-a-three-ye.csv&#39;</span><span class="p">,</span> <span class="n">header</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">parse_dates</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">index_col</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">squeeze</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">date_parser</span><span class="o">=</span><span class="n">parser</span><span class="p">)</span>
</span><span class='line'><span class="c"># transform to supervised learning</span>
</span><span class='line'><span class="n">X</span> <span class="o">=</span> <span class="n">series</span><span class="o">.</span><span class="n">values</span>
</span><span class='line'><span class="n">supervised</span> <span class="o">=</span> <span class="n">timeseries_to_supervised</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">supervised</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>输出结果：
        0      0
0     0.0  266.0
1   266.0  145.9
2   145.9  183.1
3   183.1  119.3
4   119.3  180.3
5   180.3  168.5
6   168.5  231.8
7   231.8  224.5
8   224.5  192.8
9   192.8  122.9
10  122.9  336.5
11  336.5  185.9
12  185.9  194.3
13  194.3  149.5
14  149.5  210.1
15  210.1  273.3
16  273.3  191.4
17  191.4  287.0
18  287.0  226.0
19  226.0  303.6
20  303.6  289.9
21  289.9  421.6
22  421.6  264.5
23  264.5  342.3
24  342.3  339.7
25  339.7  440.4
26  440.4  315.9
27  315.9  439.3
28  439.3  401.3
29  401.3  437.4
30  437.4  575.5
31  575.5  407.6
32  407.6  682.0
33  682.0  475.3
34  475.3  581.3
35  581.3  646.9</p></blockquote>

<h4>平稳时间序列</h4>

<p>虽然不明显，但我们仍可以看出这个洗发水销售数据集在时间上呈上升趋势。因此我们说这个时间序列数据是非平稳的。那么，不平稳怎么办？</p>

<p>答案就是：差分。（有关差分的介绍点击<a href="https://zh.wikipedia.org/wiki/%E5%B7%AE%E5%88%86">此处</a>）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pandas</span> <span class="kn">import</span> <span class="n">read_csv</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pandas</span> <span class="kn">import</span> <span class="n">datetime</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pandas</span> <span class="kn">import</span> <span class="n">Series</span>
</span><span class='line'>
</span><span class='line'><span class="c"># create a differenced series</span>
</span><span class='line'><span class="k">def</span> <span class="nf">difference</span><span class="p">(</span><span class="n">dataset</span><span class="p">,</span> <span class="n">interval</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>  <span class="n">diff</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">interval</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">dataset</span><span class="p">)):</span>
</span><span class='line'>      <span class="n">value</span> <span class="o">=</span> <span class="n">dataset</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">dataset</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">interval</span><span class="p">]</span>
</span><span class='line'>      <span class="n">diff</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">Series</span><span class="p">(</span><span class="n">diff</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># invert differenced value</span>
</span><span class='line'><span class="k">def</span> <span class="nf">inverse_difference</span><span class="p">(</span><span class="n">history</span><span class="p">,</span> <span class="n">yhat</span><span class="p">,</span> <span class="n">interval</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">yhat</span> <span class="o">+</span> <span class="n">history</span><span class="p">[</span><span class="o">-</span><span class="n">interval</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># load dataset</span>
</span><span class='line'><span class="k">def</span> <span class="nf">parser</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">datetime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="s">&#39;190&#39;</span><span class="o">+</span><span class="n">x</span><span class="p">,</span> <span class="s">&#39;%Y-%m&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">series</span> <span class="o">=</span> <span class="n">read_csv</span><span class="p">(</span><span class="s">&#39;sales-of-shampoo-over-a-three-ye.csv&#39;</span><span class="p">,</span> <span class="n">header</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">parse_dates</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">index_col</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">squeeze</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">date_parser</span><span class="o">=</span><span class="n">parser</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">series</span><span class="o">.</span><span class="n">head</span><span class="p">())</span>
</span><span class='line'><span class="c"># transform to be stationary</span>
</span><span class='line'><span class="n">differenced</span> <span class="o">=</span> <span class="n">difference</span><span class="p">(</span><span class="n">series</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">differenced</span><span class="o">.</span><span class="n">head</span><span class="p">())</span>
</span><span class='line'><span class="c"># invert transform</span>
</span><span class='line'><span class="n">inverted</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">differenced</span><span class="p">)):</span>
</span><span class='line'>  <span class="n">value</span> <span class="o">=</span> <span class="n">inverse_difference</span><span class="p">(</span><span class="n">series</span><span class="p">,</span> <span class="n">differenced</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="nb">len</span><span class="p">(</span><span class="n">series</span><span class="p">)</span><span class="o">-</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="n">inverted</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="n">inverted</span> <span class="o">=</span> <span class="n">Series</span><span class="p">(</span><span class="n">inverted</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">inverted</span><span class="o">.</span><span class="n">head</span><span class="p">())</span>
</span><span class='line'><span class="n">differenced</span><span class="o">.</span><span class="n">plot</span><span class="p">()</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://i.loli.net/2017/09/07/59b162fb84ac0.png" alt="diff.png" /></p>

<p>经过一阶差分处理后，从图上看还是挺平稳的。</p>

<h4>标准化数据</h4>

<p>在数据输入前进行标准化可以非常有效的提升收敛速度和效果。尤其如果我们的激活函数是sigmoid或者tanh，其梯度最大的区间是0附近，当输入值很大或者很小的时候，sigmoid或者tanh的变化就基本平坦了（sigmoid的导数sig（1-sig）会趋于0），也就是进行梯度下降进行优化的时候，梯度会趋于0，而倒是优化速度很慢。</p>

<p>如果输入不进行归一化，由于我们初始化的时候一般都是0均值的的正太分布或者小范围的均匀分布（Xavier），如果输入中存在着尺度相差很大的特征，例如（10000，0.001）这样的，很容易导致激活函数的输入w1<em>x1+w2</em>x2+b变的很大或者很小，从而引起梯度趋于0。</p>

<p>而LSTM的默认激活函数就是tanh函数，它的输出范围在-1 到 1 之间，同时这是时间序列数据的首选范围。因此我们可以使用MinMaxScaler类将数据集转换到范围[-1,1]。像其他scikit用于转换数据的方法类一样，它需要以行和列的矩阵格式提供的数据。因此，在转换之前，我们必须重塑NumPy数组。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pandas</span> <span class="kn">import</span> <span class="n">read_csv</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pandas</span> <span class="kn">import</span> <span class="n">datetime</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pandas</span> <span class="kn">import</span> <span class="n">Series</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">MinMaxScaler</span>
</span><span class='line'><span class="c"># load dataset</span>
</span><span class='line'><span class="k">def</span> <span class="nf">parser</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">datetime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="s">&#39;190&#39;</span><span class="o">+</span><span class="n">x</span><span class="p">,</span> <span class="s">&#39;%Y-%m&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">series</span> <span class="o">=</span> <span class="n">read_csv</span><span class="p">(</span><span class="s">&#39;sales-of-shampoo-over-a-three-ye.csv&#39;</span><span class="p">,</span> <span class="n">header</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">parse_dates</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">index_col</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">squeeze</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">date_parser</span><span class="o">=</span><span class="n">parser</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">series</span><span class="o">.</span><span class="n">head</span><span class="p">())</span>
</span><span class='line'><span class="c"># transform scale</span>
</span><span class='line'><span class="n">X</span> <span class="o">=</span> <span class="n">series</span><span class="o">.</span><span class="n">values</span>
</span><span class='line'><span class="n">X</span> <span class="o">=</span> <span class="n">X</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">X</span><span class="p">),</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">scaler</span> <span class="o">=</span> <span class="n">MinMaxScaler</span><span class="p">(</span><span class="n">feature_range</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="n">scaler</span> <span class="o">=</span> <span class="n">scaler</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
</span><span class='line'><span class="n">scaled_X</span> <span class="o">=</span> <span class="n">scaler</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
</span><span class='line'><span class="n">scaled_series</span> <span class="o">=</span> <span class="n">Series</span><span class="p">(</span><span class="n">scaled_X</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">])</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">scaled_series</span><span class="o">.</span><span class="n">head</span><span class="p">())</span>
</span><span class='line'><span class="c"># invert transform</span>
</span><span class='line'><span class="n">inverted_X</span> <span class="o">=</span> <span class="n">scaler</span><span class="o">.</span><span class="n">inverse_transform</span><span class="p">(</span><span class="n">scaled_X</span><span class="p">)</span>
</span><span class='line'><span class="n">inverted_series</span> <span class="o">=</span> <span class="n">Series</span><span class="p">(</span><span class="n">inverted_X</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">])</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">inverted_series</span><span class="o">.</span><span class="n">head</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>输出结果：
Month
1901-01-01    266.0
1901-02-01    145.9
1901-03-01    183.1
1901-04-01    119.3
1901-05-01    180.3
Name: Sales of shampoo over a three year period, dtype: float64
0   -0.478585
1   -0.905456
2   -0.773236
3   -1.000000
4   -0.783188
dtype: float64
0    266.0
1    145.9
2    183.1
3    119.3
4    180.3
dtype: float64</p></blockquote>

<h3>构建LSTM模型</h3>

<p>长短期记忆网络（LSTM）是一种递归神经网络（RNN）。
这类网络的的优点是它能学习并记住较长序列，并不依赖预先指定的窗口滞后观察值作为输入。
在Keras中，这被称为stateful，在定义LSTM网络层时将“stateful”语句设定为“True”。</p>

<p>LSTM层要求输入矩阵格式为：[样本，时间步长，特征]</p>

<p>鉴于训练数据集的形式定义为X输入和y输出，必须先将其转化为样本/时间步长/特征的形式。</p>

<h4>完整代码</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pandas</span> <span class="kn">import</span> <span class="n">DataFrame</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pandas</span> <span class="kn">import</span> <span class="n">Series</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pandas</span> <span class="kn">import</span> <span class="n">concat</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pandas</span> <span class="kn">import</span> <span class="n">read_csv</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pandas</span> <span class="kn">import</span> <span class="n">datetime</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">mean_squared_error</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">MinMaxScaler</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">keras.models</span> <span class="kn">import</span> <span class="n">Sequential</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">keras.layers</span> <span class="kn">import</span> <span class="n">Dense</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">keras.layers</span> <span class="kn">import</span> <span class="n">LSTM</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">sqrt</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">pyplot</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span>
</span><span class='line'>
</span><span class='line'><span class="c"># date-time parsing function for loading the dataset</span>
</span><span class='line'><span class="k">def</span> <span class="nf">parser</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">datetime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="s">&#39;190&#39;</span><span class="o">+</span><span class="n">x</span><span class="p">,</span> <span class="s">&#39;%Y-%m&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># frame a sequence as a supervised learning problem</span>
</span><span class='line'><span class="k">def</span> <span class="nf">timeseries_to_supervised</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">lag</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>  <span class="n">df</span> <span class="o">=</span> <span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="n">df</span><span class="o">.</span><span class="n">shift</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">lag</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
</span><span class='line'>  <span class="n">columns</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
</span><span class='line'>  <span class="n">df</span> <span class="o">=</span> <span class="n">concat</span><span class="p">(</span><span class="n">columns</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">df</span><span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">df</span>
</span><span class='line'>
</span><span class='line'><span class="c"># create a differenced series</span>
</span><span class='line'><span class="k">def</span> <span class="nf">difference</span><span class="p">(</span><span class="n">dataset</span><span class="p">,</span> <span class="n">interval</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>  <span class="n">diff</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">interval</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">dataset</span><span class="p">)):</span>
</span><span class='line'>      <span class="n">value</span> <span class="o">=</span> <span class="n">dataset</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">dataset</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">interval</span><span class="p">]</span>
</span><span class='line'>      <span class="n">diff</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">Series</span><span class="p">(</span><span class="n">diff</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># invert differenced value</span>
</span><span class='line'><span class="k">def</span> <span class="nf">inverse_difference</span><span class="p">(</span><span class="n">history</span><span class="p">,</span> <span class="n">yhat</span><span class="p">,</span> <span class="n">interval</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">yhat</span> <span class="o">+</span> <span class="n">history</span><span class="p">[</span><span class="o">-</span><span class="n">interval</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># scale train and test data to [-1, 1]</span>
</span><span class='line'><span class="k">def</span> <span class="nf">scale</span><span class="p">(</span><span class="n">train</span><span class="p">,</span> <span class="n">test</span><span class="p">):</span>
</span><span class='line'>  <span class="c"># fit scaler</span>
</span><span class='line'>  <span class="n">scaler</span> <span class="o">=</span> <span class="n">MinMaxScaler</span><span class="p">(</span><span class="n">feature_range</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="n">scaler</span> <span class="o">=</span> <span class="n">scaler</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">train</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># transform train</span>
</span><span class='line'>  <span class="n">train</span> <span class="o">=</span> <span class="n">train</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">train</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">train</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>  <span class="n">train_scaled</span> <span class="o">=</span> <span class="n">scaler</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">train</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># transform test</span>
</span><span class='line'>  <span class="n">test</span> <span class="o">=</span> <span class="n">test</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">test</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">test</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>  <span class="n">test_scaled</span> <span class="o">=</span> <span class="n">scaler</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">scaler</span><span class="p">,</span> <span class="n">train_scaled</span><span class="p">,</span> <span class="n">test_scaled</span>
</span><span class='line'>
</span><span class='line'><span class="c"># inverse scaling for a forecasted value</span>
</span><span class='line'><span class="k">def</span> <span class="nf">invert_scale</span><span class="p">(</span><span class="n">scaler</span><span class="p">,</span> <span class="n">X</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>  <span class="n">new_row</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">X</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="n">value</span><span class="p">]</span>
</span><span class='line'>  <span class="n">array</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">new_row</span><span class="p">)</span>
</span><span class='line'>  <span class="n">array</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">array</span><span class="p">))</span>
</span><span class='line'>  <span class="n">inverted</span> <span class="o">=</span> <span class="n">scaler</span><span class="o">.</span><span class="n">inverse_transform</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">inverted</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># fit an LSTM network to training data</span>
</span><span class='line'><span class="k">def</span> <span class="nf">fit_lstm</span><span class="p">(</span><span class="n">train</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">,</span> <span class="n">nb_epoch</span><span class="p">,</span> <span class="n">neurons</span><span class="p">):</span>
</span><span class='line'>  <span class="n">X</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">train</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">train</span><span class="p">[:,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>  <span class="n">X</span> <span class="o">=</span> <span class="n">X</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">X</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">1</span><span class="p">,</span> <span class="n">X</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>  <span class="n">model</span> <span class="o">=</span> <span class="n">Sequential</span><span class="p">()</span>
</span><span class='line'>  <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">LSTM</span><span class="p">(</span><span class="n">neurons</span><span class="p">,</span> <span class="n">batch_input_shape</span><span class="o">=</span><span class="p">(</span><span class="n">batch_size</span><span class="p">,</span> <span class="n">X</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">X</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">2</span><span class="p">]),</span> <span class="n">stateful</span><span class="o">=</span><span class="bp">True</span><span class="p">))</span>
</span><span class='line'>  <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dense</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="n">model</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">loss</span><span class="o">=</span><span class="s">&#39;mean_squared_error&#39;</span><span class="p">,</span> <span class="n">optimizer</span><span class="o">=</span><span class="s">&#39;adam&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">nb_epoch</span><span class="p">):</span>
</span><span class='line'>      <span class="n">model</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>      <span class="n">model</span><span class="o">.</span><span class="n">reset_states</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">model</span>
</span><span class='line'>
</span><span class='line'><span class="c"># make a one-step forecast</span>
</span><span class='line'><span class="k">def</span> <span class="nf">forecast_lstm</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">,</span> <span class="n">X</span><span class="p">):</span>
</span><span class='line'>  <span class="n">X</span> <span class="o">=</span> <span class="n">X</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">X</span><span class="p">))</span>
</span><span class='line'>  <span class="n">yhat</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">yhat</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># load dataset</span>
</span><span class='line'><span class="n">series</span> <span class="o">=</span> <span class="n">read_csv</span><span class="p">(</span><span class="s">&#39;sales-of-shampoo-over-a-three-ye.csv&#39;</span><span class="p">,</span> <span class="n">header</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">parse_dates</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">index_col</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">squeeze</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">date_parser</span><span class="o">=</span><span class="n">parser</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># transform data to be stationary</span>
</span><span class='line'><span class="n">raw_values</span> <span class="o">=</span> <span class="n">series</span><span class="o">.</span><span class="n">values</span>
</span><span class='line'><span class="n">diff_values</span> <span class="o">=</span> <span class="n">difference</span><span class="p">(</span><span class="n">raw_values</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># transform data to be supervised learning</span>
</span><span class='line'><span class="n">supervised</span> <span class="o">=</span> <span class="n">timeseries_to_supervised</span><span class="p">(</span><span class="n">diff_values</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">supervised_values</span> <span class="o">=</span> <span class="n">supervised</span><span class="o">.</span><span class="n">values</span>
</span><span class='line'>
</span><span class='line'><span class="c"># split data into train and test-sets</span>
</span><span class='line'><span class="n">train</span><span class="p">,</span> <span class="n">test</span> <span class="o">=</span> <span class="n">supervised_values</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="o">-</span><span class="mi">12</span><span class="p">],</span> <span class="n">supervised_values</span><span class="p">[</span><span class="o">-</span><span class="mi">12</span><span class="p">:]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># transform the scale of the data</span>
</span><span class='line'><span class="n">scaler</span><span class="p">,</span> <span class="n">train_scaled</span><span class="p">,</span> <span class="n">test_scaled</span> <span class="o">=</span> <span class="n">scale</span><span class="p">(</span><span class="n">train</span><span class="p">,</span> <span class="n">test</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># fit the model</span>
</span><span class='line'><span class="n">lstm_model</span> <span class="o">=</span> <span class="n">fit_lstm</span><span class="p">(</span><span class="n">train_scaled</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3000</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="c"># forecast the entire training dataset to build up state for forecasting</span>
</span><span class='line'><span class="n">train_reshaped</span> <span class="o">=</span> <span class="n">train_scaled</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">train_scaled</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">lstm_model</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">train_reshaped</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># walk-forward validation on the test data</span>
</span><span class='line'><span class="n">predictions</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">test_scaled</span><span class="p">)):</span>
</span><span class='line'>  <span class="c"># make one-step forecast</span>
</span><span class='line'>  <span class="n">X</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">test_scaled</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">test_scaled</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>  <span class="n">yhat</span> <span class="o">=</span> <span class="n">forecast_lstm</span><span class="p">(</span><span class="n">lstm_model</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">X</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># invert scaling</span>
</span><span class='line'>  <span class="n">yhat</span> <span class="o">=</span> <span class="n">invert_scale</span><span class="p">(</span><span class="n">scaler</span><span class="p">,</span> <span class="n">X</span><span class="p">,</span> <span class="n">yhat</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># invert differencing</span>
</span><span class='line'>  <span class="n">yhat</span> <span class="o">=</span> <span class="n">inverse_difference</span><span class="p">(</span><span class="n">raw_values</span><span class="p">,</span> <span class="n">yhat</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">test_scaled</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="o">-</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># store forecast</span>
</span><span class='line'>  <span class="n">predictions</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">yhat</span><span class="p">)</span>
</span><span class='line'>  <span class="n">expected</span> <span class="o">=</span> <span class="n">raw_values</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">train</span><span class="p">)</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>  <span class="k">print</span><span class="p">(</span><span class="s">&#39;Month=</span><span class="si">%d</span><span class="s">, Predicted=</span><span class="si">%f</span><span class="s">, Expected=</span><span class="si">%f</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">yhat</span><span class="p">,</span> <span class="n">expected</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c">#report performance</span>
</span><span class='line'><span class="n">rmse</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">mean_squared_error</span><span class="p">(</span><span class="n">raw_values</span><span class="p">[</span><span class="o">-</span><span class="mi">12</span><span class="p">:],</span> <span class="n">predictions</span><span class="p">))</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;Test RMSE: </span><span class="si">%.3f</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">rmse</span><span class="p">)</span>
</span><span class='line'><span class="c"># line plot of observed vs predicted</span>
</span><span class='line'><span class="n">pyplot</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">raw_values</span><span class="p">[</span><span class="o">-</span><span class="mi">12</span><span class="p">:])</span>
</span><span class='line'><span class="n">pyplot</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">predictions</span><span class="p">)</span>
</span><span class='line'><span class="n">pyplot</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://i.loli.net/2017/09/07/59b16bc803033.png" alt="lstm_pred.png" /></p>

<p>最后运行结果打印出测试数据集12个月份中每个月份的预期和预测销量。示例还打印了所有预测值得均方根误差。该模型显示洗发水月度销量的均方根误差为111.925，好于持续性模型得出的对应结果136.761。</p>

<p><strong>另外</strong>，神经网络的一个难题是初始条件不同，它们给出结果就不同。一种解决办法是修改Keras使用的随机数种子值以确保结果可复制。另一种办法是使用不同的实验设置控制随机初始条件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何免费使用谷歌GPU训练神经网络]]></title>
    <link href="https://edmondfrank.github.io/blog/2018/02/18/ru-he-mian-fei-shi-yong-gu-ge-gpuxun-lian-shen-jing-wang-luo/"/>
    <updated>2018-02-18T21:21:44+08:00</updated>
    <id>https://edmondfrank.github.io/blog/2018/02/18/ru-he-mian-fei-shi-yong-gu-ge-gpuxun-lian-shen-jing-wang-luo</id>
    <content type="html"><![CDATA[<p>﻿<h1 id="完全云端运行免费使用谷歌gpu训练神经网络">完全云端运行：免费使用谷歌GPU训练神经网络</h1></p>

<h2 id="背景">背景</h2>




<p>对，你没有听错，高大上的ＧＰＵ，现在不花钱也能用上了。这是Google的一项免费云端机器学习服务，全名Colaboratory。</p>




<p><strong>Colaboratory</strong> 是一个 Google 研究项目，旨在帮助传播机器学习培训和研究成果。它是一个 Jupyter 笔记本环境，不需要进行任何设置就可以使用，并且完全在云端运行。Colaboratory 笔记本存储在 Google 云端硬盘中，并且可以共享，就如同您使用 Google 文档或表格一样。Colaboratory 可免费使用，而且最重要的还提供免费的英伟达Tesla K80 GPU。还有这等好事？事不宜迟，本文马上介绍如何使用 Google CoLaboratory 训练神经网络。</p>




<h2 id="准备工作">准备工作</h2>




<p><strong>在Google Drive上创建文件夹</strong></p>




<p><img src="https://ws1.sinaimg.cn/large/a3d23450gy1fokw4gt73cj20au0cdmxt.jpg" alt="" title=""></p>




<p>Colab用的数据都存储在Google Drive云端硬盘上，所以，我们需要先指定要在Google Drive上用的文件夹。</p>




<p>比如说，可以在Google Drive上创建一个“app”文件夹，或者其他什么名字，也可以选择Colab笔记本默认的文件夹。</p>




<h2 id="新建colab笔记本">新建Colab笔记本</h2>




<p>在刚刚创建的app文件夹里点击右键，选择<strong>“更多”</strong>，然后从菜单里选择<strong>“Colaboratory”</strong>，这样就新建出了一个Colab笔记本。</p>




<p>若是更多选项中没有<strong>“Colaboratory”</strong>选项，可以点击<strong>“关联更多应用”</strong>选项，然后在打开的页面中，搜索<strong>“Colaboratory”</strong>，然后再点<strong>关联应用</strong>，再次点击右键就可以在<strong>“更多”</strong>选项中看到<strong>“Colaboratory”</strong>选项了。</p>




<p><img src="https://ws1.sinaimg.cn/large/a3d23450gy1fokw7hbuf6j20je0hpwfn.jpg" alt="" title=""></p>




<h2 id="设置免费gpu">设置免费GPU</h2>




<p>新建Colaboratory成功后，在笔记本里点Edit&gt;Notebook settings（编辑&gt;笔记本设置），或者Runtime&gt;Change runtime type（运行时&gt;改变运行时类型），然后在Hardware accelerator（硬件加速器）一栏选择GPU。</p>




<p><img src="https://ws1.sinaimg.cn/large/a3d23450gy1fokwett0eij209b091jrn.jpg" alt="" title=""></p>




<p>然后，Google Colab就可以用了。</p>




<h2 id="关联google-drive">关联Google Drive</h2>




<p>为了能让Colaboratory使用到你的Google Drive的文件，我们需要先运行下面这些代码，来安装必要的库、执行授权。</p>




<pre class="prettyprint"><code class="language-sh hljs lasso"><span class="hljs-subst">!</span>apt<span class="hljs-attribute">-get</span> install <span class="hljs-attribute">-y</span> <span class="hljs-attribute">-qq</span> software<span class="hljs-attribute">-properties</span><span class="hljs-attribute">-common</span> python<span class="hljs-attribute">-software</span><span class="hljs-attribute">-properties</span> module<span class="hljs-attribute">-init</span><span class="hljs-attribute">-tools</span>
<span class="hljs-subst">!</span>add<span class="hljs-attribute">-apt</span><span class="hljs-attribute">-repository</span> <span class="hljs-attribute">-y</span> ppa:alessandro<span class="hljs-attribute">-strada</span>/ppa <span class="hljs-number">2</span><span class="hljs-subst">&gt;&amp;</span><span class="hljs-number">1</span> <span class="hljs-subst">&gt;</span> /dev/<span class="hljs-built_in">null</span>
<span class="hljs-subst">!</span>apt<span class="hljs-attribute">-get</span> update <span class="hljs-attribute">-qq</span> <span class="hljs-number">2</span><span class="hljs-subst">&gt;&amp;</span><span class="hljs-number">1</span> <span class="hljs-subst">&gt;</span> /dev/<span class="hljs-built_in">null</span>
<span class="hljs-subst">!</span>apt<span class="hljs-attribute">-get</span> <span class="hljs-attribute">-y</span> install <span class="hljs-attribute">-qq</span> google<span class="hljs-attribute">-drive</span><span class="hljs-attribute">-ocamlfuse</span> fuse
from google<span class="hljs-built_in">.</span>colab <span class="hljs-keyword">import</span> auth
auth<span class="hljs-built_in">.</span>authenticate_user()
from oauth2client<span class="hljs-built_in">.</span>client <span class="hljs-keyword">import</span> GoogleCredentials
creds <span class="hljs-subst">=</span> GoogleCredentials<span class="hljs-built_in">.</span>get_application_default()
<span class="hljs-keyword">import</span> getpass
<span class="hljs-subst">!</span>google<span class="hljs-attribute">-drive</span><span class="hljs-attribute">-ocamlfuse</span> <span class="hljs-attribute">-headless</span> <span class="hljs-attribute">-id</span><span class="hljs-subst">=</span>{creds<span class="hljs-built_in">.</span>client_id} <span class="hljs-attribute">-secret</span><span class="hljs-subst">=</span>{creds<span class="hljs-built_in">.</span>client_secret} <span class="hljs-subst">&lt;</span> /dev/<span class="hljs-built_in">null</span> <span class="hljs-number">2</span><span class="hljs-subst">&gt;&amp;</span><span class="hljs-number">1</span> <span class="hljs-subst">|</span> grep URL
vcode <span class="hljs-subst">=</span> getpass<span class="hljs-built_in">.</span>getpass()
<span class="hljs-subst">!</span>echo {vcode} <span class="hljs-subst">|</span> google<span class="hljs-attribute">-drive</span><span class="hljs-attribute">-ocamlfuse</span> <span class="hljs-attribute">-headless</span> <span class="hljs-attribute">-id</span><span class="hljs-subst">=</span>{creds<span class="hljs-built_in">.</span>client_id} <span class="hljs-attribute">-secret</span><span class="hljs-subst">=</span>{creds<span class="hljs-built_in">.</span>client_secret}
</code></pre>




<p>运行的时候应该会看到下图所示的结果： <br>
<img src="https://ws1.sinaimg.cn/large/a3d23450gy1fokwi71w3uj20jv07q41s.jpg" alt="" title=""></p>




<p>看见那个链接之后，点击它，复制验证码并粘贴到文本框里。（这里其实是调用了Google Drive的SDK来访问你的Google Drive，而这个验证码就相当于access_key了）</p>




<p>授权完成后，就可以挂载Google Drive了：</p>




<pre class="prettyprint"><code class="language-sh hljs lasso"><span class="hljs-subst">!</span>mkdir <span class="hljs-attribute">-p</span> drive
<span class="hljs-subst">!</span>google<span class="hljs-attribute">-drive</span><span class="hljs-attribute">-ocamlfuse</span> drive</code></pre>




<h2 id="测试gpu">测试GPU</h2>




<p>这时，我们在本地电脑上创建一个.py文件来测试一下，挂载是否成功以及GPU是否在工作吧。</p>




<pre class="prettyprint"><code class="language-sh hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">"import tensorflow as tf\nprint(tf.test.gpu_device_name())"</span> &gt; test.py</code></pre>




<p>然后将test.py上传到我们开始时创建的app的文件夹里。</p>




<p>然后在Colaboratory笔记本中运行一下代码：</p>




<pre class="prettyprint"><code class="language-sh hljs diff"><span class="hljs-change">!python3 drive/app/test.py</span></code></pre>




<p>不出意外的话，就会输出类似以下的结果：</p>




<pre class="prettyprint"><code class="language-sh hljs applescript">/usr/<span class="hljs-keyword">local</span>/lib/python3<span class="hljs-number">.6</span>/dist-packages/h5py/__init__.py:<span class="hljs-number">36</span>: FutureWarning: Conversion <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">second</span> argument <span class="hljs-keyword">of</span> issubdtype <span class="hljs-keyword">from</span> `float` <span class="hljs-keyword">to</span> `np.floating` <span class="hljs-keyword">is</span> deprecated. In future, <span class="hljs-keyword">it</span> will be treated <span class="hljs-keyword">as</span> `np.float64 == np.dtype(float).type`.
  <span class="hljs-keyword">from</span> ._conv import register_converters <span class="hljs-keyword">as</span> _register_converters
<span class="hljs-number">2018</span>-<span class="hljs-number">02</span>-<span class="hljs-number">18</span> <span class="hljs-number">12</span>:<span class="hljs-number">37</span>:<span class="hljs-number">05.172726</span>: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:<span class="hljs-number">898</span>] successful NUMA node <span class="hljs-command">read</span> <span class="hljs-keyword">from</span> SysFS had negative value (-<span class="hljs-number">1</span>), <span class="hljs-keyword">but</span> there must be <span class="hljs-keyword">at</span> least one NUMA node, so <span class="hljs-keyword">returning</span> NUMA node zero
<span class="hljs-number">2018</span>-<span class="hljs-number">02</span>-<span class="hljs-number">18</span> <span class="hljs-number">12</span>:<span class="hljs-number">37</span>:<span class="hljs-number">05.172988</span>: I tensorflow/core/common_runtime/gpu/gpu_device.cc:<span class="hljs-number">1208</span>] Found device <span class="hljs-number">0</span> <span class="hljs-keyword">with</span> properties: 
<span class="hljs-property">name</span>: Tesla K80 major: <span class="hljs-number">3</span> minor: <span class="hljs-number">7</span> memoryClockRate(GHz): <span class="hljs-number">0.8235</span>
pciBusID: <span class="hljs-number">0000</span>:<span class="hljs-number">00</span>:<span class="hljs-number">04.0</span>
totalMemory: <span class="hljs-number">11.17</span>GiB freeMemory: <span class="hljs-number">503.62</span>MiB
<span class="hljs-number">2018</span>-<span class="hljs-number">02</span>-<span class="hljs-number">18</span> <span class="hljs-number">12</span>:<span class="hljs-number">37</span>:<span class="hljs-number">05.173016</span>: I tensorflow/core/common_runtime/gpu/gpu_device.cc:<span class="hljs-number">1308</span>] Adding visible gpu devices: <span class="hljs-number">0</span>
<span class="hljs-number">2018</span>-<span class="hljs-number">02</span>-<span class="hljs-number">18</span> <span class="hljs-number">12</span>:<span class="hljs-number">37</span>:<span class="hljs-number">05.457665</span>: I tensorflow/core/common_runtime/gpu/gpu_device.cc:<span class="hljs-number">989</span>] Creating TensorFlow device (/device:GPU:<span class="hljs-number">0</span> <span class="hljs-keyword">with</span> <span class="hljs-number">243</span> MB memory) -&gt; physical GPU (device: <span class="hljs-number">0</span>, <span class="hljs-property">name</span>: Tesla K80, pci bus <span class="hljs-property">id</span>: <span class="hljs-number">0000</span>:<span class="hljs-number">00</span>:<span class="hljs-number">04.0</span>, compute capability: <span class="hljs-number">3.7</span>)
/device:GPU:<span class="hljs-number">0</span></code></pre>




<p>到这里的话，那么恭喜你，你的GPU环境基本可以用了，只要把你的项目文件夹上传到你的app文件夹下，搭建好深度学习的库环境，就可以通过类似上面的操作进行神经网络训练了。</p>




<h2 id="tips">Tips</h2>




<h3 id="如何安装库">如何安装库？</h3>




<p>安装Keras：</p>




<pre class="prettyprint"><code class=" hljs lasso"><span class="hljs-subst">!</span>pip install <span class="hljs-attribute">-q</span> keras
<span class="hljs-keyword">import</span> keras</code></pre>




<p>安装PyTorch：</p>




<pre class="prettyprint"><code class=" hljs avrasm">!pip install -q http://download<span class="hljs-preprocessor">.pytorch</span><span class="hljs-preprocessor">.org</span>/whl/cu75/torch-<span class="hljs-number">0.2</span><span class="hljs-number">.0</span><span class="hljs-preprocessor">.post</span>3-cp27-cp27mu-manylinux1_x86_64<span class="hljs-preprocessor">.whl</span> torchvision
import torch</code></pre>




<p>安装OpenCV：</p>




<pre class="prettyprint"><code class=" hljs lasso"><span class="hljs-subst">!</span>apt<span class="hljs-attribute">-get</span> <span class="hljs-attribute">-qq</span> install <span class="hljs-attribute">-y</span> libsm6 libxext6 <span class="hljs-subst">&amp;&amp;</span> pip install <span class="hljs-attribute">-q</span> <span class="hljs-attribute">-U</span> opencv<span class="hljs-attribute">-python</span>
<span class="hljs-keyword">import</span> cv2</code></pre>




<p>安装XGBoost：</p>




<pre class="prettyprint"><code class=" hljs lasso"><span class="hljs-subst">!</span>pip install <span class="hljs-attribute">-q</span> xgboost<span class="hljs-subst">==</span><span class="hljs-number">0.4</span>a30
<span class="hljs-keyword">import</span> xgboost</code></pre>




<p>安装GraphViz：</p>




<pre class="prettyprint"><code class=" hljs lasso"><span class="hljs-subst">!</span>apt<span class="hljs-attribute">-get</span> <span class="hljs-attribute">-qq</span> install <span class="hljs-attribute">-y</span> graphviz <span class="hljs-subst">&amp;&amp;</span> pip install <span class="hljs-attribute">-q</span> pydot
<span class="hljs-keyword">import</span> pydot</code></pre>




<p>安装7zip Reader：</p>




<pre class="prettyprint"><code class=" hljs lasso"><span class="hljs-subst">!</span>apt<span class="hljs-attribute">-get</span> <span class="hljs-attribute">-qq</span> install <span class="hljs-attribute">-y</span> libarchive<span class="hljs-attribute">-dev</span> <span class="hljs-subst">&amp;&amp;</span> pip install <span class="hljs-attribute">-q</span> <span class="hljs-attribute">-U</span> libarchive
<span class="hljs-keyword">import</span> libarchive</code></pre>




<p>安装其他库：</p>




<pre class="prettyprint"><code class=" hljs cmake">用!pip <span class="hljs-keyword">install</span>或者!apt-get <span class="hljs-keyword">install</span>命令。</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[元胞自动机与生命游戏（Game of Life）]]></title>
    <link href="https://edmondfrank.github.io/blog/2018/02/15/yuan-bao-zi-dong-ji-yu-sheng-ming-you-xi-(game-of-life)/"/>
    <updated>2018-02-15T08:44:11+08:00</updated>
    <id>https://edmondfrank.github.io/blog/2018/02/15/yuan-bao-zi-dong-ji-yu-sheng-ming-you-xi-(game-of-life)</id>
    <content type="html"><![CDATA[<p>﻿<h1 id="元胞自动机与生命游戏game-of-life">元胞自动机与《生命游戏》（Game of Life）</h1></p>

<h2 id="背景">背景</h2>




<p>笔者最近读到一篇交通流仿真的论文里，提到了一个挺有意思的模型　－－　<strong>元胞自动机</strong>。</p>




<p>在好奇心的驱使之下查询了不少资料，所以今天就来跟大家来分享一下<strong>“元胞自动机”</strong>这个模型以及它和<strong>“康威《生命游戏》”</strong>的关系。</p>




<p>为了让话题更加有趣，我们先从《生命游戏》开始谈起。</p>




<h2 id="什么是生命游戏">什么是《生命游戏》？</h2>




<p>生命游戏由英国数学家约翰·何顿·康威提出，它其实是一个零玩家游戏，它包括一个二维矩形世界，这个世界中的每个方格居住着一个活着的或死了的细胞。</p>




<p>而整个《生命游戏》是贯彻着一条生命游戏定律的，即：<strong>如果一个生命，其周围的同类生命太少，会因为得不到帮助而死亡；如果太多，则会因为得不到足够的生命资源而死亡。</strong> ——英国数学家约翰·康威</p>




<p>一个细胞在下一个时刻生死取决于相邻八个方格中活着的或死了的细胞的数量。如果相邻方格活着的细胞数量过多，这个细胞会因为资源匮乏而在下一个时刻死去；相反，如果周围活细胞过少，这个细胞会因太孤单而死去。实际中，你可以设定周围活细胞的数目怎样时才适宜该细胞的生存。如果这个数目设定过低，世界中的大部分细胞会因为找不到太多的活的邻居而死去，直到整个世界都没有生命；如果这个数目设定过高，世界中又会被生命充满而没有什么变化。</p>




<p>实际中，这个数目一般选取2或者3；这样整个生命世界才不至于太过荒凉或拥挤，而是一种动态的平衡。</p>




<p>这样的话，游戏的规则就是：当一个方格周围有2或3个活细胞时，方格中的活细胞在下一个时刻继续存活；即使这个时刻方格中没有活细胞，在下一个时刻也会“诞生”活细胞。在这个游戏中，还可以设定一些更加复杂的规则，例如当前方格的状况不仅由父一代决定，而且还考虑祖父一代的情况。你还可以作为这个世界的上帝，随意设定某个方格细胞的死活，以观察对世界的影响。</p>




<p>在游戏的进行中，杂乱无序的细胞会逐渐演化出各种精致、有形的结构；这些结构往往有很好的对称性，而且每一代都在变化形状。一些形状已经锁定，不会逐代变化。</p>




<p>有时，一些已经成形的结构会因为一些无序细胞的“入侵”而被破坏。但是形状和秩序经常能从杂乱中产生出来。</p>




<h2 id="生命游戏和元胞自动机的关系以及什么是元胞自动机">《生命游戏》和元胞自动机的关系以及什么是元胞自动机？</h2>




<p>生命游戏的原理就是基于元胞自动机的，或者说《生命游戏》就是元胞自动机的一个展示。</p>




<p><strong>元胞自动机(Cellular Automata，简称CA</strong>，也有人译为细胞自动机、点格自动机、分子自动机或单元自动机)。是一时间和空间都离散的动力系统。</p>




<p>散布在规则格网 (Lattice Grid)中的每一元胞(Cell)取有限的离散状态，遵循同样的作用规则，依据确定的局部规则作同步更新。大量元胞通过简单的相互作用而构成动态系统的演化。不同于一般的动力学模型，元胞自动机不是由严格定义的物理方程或函数确定，而是用一系列模型构造的规则构成。凡是满足这些规则的模型都可以算作是元胞自动机模型。</p>




<p>因此，元胞自动机是一类模型的总称，或者说是一个方法框架。其特点是时间、空间、状态都离散，每个变量只取有限多个状态，且其状态改变的规则在时间和空间上都是局部的。</p>




<p><strong>初等元胞自动机（ Elementary Cellular Automata， ECA)</strong>的基本要素如下</p>




<ul>
<li>空间：一维直线上等间距的点。可为某区间上的整数点的集合。</li>
<li>状态集：S={s1,s2} 即只有两种不同的状态。这两种不同的状态可将其分别编码为0 与 1；若用图形表示，则可对应“黑”与“白” 或者其他两种不同的颜色。</li>
<li>邻居：取邻居半径r=1，即每个元胞最多只有“左邻右舍”两个邻居。</li>
<li>演化规则：任意设定， 最多2^8=256</li>
</ul>




<p><strong>元胞以相邻的8个元胞为邻居。即Moore邻居；一个元胞的生死由其在该时刻本身的生死状态和周围八个邻居的状态。</strong></p>




<p>为了解释它，我们可以把计算机中的宇宙想象成是一堆方格子构成的封闭空间，尺寸为N的空间就有N*N个格子。而每一个格子都可以看成是一个生命体，每个生命都有生和死两种状态，如果该格子生就显示蓝色，死则显示白色。每一个格子旁边都有邻居格子存在，如果我们把3ｘ3的9个格子构成的正方形看成一个基本单位的话，那么这个正方形中心的格子的邻居就是它旁边的8个格子。</p>




<p>每个格子的生死遵循下面的原则：</p>




<ol>
<li>如果一个细胞周围有3个细胞为生（一个细胞周围共有8个细胞），则该细胞为生（即该细胞若原先为死，则转为生，若原先为生，则保持不变）。</li>
<li>如果一个细胞周围有2个细胞为生，则该细胞的生死状态保持不变；</li>
<li>在其它情况下，该细胞为死（即该细胞若原先为生，则转为死，若原先为死，则保持不变） </li>
</ol>




<p>设定图像中每个像素的初始状态后依据上述的游戏规则演绎生命的变化，由于初始状态和迭代次数不同，将会得到令人叹服的优美图案。</p>




<p>这样就把这些若干个格子（生命体）构成了一个复杂的动态世界。运用简单的3条作用规则构成的群体会涌现出很多意想不到的复杂行为，这就是复杂性科学的研究焦点。</p>




<h2 id="元胞自动机的应用">元胞自动机的应用</h2>




<p>在实际应用过程中，有的元胞自动机模型对其中的某些特征进行了扩展，有的在规则设计中引入随机因素，如：森林火灾模型。 又如，在交通、通讯发达的今天， 研究流行病或计算机病毒的传播问题时， 我们还可以将空间背景换成复杂网络的结点，用网络邻接点作为邻居。</p>




<p>这样的调整显然比仍旧使用二维欧氏空间、采用欧氏距离的模型更加符合实际情况。 在大型场所人群紧急疏散问题模拟研究中，可以考虑年龄、性别等因素，即元胞不是同质的，更加有利于使模拟系统接近真实系统。</p>




<h2 id="生命游戏实现python版">《生命游戏实现》Python版</h2>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">plt</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">GameOfLife</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cells_shape</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Parameters</span>
</span><span class='line'><span class="sd">    ----------</span>
</span><span class='line'><span class="sd">    cells_shape : 一个元组，表示画布的大小。</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    Examples</span>
</span><span class='line'><span class="sd">    --------</span>
</span><span class='line'><span class="sd">    建立一个高20，宽30的画布</span>
</span><span class='line'><span class="sd">    game = GameOfLife((20, 30))</span>
</span><span class='line'><span class="sd">    </span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># 矩阵的四周不参与运算</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">cells</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">cells_shape</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">real_width</span> <span class="o">=</span> <span class="n">cells_shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">real_height</span> <span class="o">=</span> <span class="n">cells_shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">cells</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="n">real_width</span><span class="p">,</span> <span class="n">real_height</span><span class="p">))</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">timer</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">mask</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">mask</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update_state</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;更新一次状态&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">buf</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">cells</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
</span><span class='line'>    <span class="n">cells</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">cells</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">cells</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
</span><span class='line'>      <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">cells</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># 计算该细胞周围的存活细胞数</span>
</span><span class='line'>        <span class="n">neighbor</span> <span class="o">=</span> <span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span> <span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span><span class="n">j</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="n">reshape</span><span class="p">((</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">))</span>
</span><span class='line'>        <span class="n">neighbor_num</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">convolve</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">mask</span><span class="p">,</span> <span class="n">neighbor</span><span class="p">,</span> <span class="s">&#39;valid&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">neighbor_num</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
</span><span class='line'>          <span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">neighbor_num</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>          <span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>          <span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">cells</span> <span class="o">=</span> <span class="n">buf</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">timer</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">plot_state</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;画出当前的状态&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">&#39;Iter :{}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">timer</span><span class="p">))</span>
</span><span class='line'>    <span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">cells</span><span class="p">)</span>
</span><span class='line'>    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update_and_plot</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n_iter</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;更新状态并画图</span>
</span><span class='line'><span class="sd">    Parameters</span>
</span><span class='line'><span class="sd">    ----------</span>
</span><span class='line'><span class="sd">    n_iter : 更新的轮数</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">plt</span><span class="o">.</span><span class="n">ion</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n_iter</span><span class="p">):</span>
</span><span class='line'>      <span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">&#39;Iter :{}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">timer</span><span class="p">))</span>
</span><span class='line'>      <span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">cells</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">update_state</span><span class="p">()</span>
</span><span class='line'>      <span class="n">plt</span><span class="o">.</span><span class="n">pause</span><span class="p">(</span><span class="mf">0.2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">plt</span><span class="o">.</span><span class="n">ioff</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="n">game</span> <span class="o">=</span> <span class="n">GameOfLife</span><span class="p">(</span><span class="n">cells_shape</span><span class="o">=</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="mi">60</span><span class="p">))</span>
</span><span class='line'>  <span class="n">game</span><span class="o">.</span><span class="n">update_and_plot</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>效果图　</p>




<blockquote>
  <p><img src="https://ws1.sinaimg.cn/large/a3d23450gy1fogdtk3ezxj209908tdgf.jpg" alt="" title=""> <br>
  <img src="https://ws1.sinaimg.cn/large/a3d23450gy1fogdtjw782j208u08y0sw.jpg" alt="" title=""> <br>
  <img src="https://ws1.sinaimg.cn/large/a3d23450gy1fogdtjvhopj209109274d.jpg" alt="" title=""></p>
</blockquote>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用树莓派实现24小时不间断直播]]></title>
    <link href="https://edmondfrank.github.io/blog/2018/02/12/shi-yong-shu-mei-pai-shi-xian-24xiao-shi-bu-jian-duan-zhi-bo/"/>
    <updated>2018-02-12T22:14:22+08:00</updated>
    <id>https://edmondfrank.github.io/blog/2018/02/12/shi-yong-shu-mei-pai-shi-xian-24xiao-shi-bu-jian-duan-zhi-bo</id>
    <content type="html"><![CDATA[<p>﻿<h1 id="使用树莓派进行24小时不间断直播">使用树莓派进行24小时不间断直播</h1></p>

<h2 id="开始">开始</h2>




<p>多余的话就不多说了，今天本文为大家介绍两种使用树莓派来做直播服务器的方法。</p>




<h2 id="方案一-ffmpeg-ffserver搭建流媒体服务器">方案一 ffmpeg + ffserver搭建流媒体服务器</h2>




<p><strong>首先</strong> <br>
我们用到的工具有：</p>




<p><strong>硬件方面：</strong></p>




<ul>
<li>树莓派主板一块</li>
<li>兼容树莓派的USB摄像头一个</li>
</ul>




<p><strong>软件方面：</strong></p>




<ul>
<li>ffmpeg，负责媒体文件的转码工作，把你服务器上的源媒体文件转成要发出去的流媒体文件。</li>
<li>ffserver，负责响应客户端的流媒体请求，把流媒体数据发送给客户端，相当与一个小型的服务端。</li>
</ul>




<p>具体的工作方式就如下图所示： <br>
<img src="https://ws1.sinaimg.cn/large/a3d23450gy1fodzrw4b72j20iu0buq52.jpg" alt="" title=""></p>




<p>多个输入源被“喂”到广播服务器，这些多媒体内容就会分发到多个客户端。上图的目的是显示地表明你的流系统能够被分成多个块部署到网络上，允许你广播不同的在线内容，而不需要改变流媒体系统的结构。</p>




<h3 id="配置">配置</h3>




<p>无论是树莓派官方摄像头模块还是其他兼容的USB摄像头，连接好摄像头之后，运行命令去启用摄像头：</p>




<blockquote>
  <p>sudo raspi-config</p>
</blockquote>




<p><strong>ffserver.conf</strong>，ffserver启动时的配置文件，在这个文件中主要是对网络协议，缓存文件feed1.ffm（见下述）和要发送的流媒体文件的格式参数做具体的设定。</p>




<p><strong>feed1.ffm</strong>，可以看成是一个流媒体数据的缓存文件，ffmpeg把转码好的数据发送给ffserver，如果没有客户端连接请求，ffserver把数据缓存到该文件中。</p>




<p><strong>下面就是一个ffserver.conf的一个例子</strong>：</p>




<pre class="prettyprint"><code class="language-sh hljs avrasm">Port <span class="hljs-number">8090</span>                      <span class="hljs-preprocessor"># Port to bind the server to</span>
BindAddress <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>
MaxHTTPConnections <span class="hljs-number">2000</span>
MaxClients <span class="hljs-number">1000</span>
MaxBandwidth <span class="hljs-number">10000</span>             <span class="hljs-preprocessor"># Maximum bandwidth per client</span>
                               <span class="hljs-preprocessor"># set this high enough to exceed stream bitrate</span>
CustomLog -
NoDaemon                       <span class="hljs-preprocessor"># Remove this if you want FFserver to daemonize after start</span>

&lt;Feed feed1<span class="hljs-preprocessor">.ffm</span>&gt;               <span class="hljs-preprocessor"># This is the input feed where FFmpeg will send</span>
   File ./feed1<span class="hljs-preprocessor">.ffm</span>            <span class="hljs-preprocessor"># video stream.</span>
   FileMaxSize <span class="hljs-number">64</span>M              <span class="hljs-preprocessor"># Maximum file size for buffering video</span>
   ACL allow <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>         <span class="hljs-preprocessor"># Allowed IPs</span>
&lt;/Feed&gt;

&lt;Stream test<span class="hljs-preprocessor">.webm</span>&gt;              <span class="hljs-preprocessor"># Output stream URL definition</span>
   Feed feed1<span class="hljs-preprocessor">.ffm</span>              <span class="hljs-preprocessor"># Feed from which to receive video</span>
   Format webm

   <span class="hljs-preprocessor"># Audio settings</span>
   AudioCodec vorbis
   AudioBitRate <span class="hljs-number">64</span>             <span class="hljs-preprocessor"># Audio bitrate</span>

   <span class="hljs-preprocessor"># Video settings</span>
   VideoCodec libvpx
   VideoSize <span class="hljs-number">720</span>x576           <span class="hljs-preprocessor"># Video resolution</span>
   VideoFrameRate <span class="hljs-number">25</span>           <span class="hljs-preprocessor"># Video FPS</span>
   AVOptionVideo flags +global_header  <span class="hljs-preprocessor"># Parameters passed to encoder</span>
                                       <span class="hljs-preprocessor"># (same as ffmpeg command-line parameters)</span>
   AVOptionVideo cpu-used <span class="hljs-number">0</span>
   AVOptionVideo qmin <span class="hljs-number">10</span>
   AVOptionVideo qmax <span class="hljs-number">42</span>
   AVOptionVideo quality good
   AVOptionAudio flags +global_header
   PreRoll <span class="hljs-number">15</span>
   StartSendOnKey
   VideoBitRate <span class="hljs-number">400</span>            <span class="hljs-preprocessor"># Video bitrate</span>
&lt;/Stream&gt;

&lt;Stream status<span class="hljs-preprocessor">.html</span>&gt;            <span class="hljs-preprocessor"># Server status URL</span>
   Format status
   <span class="hljs-preprocessor"># Only allow local people to get the status</span>
   ACL allow localhost
   ACL allow <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span> <span class="hljs-number">192.168</span><span class="hljs-number">.255</span><span class="hljs-number">.255</span>
&lt;/Stream&gt;

&lt;Redirect index<span class="hljs-preprocessor">.html</span>&gt;    <span class="hljs-preprocessor"># Just an URL redirect for index</span>
   <span class="hljs-preprocessor"># Redirect index.html to the appropriate site</span>
   URL http://www<span class="hljs-preprocessor">.ffmpeg</span><span class="hljs-preprocessor">.org</span>/
&lt;/Redirect&gt;</code></pre>




<p>ffserver启动时默认查看 /etc/ffserver.conf 配置文件，你可以通过-f选项控制查阅的配置文件。</p>




<blockquote>
  <p>ffserver -f ffserver.conf</p>
</blockquote>




<p>运行结果如下所示的话，那么ffserver就算是启动成功了。</p>




<p><img src="https://ws1.sinaimg.cn/large/a3d23450gy1fodzzq0svjj20xm08jgmv.jpg" alt="" title=""></p>




<p>打开<a href="http://localhost:8090/status.html">http://localhost:8090/status.html</a>可以看到当前server中各个流的状态。</p>




<h3 id="接入视频流">接入视频流</h3>




<p>ffserver启动之后，就可以向 <br>
<a href="http://localhost:8090/feed1.ffm">http://localhost:8090/feed1.ffm</a>接入视频流。</p>




<p><strong>注意</strong>，这里不需要指定编码格式，FFserver会重新编码。</p>




<p>视频流的来源可以是文件、摄像头或者录制屏幕。</p>




<h3 id="接入视频文件">接入视频文件</h3>




<pre class="prettyprint"><code class="language-sh hljs avrasm">ffmpeg -i testvideo<span class="hljs-preprocessor">.mp</span>4 http://localhost:<span class="hljs-number">8090</span>/feed1<span class="hljs-preprocessor">.ffm</span></code></pre>




<h3 id="接入录制屏幕">接入录制屏幕</h3>




<pre class="prettyprint"><code class="language-sh hljs lasso">ffmpeg <span class="hljs-attribute">-f</span> x11grab <span class="hljs-attribute">-r</span> <span class="hljs-number">25</span> <span class="hljs-attribute">-s</span> <span class="hljs-number">640</span>x512 <span class="hljs-attribute">-i</span> :<span class="hljs-number">0.0</span> <span class="hljs-attribute">-f</span> alsa <span class="hljs-attribute">-i</span> pulse http:<span class="hljs-comment">//localhost:8090/feed1.ffm</span>
</code></pre>




<p>这里有两个-f，第一个指的是视频流，第二个指的是音频流。视频流是抓取屏幕形成视频，-r设置帧率为25帧/s，-s设置抓取图像大小为640x512，-i设置录制视频的初始坐标。音频流设置为alsa(Advanced Linux Sound Architecture)，从Linux系统中获取音频。这其中这样ffmpeg可以录制屏幕feed到feed1.ffm中。</p>




<h3 id="接入摄像头直播">接入摄像头直播</h3>




<pre class="prettyprint"><code class="language-sh hljs lasso">ffmpeg <span class="hljs-attribute">-f</span> video4linux2 <span class="hljs-attribute">-s</span> <span class="hljs-number">640</span>x480 <span class="hljs-attribute">-r</span> <span class="hljs-number">25</span> <span class="hljs-attribute">-i</span> /dev/video0 <span class="hljs-attribute">-f</span> alsa <span class="hljs-attribute">-i</span> pulse http:<span class="hljs-comment">//localhost:8090/feed1.ffm</span></code></pre>




<h2 id="方案二-avconv-和-gstreamer-用于采集摄像头捕获的视频流并推送到-rtmp-服务">方案二 avconv 和 GStreamer 用于采集摄像头捕获的视频流并推送到 RTMP 服务</h2>




<p><strong>首先</strong> <br>
我们用到的工具有：</p>




<p><strong>硬件方面：</strong></p>




<ul>
<li>树莓派主板一块</li>
<li>兼容树莓派的USB摄像头一个</li>
</ul>




<p><strong>软件方面：</strong></p>




<ul>
<li>avconv 和 GStreamer 用于采集摄像头捕获的视频流并推送到 RTMP 服务</li>
<li>NGINX 和 RTMP 模块，用于接收视频流，同时提供视频发布功能</li>
</ul>




<h3 id="安装配置">安装＆配置</h3>




<p>因为这里我们要用到nginx的rtmp模块作为服务端，而系统自带的apt安装的nginx是没有这个模块的，所以我们需要先安装后移除nginx然后再手动编译（安装是为了下载好相关依赖）。</p>




<pre class="prettyprint"><code class="language-sh hljs bash"><span class="hljs-built_in">sudo</span> apt-get update
<span class="hljs-comment">#安装 nginx</span>
<span class="hljs-built_in">sudo</span> apt-get -y install nginx
<span class="hljs-comment">#移除 nginx</span>
<span class="hljs-built_in">sudo</span> apt-get -y remove nginx
<span class="hljs-built_in">sudo</span> apt-get clean
<span class="hljs-comment">#清空 nginx 的配置文件</span>
<span class="hljs-built_in">sudo</span> rm -rf /etc/nginx/*
<span class="hljs-comment">#安装编译用的模块</span>
<span class="hljs-built_in">sudo</span> apt-get install -y curl build-essential libpcre3 libpcre3-dev libpcre++-dev zlib1g-dev libcurl4-openssl-dev libssl-dev
<span class="hljs-comment">#创建存放网页的目录给 nginx 使用</span>
<span class="hljs-built_in">sudo</span> mkdir -p /var/www
<span class="hljs-comment">#创建编译用的目录</span>
mkdir -p ~/nginx_src
<span class="hljs-built_in">cd</span> ~/nginx_src
<span class="hljs-comment">#下载 nginx 源码包</span>
wget http://nginx.org/download/nginx-<span class="hljs-number">1.11</span>.<span class="hljs-number">8</span>.tar.gz
<span class="hljs-comment">#下载 nginx-rtmp-module 源码包</span>
wget https://github.com/arut/nginx-rtmp-module/archive/master.zip
tar -zxvf nginx-<span class="hljs-number">1.11</span>.<span class="hljs-number">8</span>.tar.gz
unzip master.zip
<span class="hljs-built_in">cd</span> nginx-<span class="hljs-number">1.11</span>.<span class="hljs-number">8</span>
<span class="hljs-comment">#设定编译参数</span>
./configure --prefix=/var/www --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --pid-path=/var/run/nginx.pid --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --with-http_ssl_module --without-http_proxy_module --add-module=/home/pi/nginx_src/nginx-rtmp-module-master
<span class="hljs-comment">#开始编译安装</span>
make
<span class="hljs-built_in">sudo</span> make install</code></pre>




<h3 id="配置-nginx">配置 nginx</h3>




<blockquote>
  <p>sudo gedit /etc/nginx/nginx.conf</p>
</blockquote>




<p>在末尾添加</p>




<pre class="prettyprint"><code class="language-sh hljs applescript">rtmp {
    server {
        listen <span class="hljs-number">1935</span>;
        chunk_size <span class="hljs-number">4096</span>;
        <span class="hljs-type">application</span> live {
            live <span class="hljs-function_start"><span class="hljs-keyword">on</span></span>;
            <span class="hljs-type">record</span> off;
        }
    }
}</code></pre>




<p>重启 nginx 服务。</p>




<blockquote>
  <p>sudo service nginx start</p>
</blockquote>




<h3 id="安装-avconv-和-gstreamer">安装 avconv 和 GStreamer</h3>




<pre class="prettyprint"><code class="language-sh hljs cs">sudo apt-<span class="hljs-keyword">get</span> update
sudo apt-<span class="hljs-keyword">get</span> install libav-tools
<span class="hljs-preprocessor">#安装 GStreamer</span>
sudo apt-<span class="hljs-keyword">get</span> install gstreamer1<span class="hljs-number">.0</span>-tools
<span class="hljs-preprocessor">#安装 GStreamer 扩展组件</span>
sudo apt-<span class="hljs-keyword">get</span>  install libgstreamer1<span class="hljs-number">.0</span>-<span class="hljs-number">0</span> libgstreamer1<span class="hljs-number">.0</span>-<span class="hljs-number">0</span>-dbg libgstreamer1<span class="hljs-number">.0</span>-dev liborc-<span class="hljs-number">0.4</span>-<span class="hljs-number">0</span> liborc-<span class="hljs-number">0.4</span>-<span class="hljs-number">0</span>-dbg liborc-<span class="hljs-number">0.4</span>-dev liborc-<span class="hljs-number">0.4</span>-doc gir1<span class="hljs-number">.2</span>-gst-plugins-<span class="hljs-keyword">base</span>-<span class="hljs-number">1.0</span> gir1<span class="hljs-number">.2</span>-gstreamer-<span class="hljs-number">1.0</span> gstreamer1<span class="hljs-number">.0</span>-alsa gstreamer1<span class="hljs-number">.0</span>-doc gstreamer1<span class="hljs-number">.0</span>-omx gstreamer1<span class="hljs-number">.0</span>-plugins-bad gstreamer1<span class="hljs-number">.0</span>-plugins-bad-dbg gstreamer1<span class="hljs-number">.0</span>-plugins-bad-doc gstreamer1<span class="hljs-number">.0</span>-plugins-<span class="hljs-keyword">base</span> gstreamer1<span class="hljs-number">.0</span>-plugins-<span class="hljs-keyword">base</span>-apps gstreamer1<span class="hljs-number">.0</span>-plugins-<span class="hljs-keyword">base</span>-dbg gstreamer1<span class="hljs-number">.0</span>-plugins-<span class="hljs-keyword">base</span>-doc gstreamer1<span class="hljs-number">.0</span>-plugins-good gstreamer1<span class="hljs-number">.0</span>-plugins-good-dbg gstreamer1<span class="hljs-number">.0</span>-plugins-good-doc gstreamer1<span class="hljs-number">.0</span>-plugins-ugly gstreamer1<span class="hljs-number">.0</span>-plugins-ugly-dbg gstreamer1<span class="hljs-number">.0</span>-plugins-ugly-doc gstreamer1<span class="hljs-number">.0</span>-pulseaudio gstreamer1<span class="hljs-number">.0</span>-tools gstreamer1<span class="hljs-number">.0</span>-x libgstreamer-plugins-bad1<span class="hljs-number">.0</span>-<span class="hljs-number">0</span> libgstreamer-plugins-bad1<span class="hljs-number">.0</span>-dev libgstreamer-plugins-base1<span class="hljs-number">.0</span>-<span class="hljs-number">0</span> libgstreamer-plugins-base1<span class="hljs-number">.0</span>-dev
</code></pre>




<h3 id="采集与呈现视频流">采集与呈现视频流</h3>




<pre class="prettyprint"><code class="language-sh hljs erlang-repl"><span class="hljs-function_or_atom">gst</span>-<span class="hljs-function_or_atom">launch</span>-<span class="hljs-number">1.0</span> -<span class="hljs-function_or_atom">v</span> <span class="hljs-function_or_atom">v4l2src</span> <span class="hljs-function_or_atom">device</span>=/<span class="hljs-function_or_atom">dev</span>/<span class="hljs-function_or_atom">video0</span> <span class="hljs-exclamation_mark">!</span> <span class="hljs-string">'video/x-raw, width=1024, height=768, framerate=30/1'</span> <span class="hljs-exclamation_mark">!</span> <span class="hljs-function_or_atom">queue</span> <span class="hljs-exclamation_mark">!</span> <span class="hljs-function_or_atom">videoconvert</span> <span class="hljs-exclamation_mark">!</span> <span class="hljs-function_or_atom">omxh264enc</span> <span class="hljs-exclamation_mark">!</span> <span class="hljs-function_or_atom">h264parse</span> <span class="hljs-exclamation_mark">!</span> <span class="hljs-function_or_atom">flvmux</span> <span class="hljs-exclamation_mark">!</span> <span class="hljs-function_or_atom">rtmpsink</span> <span class="hljs-function_or_atom">location</span>=<span class="hljs-string">'rtmp://树莓派的IP地址/live live=1'</span> &amp;</code></pre>




<p>采用以上命令就可以在后台采集ＵＳＢ摄像头拍摄的直播内容并推送到ｒｔｍｐ服务端上了。</p>




<p><strong>呈现直播视频画面</strong>：</p>




<p>1、使用 RTMP 播放器播放视频流 <br>
例如 VLC 等播放器（桌面版和手机版均有）支持 RTMP 视频流播放，填入 rtmp://树莓派的IP地址/live 即可播放。不过这个软件有数十秒的缓冲延迟，需要设定缓冲时间来缩短延迟。</p>




<p>２、推送至斗鱼直播平台观看 <br>
你可能注意到了 GStreamer 这个命令中有 location 这个参数。这个参数是设定采集到的视频流推向哪里，通过设定这个参数可以将视频流推向任何支持 RTMP 协议的服务器。</p>




<p>斗鱼平台同样采用了 RTMP 协议传输直播视频，首先获取斗鱼的 RTMP 推流地址。开启了直播室之后可以获得推流码。注意，斗鱼的推流码是有时限的，取到推流码需要尽快使用以免过期。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[树莓派和L298N电机驱动模块实现智能小车控制]]></title>
    <link href="https://edmondfrank.github.io/blog/2018/02/05/shu-mei-pai-he-l298ndian-ji-qu-dong-mo-kuai-shi-xian-zhi-neng-xiao-che-kong-zhi/"/>
    <updated>2018-02-05T14:56:53+08:00</updated>
    <id>https://edmondfrank.github.io/blog/2018/02/05/shu-mei-pai-he-l298ndian-ji-qu-dong-mo-kuai-shi-xian-zhi-neng-xiao-che-kong-zhi</id>
    <content type="html"><![CDATA[<p>﻿<h1 id="树莓派与l298n驱动模块实现智能小车控制">树莓派与L298N驱动模块实现智能小车控制</h1></p>

<h2 id="准备">准备</h2>




<p>首先在讲整体实现之前，笔者先附上自己的开发环境以及使用到的工具、硬件等。</p>




<p>用到的工具有：</p>




<ul>
<li>树莓派3代（自带wifi模块）</li>
<li>L298N电机驱动板</li>
<li>USB移动电源一个（为树莓派供电） </li>
<li>电池组一组（为驱动模块、智能小车的电机供电）</li>
<li>智能小车底盘</li>
<li>杜邦线若干</li>
<li>电脑一台（我的系统：Ubuntu 16.04 LTS Python3.5）</li>
</ul>




<h2 id="树莓派的gpio引脚定义">树莓派的GPIO引脚定义</h2>




<p>树莓派的GPIO引脚共分为两种类型，一种是<strong>PHYSICAL NUMBERING</strong> <br>
<img src="https://ws1.sinaimg.cn/large/a3d23450gy1fo5jigs4fdj20o00b2whc.jpg" alt="" title=""></p>




<p>单纯地用从上至下，从左至右的顺序来定义引脚。</p>




<p>另外一种引脚定义方式是<strong>GPIO NUMBERING</strong> <br>
<img src="https://ws1.sinaimg.cn/large/a3d23450gy1fo5jkecmuvj20o408rdi1.jpg" alt="" title=""></p>




<p>采用特殊（未知）的方式来标记GPIO接口</p>




<p><strong>这里，我采用的是第一种使用的引脚定义的方式。</strong></p>




<h2 id="l298n电机驱动模块">L298N电机驱动模块</h2>




<p>L298N 是一种双H桥电机驱动芯片，其中每个H桥可以提供2A的电流，功率部分的供电电压范围是2.5-48v，逻辑部分5v供电，接受5vTTL电平。一般情况下，功率部分的电压应大于6V否则芯片可能不能正常工作。</p>




<p>实物图如下 <br>
<img src="https://ws1.sinaimg.cn/large/a3d23450gy1fo5jpmguxqj20j60kg40s.jpg" alt="" title=""></p>




<p>使用说明如下 <br>
<img src="https://ws1.sinaimg.cn/large/a3d23450gy1fo5jql5sdpj20j60c6q42.jpg" alt="" title=""></p>




<h2 id="我的接线图">我的接线图</h2>




<p><img src="https://ws1.sinaimg.cn/large/a3d23450gy1fo5kpjg1dij20zk0jwabr.jpg" alt="" title=""> <br>
<img src="https://ws1.sinaimg.cn/large/a3d23450gy1fo5koxpcwcj20zk0jwtae.jpg" alt="" title=""></p>




<h2 id="代码实现">代码实现</h2>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">argparse</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">tornado.ioloop</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">tornado.web</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">operator</span> <span class="kn">import</span> <span class="n">itemgetter</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">RPi.GPIO</span> <span class="kn">as</span> <span class="nn">GPIO</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">sleep</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PostHandler</span><span class="p">(</span><span class="n">tornado</span><span class="o">.</span><span class="n">web</span><span class="o">.</span><span class="n">RequestHandler</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># I don&#39;t understand decorators, but this fixed my &quot;can&#39;t set attribute&quot; error</span>
</span><span class='line'>    <span class="nd">@property</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">settings</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_settings</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@settings.setter</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">settings</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">settings</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_settings</span> <span class="o">=</span> <span class="n">settings</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">settings</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">settings</span> <span class="o">=</span> <span class="n">settings</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">post</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">timestamp</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
</span><span class='line'>        <span class="n">data_json</span> <span class="o">=</span> <span class="n">tornado</span><span class="o">.</span><span class="n">escape</span><span class="o">.</span><span class="n">json_decode</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'>        <span class="n">allowed_commands</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span><span class="s">&#39;37&#39;</span><span class="p">,</span><span class="s">&#39;38&#39;</span><span class="p">,</span><span class="s">&#39;39&#39;</span><span class="p">,</span><span class="s">&#39;40&#39;</span><span class="p">])</span>
</span><span class='line'>        <span class="n">command</span> <span class="o">=</span> <span class="n">data_json</span><span class="p">[</span><span class="s">&#39;command&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">command</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">command</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>
</span><span class='line'>        <span class="n">command</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
</span><span class='line'>        <span class="n">command</span> <span class="o">=</span> <span class="n">allowed_commands</span> <span class="o">&amp;</span> <span class="n">command</span>
</span><span class='line'>        <span class="n">file_path</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">realpath</span><span class="p">(</span><span class="n">__file__</span><span class="p">)))</span><span class="o">+</span><span class="s">&quot;/session.txt&quot;</span>
</span><span class='line'>        <span class="n">log_entry</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">command</span><span class="p">)</span><span class="o">+</span><span class="s">&quot; &quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">timestamp</span><span class="p">)</span>
</span><span class='line'>        <span class="n">log_entries</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">command</span><span class="p">,</span><span class="n">timestamp</span><span class="p">))</span>
</span><span class='line'>        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span><span class="s">&quot;a&quot;</span><span class="p">)</span> <span class="k">as</span> <span class="n">writer</span><span class="p">:</span>
</span><span class='line'>            <span class="n">writer</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">log_entry</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">log_entry</span><span class="p">)</span>
</span><span class='line'>        <span class="n">speed</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">settings</span><span class="p">[</span><span class="s">&#39;speed&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="k">if</span> <span class="s">&#39;37&#39;</span> <span class="ow">in</span> <span class="n">command</span><span class="p">:</span>
</span><span class='line'>            <span class="n">motor</span><span class="o">.</span><span class="n">forward_left</span><span class="p">(</span><span class="n">speed</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elif</span> <span class="s">&#39;38&#39;</span> <span class="ow">in</span> <span class="n">command</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s">&quot;forward&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">motor</span><span class="o">.</span><span class="n">forward</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elif</span> <span class="s">&#39;39&#39;</span> <span class="ow">in</span> <span class="n">command</span><span class="p">:</span>
</span><span class='line'>            <span class="n">motor</span><span class="o">.</span><span class="n">forward_right</span><span class="p">(</span><span class="n">speed</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elif</span> <span class="s">&#39;40&#39;</span> <span class="ow">in</span> <span class="n">command</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s">&quot;backward&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">motor</span><span class="o">.</span><span class="n">backward</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">motor</span><span class="o">.</span><span class="n">stop</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># This only works on data from the same live python process. It doesn&#39;t </span>
</span><span class='line'><span class="c"># read from the session.txt file. It only sorts data from the active</span>
</span><span class='line'><span class="c"># python process. This is required because it reads from a list instead</span>
</span><span class='line'><span class="c"># of a file  on data from the same live python process. It doesn&#39;t </span>
</span><span class='line'><span class="c"># read from the session.txt file. It only sorts data from the active</span>
</span><span class='line'><span class="c"># log_entries python list</span>
</span><span class='line'><span class="k">class</span> <span class="nc">StoreLogEntriesHandler</span><span class="p">(</span><span class="n">tornado</span><span class="o">.</span><span class="n">web</span><span class="o">.</span><span class="n">RequestHandler</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">file_path</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">realpath</span><span class="p">(</span><span class="n">__file__</span><span class="p">)))</span><span class="o">+</span><span class="s">&quot;/clean_session.txt&quot;</span>
</span><span class='line'>        <span class="n">sorted_log_entries</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">log_entries</span><span class="p">,</span><span class="n">key</span><span class="o">=</span><span class="n">itemgetter</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>        <span class="n">prev_command</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
</span><span class='line'>        <span class="n">allowed_commands</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span><span class="s">&#39;38&#39;</span><span class="p">,</span><span class="s">&#39;37&#39;</span><span class="p">,</span><span class="s">&#39;39&#39;</span><span class="p">,</span><span class="s">&#39;40&#39;</span><span class="p">])</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">log_entry</span> <span class="ow">in</span> <span class="n">sorted_log_entries</span><span class="p">:</span>
</span><span class='line'>            <span class="n">command</span> <span class="o">=</span> <span class="n">log_entry</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>            <span class="n">timestamp</span> <span class="o">=</span> <span class="n">log_entry</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">command</span> <span class="o">^</span> <span class="n">prev_command</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="n">prev_command</span> <span class="o">=</span> <span class="n">command</span>
</span><span class='line'>                <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span><span class="s">&quot;a&quot;</span><span class="p">)</span> <span class="k">as</span> <span class="n">writer</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">readable_command</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>                    <span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">(</span><span class="n">command</span><span class="p">):</span>
</span><span class='line'>                        <span class="k">if</span> <span class="n">element</span> <span class="o">==</span> <span class="s">&#39;37&#39;</span><span class="p">:</span>
</span><span class='line'>                            <span class="n">readable_command</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;left&quot;</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">if</span> <span class="n">element</span> <span class="o">==</span> <span class="s">&#39;38&#39;</span><span class="p">:</span>
</span><span class='line'>                            <span class="n">readable_command</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;up&quot;</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">if</span> <span class="n">element</span> <span class="o">==</span> <span class="s">&#39;39&#39;</span><span class="p">:</span>
</span><span class='line'>                            <span class="n">readable_command</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;right&quot;</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">if</span> <span class="n">element</span> <span class="o">==</span> <span class="s">&#39;40&#39;</span><span class="p">:</span>
</span><span class='line'>                            <span class="n">readable_command</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;down&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">log_entry</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">readable_command</span><span class="p">))</span><span class="o">+</span><span class="s">&quot; &quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">timestamp</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">writer</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">log_entry</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="k">print</span><span class="p">(</span><span class="n">log_entry</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;Finished&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MultipleKeysHandler</span><span class="p">(</span><span class="n">tornado</span><span class="o">.</span><span class="n">web</span><span class="o">.</span><span class="n">RequestHandler</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;HelloWorld&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;&#39;&#39;</span>
</span><span class='line'><span class="s">                &lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="s">                &lt;html&gt;</span>
</span><span class='line'><span class="s">                    &lt;head&gt;</span>
</span><span class='line'><span class="s">                        &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="s">                        &lt;script&gt;</span>
</span><span class='line'><span class="s">                            var keys = {};</span>
</span><span class='line'>
</span><span class='line'><span class="s">                            $(document).keydown(function (e) {</span>
</span><span class='line'><span class="s">                                keys[e.which] = true;</span>
</span><span class='line'><span class="s">                                </span>
</span><span class='line'><span class="s">                                var json_upload = JSON.stringify({command:keys});</span>
</span><span class='line'><span class="s">                                var xmlhttp = new XMLHttpRequest(); </span>
</span><span class='line'><span class="s">                                xmlhttp.open(&quot;POST&quot;, &quot;/post&quot;);</span>
</span><span class='line'><span class="s">                                xmlhttp.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);</span>
</span><span class='line'><span class="s">                                xmlhttp.send(json_upload);</span>
</span><span class='line'>
</span><span class='line'><span class="s">                                printKeys();</span>
</span><span class='line'><span class="s">                            });</span>
</span><span class='line'>
</span><span class='line'><span class="s">                            $(document).keyup(function (e) {</span>
</span><span class='line'><span class="s">                                delete keys[e.which];</span>
</span><span class='line'><span class="s">                                </span>
</span><span class='line'><span class="s">                                var json_upload = JSON.stringify({command:keys});</span>
</span><span class='line'><span class="s">                                var xmlhttp = new XMLHttpRequest(); </span>
</span><span class='line'><span class="s">                                xmlhttp.open(&quot;POST&quot;, &quot;/post&quot;);</span>
</span><span class='line'><span class="s">                                xmlhttp.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);</span>
</span><span class='line'><span class="s">                                xmlhttp.send(json_upload);</span>
</span><span class='line'>
</span><span class='line'><span class="s">                                printKeys();</span>
</span><span class='line'><span class="s">                            });</span>
</span><span class='line'>
</span><span class='line'><span class="s">                            function printKeys() {</span>
</span><span class='line'><span class="s">                                var hcommandtml = &#39;&#39;;</span>
</span><span class='line'><span class="s">                                for (var i in keys) {</span>
</span><span class='line'><span class="s">                                    if (!keys.hasOwnProperty(i)) continue;</span>
</span><span class='line'><span class="s">                                    html += &#39;&lt;p&gt;&#39; + i + &#39;&lt;/p&gt;&#39;;</span>
</span><span class='line'><span class="s">                                }</span>
</span><span class='line'><span class="s">                                $(&#39;#out&#39;).html(html);</span>
</span><span class='line'><span class="s">                            }</span>
</span><span class='line'>
</span><span class='line'><span class="s">                        &lt;/script&gt;</span>
</span><span class='line'><span class="s">                    &lt;/head&gt;</span>
</span><span class='line'><span class="s">                    &lt;body&gt;</span>
</span><span class='line'><span class="s">                        Click in thiscommand frame, then try holding down some keys</span>
</span><span class='line'><span class="s">                        &lt;div id=&quot;out&quot;&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="s">                    &lt;/body&gt;</span>
</span><span class='line'><span class="s">                &lt;/html&gt;</span>
</span><span class='line'><span class="s">            &#39;&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c"># class Motor:</span>
</span><span class='line'><span class="c">#     def __init__(self, pinForward, pinBackward, pinControlStraight,</span>
</span><span class='line'><span class="c">#     pinLeft, pinRight, pinControlSteering):</span>
</span><span class='line'><span class="c">#         self.pinForward = pinForward</span>
</span><span class='line'><span class="c">#         self.pinBackward = pinBackward</span>
</span><span class='line'><span class="c">#         self.pinControlStraight = pinControlStraight</span>
</span><span class='line'><span class="c">#         self.pinLeft = pinLeft</span>
</span><span class='line'><span class="c">#         self.pinRight = pinRight</span>
</span><span class='line'><span class="c">#         self.pinControlSteering = pinControlSteering</span>
</span><span class='line'><span class="c">#         GPIO.setup(self.pinForward, GPIO.OUT)</span>
</span><span class='line'><span class="c">#         GPIO.setup(self.pinBackward, GPIO.OUT)</span>
</span><span class='line'><span class="c">#         GPIO.setup(self.pinControlStraight, GPIO.OUT)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#         GPIO.setup(self.pinLeft, GPIO.OUT)</span>
</span><span class='line'><span class="c">#         GPIO.setup(self.pinRight, GPIO.OUT)</span>
</span><span class='line'><span class="c">#         GPIO.setup(self.pinControlSteering, GPIO.OUT)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#         self.pwm_forward = GPIO.PWM(self.pinForward, 100)</span>
</span><span class='line'><span class="c">#         self.pwm_backward = GPIO.PWM(self.pinBackward, 100)</span>
</span><span class='line'><span class="c">#         self.pwm_forward.start(0)</span>
</span><span class='line'><span class="c">#         self.pwm_backward.start(0)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#         self.pwm_left = GPIO.PWM(self.pinLeft, 100)</span>
</span><span class='line'><span class="c">#         self.pwm_right = GPIO.PWM(self.pinRight, 100)</span>
</span><span class='line'><span class="c">#         self.pwm_left.start(0)</span>
</span><span class='line'><span class="c">#         self.pwm_right.start(0)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#         GPIO.output(self.pinControlStraight,GPIO.HIGH) </span>
</span><span class='line'><span class="c">#         GPIO.output(self.pinControlSteering,GPIO.HIGH) </span>
</span><span class='line'>
</span><span class='line'><span class="c">#     def forward(self, speed):</span>
</span><span class='line'><span class="c">#         &quot;&quot;&quot; pinForward is the forward Pin, so we change its duty</span>
</span><span class='line'><span class="c">#              cycle according to speed. &quot;&quot;&quot;</span>
</span><span class='line'><span class="c">#         self.pwm_backward.ChangeDutyCycle(0)</span>
</span><span class='line'><span class="c">#         self.pwm_forward.ChangeDutyCycle(speed)    </span>
</span><span class='line'>
</span><span class='line'><span class="c">#     def forward_left(self, speed):</span>
</span><span class='line'><span class="c">#         &quot;&quot;&quot; pinForward is the forward Pin, so we change its duty</span>
</span><span class='line'><span class="c">#              cycle according to speed. &quot;&quot;&quot;</span>
</span><span class='line'><span class="c">#         self.pwm_backward.ChangeDutyCycle(0)</span>
</span><span class='line'><span class="c">#         self.pwm_forward.ChangeDutyCycle(speed)  </span>
</span><span class='line'><span class="c">#         self.pwm_right.ChangeDutyCycle(0)</span>
</span><span class='line'><span class="c">#         self.pwm_left.ChangeDutyCycle(100)   </span>
</span><span class='line'>
</span><span class='line'><span class="c">#     def forward_right(self, speed):</span>
</span><span class='line'><span class="c">#         &quot;&quot;&quot; pinForward is the forward Pin, so we change its duty</span>
</span><span class='line'><span class="c">#              cycle according to speed. &quot;&quot;&quot;</span>
</span><span class='line'><span class="c">#         self.pwm_backward.ChangeDutyCycle(0)</span>
</span><span class='line'><span class="c">#         self.pwm_forward.ChangeDutyCycle(speed)</span>
</span><span class='line'><span class="c">#         self.pwm_left.ChangeDutyCycle(0)</span>
</span><span class='line'><span class="c">#         self.pwm_right.ChangeDutyCycle(100)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#     def backward(self, speed):</span>
</span><span class='line'><span class="c">#         &quot;&quot;&quot; pinBackward is the forward Pin, so we change its duty</span>
</span><span class='line'><span class="c">#              cycle according to speed. &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#         self.pwm_forward.ChangeDutyCycle(0)</span>
</span><span class='line'><span class="c">#         self.pwm_backward.ChangeDutyCycle(speed)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#     def left(self, speed):</span>
</span><span class='line'><span class="c">#         &quot;&quot;&quot; pinForward is the forward Pin, so we change its duty</span>
</span><span class='line'><span class="c">#              cycle according to speed. &quot;&quot;&quot;</span>
</span><span class='line'><span class="c">#         self.pwm_right.ChangeDutyCycle(0)</span>
</span><span class='line'><span class="c">#         self.pwm_left.ChangeDutyCycle(speed)  </span>
</span><span class='line'>
</span><span class='line'><span class="c">#     def right(self, speed):</span>
</span><span class='line'><span class="c">#         &quot;&quot;&quot; pinForward is the forward Pin, so we change its duty</span>
</span><span class='line'><span class="c">#              cycle according to speed. &quot;&quot;&quot;</span>
</span><span class='line'><span class="c">#         self.pwm_left.ChangeDutyCycle(0)</span>
</span><span class='line'><span class="c">#         self.pwm_right.ChangeDutyCycle(speed)   </span>
</span><span class='line'>
</span><span class='line'><span class="c">#     def stop(self):</span>
</span><span class='line'><span class="c">#         &quot;&quot;&quot; Set the duty cycle of both control pins to zero to stop the motor. &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#         self.pwm_forward.ChangeDutyCycle(0)</span>
</span><span class='line'><span class="c">#         self.pwm_backward.ChangeDutyCycle(0)</span>
</span><span class='line'><span class="c">#         self.pwm_left.ChangeDutyCycle(0)</span>
</span><span class='line'><span class="c">#         self.pwm_right.ChangeDutyCycle(0)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Motor</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">pinForward</span><span class="p">,</span> <span class="n">pinBackward</span><span class="p">,</span> <span class="n">pinForward2</span><span class="p">,</span>
</span><span class='line'>     <span class="n">pinBackward2</span><span class="p">,</span><span class="n">pinLeft</span><span class="p">,</span> <span class="n">pinRight</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot; Initialize the motor with its control pins and start pulse-width</span>
</span><span class='line'><span class="sd">             modulation &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">pinForward</span> <span class="o">=</span> <span class="n">pinForward</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">pinBackward</span> <span class="o">=</span> <span class="n">pinBackward</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">pinForward2</span> <span class="o">=</span> <span class="n">pinForward2</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">pinLeft</span> <span class="o">=</span> <span class="n">pinLeft</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">pinRight</span> <span class="o">=</span> <span class="n">pinRight</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">pinBackward2</span> <span class="o">=</span> <span class="n">pinBackward2</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="n">GPIO</span><span class="o">.</span><span class="n">setup</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pinLeft</span><span class="p">,</span> <span class="n">GPIO</span><span class="o">.</span><span class="n">OUT</span><span class="p">)</span>
</span><span class='line'>        <span class="n">GPIO</span><span class="o">.</span><span class="n">setup</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pinRight</span><span class="p">,</span> <span class="n">GPIO</span><span class="o">.</span><span class="n">OUT</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">GPIO</span><span class="o">.</span><span class="n">setup</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pinForward</span><span class="p">,</span> <span class="n">GPIO</span><span class="o">.</span><span class="n">OUT</span><span class="p">)</span>
</span><span class='line'>        <span class="n">GPIO</span><span class="o">.</span><span class="n">setup</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pinBackward</span><span class="p">,</span> <span class="n">GPIO</span><span class="o">.</span><span class="n">OUT</span><span class="p">)</span>
</span><span class='line'>        <span class="n">GPIO</span><span class="o">.</span><span class="n">setup</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pinForward2</span><span class="p">,</span> <span class="n">GPIO</span><span class="o">.</span><span class="n">OUT</span><span class="p">)</span>
</span><span class='line'>        <span class="n">GPIO</span><span class="o">.</span><span class="n">setup</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pinBackward2</span><span class="p">,</span> <span class="n">GPIO</span><span class="o">.</span><span class="n">OUT</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">pwm_left</span> <span class="o">=</span> <span class="n">GPIO</span><span class="o">.</span><span class="n">PWM</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pinLeft</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">pwm_right</span> <span class="o">=</span> <span class="n">GPIO</span><span class="o">.</span><span class="n">PWM</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pinRight</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">pwm_left</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">pwm_right</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">speed</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">pwm_right</span><span class="o">.</span><span class="n">ChangeDutyCycle</span><span class="p">(</span><span class="n">speed</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">pwm_left</span><span class="o">.</span><span class="n">ChangeDutyCycle</span><span class="p">(</span><span class="n">speed</span><span class="p">)</span>
</span><span class='line'>        <span class="n">GPIO</span><span class="o">.</span><span class="n">output</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pinForward</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class='line'>        <span class="n">GPIO</span><span class="o">.</span><span class="n">output</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pinBackward</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
</span><span class='line'>        <span class="n">GPIO</span><span class="o">.</span><span class="n">output</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pinForward2</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class='line'>        <span class="n">GPIO</span><span class="o">.</span><span class="n">output</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pinBackward2</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">backward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">speed</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">pwm_right</span><span class="o">.</span><span class="n">ChangeDutyCycle</span><span class="p">(</span><span class="n">speed</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">pwm_left</span><span class="o">.</span><span class="n">ChangeDutyCycle</span><span class="p">(</span><span class="n">speed</span><span class="p">)</span>
</span><span class='line'>        <span class="n">GPIO</span><span class="o">.</span><span class="n">output</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pinForward</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
</span><span class='line'>        <span class="n">GPIO</span><span class="o">.</span><span class="n">output</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pinBackward</span><span class="p">,</span>  <span class="bp">True</span><span class="p">)</span>
</span><span class='line'>        <span class="n">GPIO</span><span class="o">.</span><span class="n">output</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pinForward2</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
</span><span class='line'>        <span class="n">GPIO</span><span class="o">.</span><span class="n">output</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pinBackward2</span><span class="p">,</span>  <span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">forward_right</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">speed</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">pwm_right</span><span class="o">.</span><span class="n">ChangeDutyCycle</span><span class="p">(</span><span class="n">speed</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">pwm_left</span><span class="o">.</span><span class="n">ChangeDutyCycle</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'>        <span class="c"># GPIO.output(self.pinForward, True)</span>
</span><span class='line'>        <span class="c"># GPIO.output(self.pinBackward, False)</span>
</span><span class='line'>        <span class="c"># GPIO.output(self.pinForward2, True)</span>
</span><span class='line'>        <span class="c"># GPIO.output(self.pinBackward2, False)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">forward_left</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">speed</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">pwm_right</span><span class="o">.</span><span class="n">ChangeDutyCycle</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">pwm_left</span><span class="o">.</span><span class="n">ChangeDutyCycle</span><span class="p">(</span><span class="n">speed</span><span class="p">)</span>
</span><span class='line'>        <span class="c"># GPIO.output(self.pinForward, True)</span>
</span><span class='line'>        <span class="c"># GPIO.output(self.pinBackward, False)</span>
</span><span class='line'>        <span class="c"># GPIO.output(self.pinForward2, True)</span>
</span><span class='line'>        <span class="c"># GPIO.output(self.pinBackward2, False)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">stop</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot; Set the duty cycle of both control pins to zero </span>
</span><span class='line'><span class="sd">            to stop the motor. &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">pwm_left</span><span class="o">.</span><span class="n">ChangeDutyCycle</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">pwm_right</span><span class="o">.</span><span class="n">ChangeDutyCycle</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">GPIO</span><span class="o">.</span><span class="n">output</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pinForward</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">GPIO</span><span class="o">.</span><span class="n">output</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pinBackward</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">GPIO</span><span class="o">.</span><span class="n">output</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pinForward2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">GPIO</span><span class="o">.</span><span class="n">output</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pinBackward2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">make_app</span><span class="p">(</span><span class="n">settings</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">tornado</span><span class="o">.</span><span class="n">web</span><span class="o">.</span><span class="n">Application</span><span class="p">([</span>
</span><span class='line'>        <span class="p">(</span><span class="s">r&quot;/drive&quot;</span><span class="p">,</span><span class="n">MultipleKeysHandler</span><span class="p">),(</span><span class="s">r&quot;/post&quot;</span><span class="p">,</span> <span class="n">PostHandler</span><span class="p">,</span> <span class="p">{</span><span class="s">&#39;settings&#39;</span><span class="p">:</span><span class="n">settings</span><span class="p">}),</span>
</span><span class='line'>        <span class="p">(</span><span class="s">r&quot;/StoreLogEntries&quot;</span><span class="p">,</span><span class="n">StoreLogEntriesHandler</span><span class="p">)</span>
</span><span class='line'>    <span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Parse CLI args</span>
</span><span class='line'>    <span class="n">ap</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">()</span>
</span><span class='line'>    <span class="n">ap</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">&quot;-s&quot;</span><span class="p">,</span> <span class="s">&quot;--speed_percent&quot;</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">&quot;Between 0 and 100&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">args</span> <span class="o">=</span> <span class="nb">vars</span><span class="p">(</span><span class="n">ap</span><span class="o">.</span><span class="n">parse_args</span><span class="p">())</span>
</span><span class='line'>    <span class="c">#GPIO.cleanup(0)</span>
</span><span class='line'>    <span class="n">GPIO</span><span class="o">.</span><span class="n">setmode</span><span class="p">(</span><span class="n">GPIO</span><span class="o">.</span><span class="n">BOARD</span><span class="p">)</span>
</span><span class='line'>    <span class="n">motor</span> <span class="o">=</span> <span class="n">Motor</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">24</span><span class="p">)</span>
</span><span class='line'>    <span class="n">log_entries</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">settings</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;speed&#39;</span><span class="p">:</span><span class="nb">float</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="s">&#39;speed_percent&#39;</span><span class="p">])}</span>
</span><span class='line'>    <span class="n">app</span> <span class="o">=</span> <span class="n">make_app</span><span class="p">(</span><span class="n">settings</span><span class="p">)</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">81</span><span class="p">)</span>
</span><span class='line'>    <span class="n">tornado</span><span class="o">.</span><span class="n">ioloop</span><span class="o">.</span><span class="n">IOLoop</span><span class="o">.</span><span class="n">current</span><span class="p">()</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<h2 id="使用说明">使用说明</h2>




<p>首先，按照依赖配置好树莓派中的python环境，建议使用python3以上版本。</p>




<p>然后在树莓派接入路由后，采用远程终端的方式，运行以上的python脚本。</p>




<pre><code>sudo python3 drive_api.py --speed_percent 5
</code></pre>




<p><strong>注：非root用户一定要加上sudo，否则无法读写树莓派的GPIO口。</strong></p>




<p>最后，通过电脑在同一个内网内使用浏览器打开地址<a>192.168.1.208:81/drive</a>（这个地址根据你的树莓派接入路由的实际地址而定，以上为笔者实验使用地址，仅供格式参考）。</p>




<p>在打开的网页内，通过电脑的方向键就可以对树莓派进行“驾驶”了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重读人月神话]]></title>
    <link href="https://edmondfrank.github.io/blog/2018/01/18/zhong-du-ren-yue-shen-hua/"/>
    <updated>2018-01-18T19:55:04+08:00</updated>
    <id>https://edmondfrank.github.io/blog/2018/01/18/zhong-du-ren-yue-shen-hua</id>
    <content type="html"><![CDATA[<p>﻿<h1 id="重读人月神话">重读《人月神话》</h1></p>

<h2 id="何为人月神话">何为《人月神话》？</h2>




<p>今天，偶然地重读了一遍<a href="https://book.douban.com/subject/1102259/">《人月神话》</a>。在IT领域中，即使这本书出版距今已经超过十年，但其中的道理依旧盛行。</p>




<p>《人月神话》虽然是布鲁克斯博士在IBM公司研发并管理System/360计算机家族和OS/360软件支持包期间的项目管理经验，但是其经典程度堪称软件开发项目管理的典范。</p>




<h2 id="什么成就了它的经典">什么成就了它的经典</h2>




<p>翻开《人月神话》这本书的第一感受，这边书不像以往文绉绉的项目管理或软件工程手册。作者用他切身的经验，结合自己精彩的文笔，写出了一本有温度的指导。</p>




<p>书中的很多问题和案例都直击了一个软件开发流程当中出现的情景。作者以一些生动的比喻更为形象的让读者身感同受。</p>




<h2 id="书中的精炼">书中的精炼</h2>




<p>前车之覆，后车之鉴。</p>




<p>在执行项目或任务过程中，一味地添加人员并不能加快项目的进度。 <br>
因为软件开发本质上是一项系统工作——错综复杂的关系下实践、沟通、交流的工作量非常之大，它很快就消耗了任务分解节省下来的个人时间。从而，添加更多的人手，实际上是延长了而不是缩短了时间进度。</p>




<p>研究表明，效率高和效率低的实施者之间个体差异非常大，经常能够达到数量级水平。</p>




<p>系统设计之中，概念的完整性应该是最重要的考虑因素，为了反映一系列连贯的设计思路，宁可省略一些不规则的特性和改进。</p>




<p>简洁和直白都来自概念的完整性。在语法上，每个部分应使用相同的技巧；在语义上，应具有同样的相似性。因此，易用性实际上需要设计的一致性和概念的完整性。</p>




<p>在等待时，实现人员应该做什么？ <br>
整个创造性活动包括三个独立的阶段：体系结构、设计实现、物理实现，实际情况中，他们往往可以同时开始和并发进行。</p>




<p>坚持至少拥有两个系统或版本以上的开发设想，避免在设计第二个系统的时候就出现过分设计。</p>




<p>文档化的规格，手册不仅要描述包括所有界面在内的用户可见的一切，还要避免描述用户看不见的事物。后者是编程实现人员的的工作范畴，其设计和创造是不应该被限制的。</p>




<p>贯彻执行，计划书写的再完善，没有贯彻执行也是一张白纸而已。</p>




<p>巴比伦塔的管理教训：大型编程项目中的交流和组织能力非常重要。</p>




<p>团队之间的交流沟通方案： <br>
非正式途径：电话、短信、邮件、一切即时通讯手段。 <br>
项目会议：常规会议，进度会议。 <br>
工作手册及项目文档：准备好开发相关的手册和交互文档。</p>




<p>团队组织的目的是减少所需要的交流和合作的数量，其最好的方法是人力划分和职责限定。</p>




<p>实践是最好的老师，但智者还能从其他地方有所收获。</p>




<p>工作量 = 常数 x 指令数量1.5次方</p>




<p>使用适当的高级语言，编程的生产率可以提高5倍。</p>




<p>书面记录决策是必要的。只有记录下来，分歧才会明朗，矛盾才会突出。书写这项活动需要上百次的细小决定，正是由于它们的存在，人们才能从令人迷惑的现象中得到清晰，确定的策略。</p>




<p>普遍的做法是，选择一种方法，试试看；如果失败了，没关系，再试试别的方法。不管怎么样，重要的是先去尝试。</p>




<p>在项目开发中应该构建 “试验性工厂” 和 “产品” 这两个步骤，不要把产品原型发布给用户。对于大多数项目而言，第一个开发的系统并不合用，它可能太慢、太大或难以使用，这样要解决所有的问题除了重新开始以外，没有其他的办法。</p>




<p>系统软件开发是 “减熵” 的过程，所以它本身是处于亚稳态的。软件维护是 “增熵” 的过程，即使是最熟练的软件维护工作，也只是放缓了系统退化到非稳态的进程。</p>




<p>系统各个组成部分的开发者都会做出一些假设，而这些假设之间的不匹配是大多数致命和难以察觉的bug的主要来源。</p>




<p>模块分割、模块独立、结构化编程、构件单元测试是避免系统性bug的良好手段。</p>




<p>需要什么样的文档？ <br>
（1）使用程序：每个用户都需要一段对程序进行描述的文字。可是大多数文档只提供了很少总结性的内容，无法达到用户的要求，就是像描绘了树木，形容了树皮和树叶，但却没有一副森林的图案。 <br>
（2）目的：主要功能是什么？开发程序的目的是什么？ <br>
（3）环境：程序运行在什么样的机器、硬件配置和操作系统上？ <br>
（4）范围：输入的有效范围是什么？允许显示的合法输出范围是什么？ <br>
（5）实现功能和使用的算法：精确地阐述它做了什么？ <br>
（6）“输入——输出”格式：必须是确切的，完整的。 <br>
（7）操作指令：包括控制台及输出内容中正常和异常结束的行为。 <br>
（8）选项：用户的功能选项有哪些？如何在选项之间进行挑选？ <br>
（9）运行时间：在指定的配置下，解决特定规模问题所需要的时间。 <br>
（10）精度和校验：期望结果的精确程度？如何进行精度的检测？</p>




<h2 id="团队在书中的倒影">团队在书中的倒影</h2>




<p>我们团队一年来的开发弊端都有在书中的案例体现。</p>




<p>《人月神话》就像是一个个项目开发小组的倒影，项目交流成本、开发者效率的差异、开发人员各自独立的项目假设造成的隐藏bug、对项目进度的乐观预估，其中最为突出的莫过于是<strong>巴比伦塔的管理教训</strong>，沟通和有效组织的缺乏，直接拖缓了整个项目的进度。</p>




<p>我想，在经验中总结前进，最有效的莫过于《人月神话》开篇的第一章：<strong>前车之覆，后车之鉴。</strong>。</p>




<pre><code>                                            By 领沃EdmondFrank
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据恢复利器-Testdisk]]></title>
    <link href="https://edmondfrank.github.io/blog/2018/01/13/shu-ju-hui-fu-li-qi-testdisk/"/>
    <updated>2018-01-13T16:23:37+08:00</updated>
    <id>https://edmondfrank.github.io/blog/2018/01/13/shu-ju-hui-fu-li-qi-testdisk</id>
    <content type="html"><![CDATA[<h1>数据恢复利器-Testdisk</h1>

<p>今天我要给大家介绍的主角是<strong>Testdisk</strong></p>

<p>首先，<strong>Testdisk</strong>是一个强大的免费的跨平台的数据恢复工具，根据它的<a href="https://www.cgsecurity.org/wiki/TestDisk">官网</a>上的简介，这款软件主要被设计用于恢复丢失的分区以及修复那些由于人为或者病毒等原因导致分区表错误而无法启动系统的问题。</p>

<p>除此之外，Testdisk更多的特性大家可以参考官方列出的功能列表：</p>

<blockquote><p>TestDisk can
Fix partition table, recover deleted partition
Recover FAT32 boot sector from its backup
Rebuild FAT12/FAT16/FAT32 boot sector
Fix FAT tables
Rebuild NTFS boot sector
Recover NTFS boot sector from its backup
Fix MFT using MFT mirror
Locate ext2/ext3/ext4 Backup SuperBlock
Undelete files from FAT, exFAT, NTFS and ext2 filesystem
Copy files from deleted FAT, exFAT, NTFS and ext2/ext3/ext4 partitions.</p></blockquote>

<p>对于Testdisk的强大之处，肯定是不容质疑的，对此笔者在之前自己的系统修复过程切身体会过Testdisk的实用与强大之处（在笔者的旧硬盘全盘分区表丢失的情况之下，使用Testdisk成功恢复了大部分的分区，并能成功启动系统。看到系统还能成功开机那一刻别提多激动了！）</p>

<h2>跨平台</h2>

<p>Testdisk不仅强大而且还能够跨平台，跨平台，跨平台使用（重要的事情说三遍）并且还支持多种文件系统。</p>

<p>简单的介绍就到这里了！！</p>

<p>下面我们就用一个实际的例子来演示一下
Testdisk的具体使用方法：</p>

<p>本例子摘取自：<a href="https://www.cgsecurity.org/wiki/Testdisk_%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97">Testdisk 操作指南</a>
PS：毕竟为了演示而认为制造一些错误也是有一定风险的，所以为了方便和安全起见笔者这里摘抄一份别人的例子啦，反正也是为了向大家安利下这个软件。</p>

<p>前提条件:</p>

<ul>
<li>TestDisk 需要用管理员权限来运行。</li>
</ul>


<p>使用 TestDisk 的重点:</p>

<ul>
<li>用 方向键 和 上一页/下一页 按键在TestDisk 中导航。</li>
<li>然后, 按Enter 键确认你的选择.</li>
<li>若要返回前一页或者退出TestDisk, 按 q (Quit) 键。</li>
<li>若要在 TestDisk 下保存修改,按 y (Yes) 或者 Enter 键来确认</li>
<li>如果确实要把分区信息写入主引导记录（MBR），应该选择 &ldquo;Write&rdquo; 选项并按 Enter 键。</li>
</ul>


<h2>运行Testdisk</h2>

<p>如果 TestDisk 还没有被安装, 可以从这里下载 <a href="https://www.cgsecurity.org/wiki/TestDisk_Download">TestDisk Download</a>。然后解压缩这个归档文件，包括子文件夹。</p>

<h3>　一、新建日志</h3>

<ul>
<li>选择 Create 来让 Testdisk 新建一个日志文件（ log file） ，里边包含了一些技术信息和消息, 除非你要往一个日志里追加信息 log 或者 你从只读存储器里执行 TestDisk 而且必须在别的地方建立日志 log。</li>
<li>选择 None 如果你不想让过程中的细节和消息记录到日志文件里 log file (比如当 Testdisk 是在只读位置执行的时候，这很有用).</li>
<li>按 Enter 键以继续.
<img src="https://www.cgsecurity.org/mw/images/Create_log.png" alt="enter image description here" /></li>
</ul>


<h3>　二、选择磁盘</h3>

<p>所有的硬盘都应该能被TestDisk检测到并且辅以正确的大小列出来：</p>

<ul>
<li>用 上/下 键 来选择丢失分区的硬盘。</li>
<li>按 Enter 键继续。
<img src="https://www.cgsecurity.org/mw/images/Select_disk_update.png" alt="enter image description here" /></li>
</ul>


<h3>三、选择分区表类型</h3>

<p>TestDisk 会显示分区表类型。</p>

<ul>
<li>选择正确的分区表类型 - 在 TestDisk 自动检测分区表类型之后，一般预设的那个值是正确的。</li>
<li>按 Enter 键继续。
<img src="https://www.cgsecurity.org/mw/images/Partition_table_type.png" alt="enter image description here" /></li>
</ul>


<h3>四、查看当前分区状态</h3>

<p>TestDisk 显示这个菜单的时候 (参见 <a href="https://www.cgsecurity.org/wiki/Running_TestDisk">TestDisk Menu Items</a>).
+ 用预设的“analyze”（分析）选项来检查当前的分区结构并搜索丢失的分区。
+ 分析过程中按 Enter 键继续。
第一个分区显示了两次，它指向了一个毁坏的分区或一个无效的分区表入口。
+ 无效的 NTFS boot 指向了一个错误的 NTFS boot 扇区, 所以这是一个损坏的文件系统。
在扩展分区中，只有一个逻辑分区(分区标签为2)可用。 有一个逻辑分区不见了。
+ 选 Quick Search （快速搜索）来继续。
然后，当前的结构就会被列出来。 接下来就可以在当前的分区结构中检查丢失或错误的分区了。</p>

<p><img src="https://www.cgsecurity.org/mw/images/Analyse.png" alt="enter image description here" /></p>

<h3>五、快速搜索分区</h3>

<p>在 Quick Search（快速搜索）的过程中, TestDisk 找到了两个分区，包括那个不见的逻辑分区（标签为 Partition 3 ）
<img src="https://www.cgsecurity.org/mw/images/First_results.png" alt="enter image description here" />
+ 高亮这个分区并按 p 来列出文件 (若要返回前一页，请按 q ).
+ 这里所有的目录和文件都正确列出来了。
+ 按 Enter 键继续。
+ <img src="https://www.cgsecurity.org/mw/images/First_results.png" alt="enter image description here" />
+</p>

<h3>六、保存分区表</h3>

<ul>
<li><p>当全部分区都可用的时候 并且数据已正确列出,应该选 Write 菜单项保存分区结构. 菜单项 Extd Part gives you the opportunity to decide if the extended partition will use all available disk space or only the required (minimal) space.</p></li>
<li><p>当一个分区,第一个,仍然找不到, 高亮菜单项 深度搜索 (没有自动进行的时候) ，按 Enter 键继续.</p></li>
</ul>


<p><img src="https://www.cgsecurity.org/mw/images/Search_menu.png" alt="enter image description here" />
（经过笔者的几次实验和朋友的反馈，其实到了这一步已经能够解决80%以上的问题了！）</p>

<p>所以，有关Testdisk更加深入的功能和其他详细用法大家可以前往这个<a href="https://www.cgsecurity.org/wiki/Testdisk_%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97">中文版的官方指南</a>在这里笔者就不赘述了！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最大似然估计]]></title>
    <link href="https://edmondfrank.github.io/blog/2017/12/21/zui-da-si-ran-gu-ji/"/>
    <updated>2017-12-21T01:00:04+08:00</updated>
    <id>https://edmondfrank.github.io/blog/2017/12/21/zui-da-si-ran-gu-ji</id>
    <content type="html"><![CDATA[<p>﻿<h1 id="em算法基石-最大似然估计">EM算法基石-最大似然估计</h1></p>

<h2 id="前言">前言</h2>




<p>在统计计算中，<strong>最大期望（EM）算法是在概率模型中寻找参数最大似然估计或者最大后验估计的算法（机器学习十大算法之一）</strong>，其中概率模型依赖于无法观测的隐藏变量（Latent Variable）。最大期望经常用在机器学习和计算机视觉的数据聚类（Data Clustering）领域。而本文要讲的就是最大期望算法的基石-<strong>最大似然估计</strong>。</p>




<h2 id="最大似然估计maximum-likelihoodml">最大似然估计（Maximum Likelihood，ML）</h2>




<h3 id="概述">概述</h3>




<p><strong>最大似然估计</strong>也称极大似然法，是一种统计方法，它用来求一个样本集的相关概率密度函数的参数。这个方法最早是遗传学家以及统计学家罗纳德·费雪爵士在1912年至1922年间开始使用的。</p>




<p><strong>最大似然法</strong>明确地使用概率模型，其目标是寻找能够以较高概率产生观察数据的系统发生树。最大似然法是一类完全基于统计的系统发生树重建方法的代表。</p>




<h3 id="简单举例">简单举例</h3>




<p>设有外形完全相同的两个箱子,甲箱有99个白球1个黑球,乙箱有1个白球99个黑球.今随机地抽取一箱,然后再从这箱中任取一球,结果发现是白球.问这个箱子是甲箱还是乙箱?</p>




<p>仅仅从取出的球是白球这一点是无法从逻辑上严格加以判定该箱究竟是甲箱还是乙箱的。但是如果现在一定要我们做出选择，那么我们只能这样来考虑：从箱中取出的球是白球这一点来看，甲箱和乙箱哪个看上去更像是真正从中取球的箱子？</p>




<p>我们可以这样来分析，如果该箱是甲箱,则取得白球的概率为0.99；如果该箱是乙箱,则取得白球的概率0.01．因此，用“该箱是甲箱”来解释所取的球是白球这一事件更有说服力一些，从而我们判定甲箱比乙箱更像一些。最后我们做出推断,这球是从甲箱取出的。</p>




<h3 id="离散分布离散有限参数空间">离散分布，离散有限参数空间</h3>




<p>看完上面那个简单的例子，下面再来考虑一个抛硬币的例子。假设这个硬币正面跟反面轻重不同。我们把这个硬币抛80次，并把正面的次数记下来，正面记为H，反面记为T），并把抛出一个正面的概率记为p，抛出一个反面的概率记为1 − p。假设我们抛出了49个正面，31 个反面，即49次H，31次T。假设这个硬币是我们从一个装了三个硬币的盒子里头取出的。这三个硬币抛出正面的概率分别为p = 1 / 3, p = 1 / 2, p = 2 / 3. 这些硬币没有标记，所以我们无法知道哪个是哪个。使用最大似然估计，通过这些试验数据，我们可以计算出哪个硬币的可能性最大。这个可能性函数取以下三个值中的一个：</p>




<p><script type="math/tex; mode=display" id="MathJax-Element-98">P(H=49,T=31|\rho=\frac{1}{3})=\textrm{C}^{49}_{80}(\frac{1}{3})^{49}(1-\frac{1}{3})^{31} \approx 0.000 \\
P(H=49,T=31|\rho=\frac{1}{2})=\textrm{C}^{49}_{80}(\frac{1}{2})^{49}(1-\frac{1}{2})^{31} \approx 0.012 \\
P(H=49,T=31|\rho=\frac{2}{3})=\textrm{C}^{49}_{80}(\frac{2}{3})^{49}(1-\frac{2}{3})^{31} \approx 0.054 </script></p>




<p>我们可以看到当<script type="math/tex" id="MathJax-Element-99">\widehat{p}=2/3</script>时，可能性函数取得最大值。这就是p的最大似然估计。</p>




<h3 id="离散分布连续参数空间升级版">离散分布，连续参数空间（升级版）</h3>




<p>现在假设上面的例子中的盒子中有无数个硬币，对于<script type="math/tex" id="MathJax-Element-439">0\leq p \leq 1</script>中的任何一个p， 都有一个抛出正面概率为p的硬币对应，我们再来求其可能性函数的最大值： <br>
<script type="math/tex; mode=display" id="MathJax-Element-440">f_D(H=49,T=31|\rho)=\textrm{C}^{49}_{80}\rho^{49}(1-\rho^{31})</script> <br>
两边同时取p微分 <br>
<script type="math/tex; mode=display" id="MathJax-Element-441">0=\rho^{48}(1-\rho)[49(1-\rho)-31\rho]</script> <br>
求得其解分别为： <br>
<script type="math/tex; mode=display" id="MathJax-Element-442">\rho=0,\rho=1和\rho=\frac{49}{80}</script> <br>
使可能性最大的解显然是p = 49 / 80（因为p = 0 和p = 1 这两个解会使可能性为零）。因此我们说最大似然估计值为<script type="math/tex" id="MathJax-Element-443">\widehat{p}=49/80</script>.</p>




<p>这个结果很容易一般化。只需要用一个字母t代替49用以表达伯努利试验中的被观察数据（即样本）的成功次数，用另一个字母n代表伯努利试验的次数即可。使用完全同样的方法即可以得到最大似然估计值: <br>
<script type="math/tex; mode=display" id="MathJax-Element-444">\widehat{p}=\frac{t}{n}</script></p>




<h3 id="最大似然估计的一般求解步骤">最大似然估计的一般求解步骤</h3>




<ol>
<li>写出似然函数 <br>
　　<script type="math/tex; mode=display" id="MathJax-Element-519">L\theta=\prod_{i=1}^n p(x_i;\theta)(总体X为离散型时)\\  L\theta=\prod_{i=1}^n f(x_i;\theta)(总体X为连续型时)</script> <br>
　　</li>
<li><p>对似然函数两边取对数有 <br>
<script type="math/tex; mode=display" id="MathJax-Element-520">lnL\theta=\sum_{i=1}^n lnp(x_i;\theta)
\\ lnL\theta=\sum_{i=1}^n lnf(x_i;\theta)</script></p></li>
<li><p>对lnL\theta求导数并令之为0： <br>
<script type="math/tex; mode=display" id="MathJax-Element-521">\frac{dlnL\theta}{d\theta}=0</script></p></li>
</ol>




<p>此方程为对数似然方程。解对数似然方程所得，即为未知参数 的最大似然估计值。</p>




<h4 id="举个栗子连续分布连续参数空间终级版">举个栗子：连续分布，连续参数空间（终级版）</h4>




<p>设总体 <script type="math/tex" id="MathJax-Element-805">X~N(μ，σ^2),μ，σ^2(正太分布)</script>为未知参数，<script type="math/tex" id="MathJax-Element-806">X1,X2...,Xn</script>是来自总体X的样本，<script type="math/tex" id="MathJax-Element-807">X1,X2...,Xn</script>是对应的样本值，求<script type="math/tex" id="MathJax-Element-808">μ与σ^2</script>的最大似然估计值。</p>




<p><strong>解:</strong> X的概率密度为 <br>
<script type="math/tex; mode=display" id="MathJax-Element-809">f(x|μ，σ2)=\frac{1}{\sqrt{2\pi\sigma}}e^-\frac{(x_i-\mu)^2}{2\sigma^2} (-\infty<x<+\infty),</script> <br>
　　 <br>
<strong>可得似然函数</strong>如下： <br>
<script type="math/tex; mode=display" id="MathJax-Element-810">L(μ，σ2)=\prod_{i=1}^n\frac{1}{\sqrt{2\pi\sigma}}e^{-\frac{(x_i-\mu)^2}{2{\sigma}^2}}</script></p>




<p><strong>取对数</strong>，得</p>




<p>　　<script type="math/tex; mode=display" id="MathJax-Element-811">lnL(μ，σ2)=-\frac{n}{2}ln(2\pi)-\frac{n}{2}ln(\sigma^2)-\frac{1}{2{\delta}^2}\sum_{i=1}^n{(x_i-\mu)}^2</script></p>




<p><strong>令</strong></p>




<p><script type="math/tex; mode=display" id="MathJax-Element-821">\begin{cases}\frac{\partial}{\partial\mu}ln L(\mu,\sigma)=0,\\\frac{\partial}{\partial\sigma^2}\ln L(\mu,\sigma)=0,\end{cases}</script></p>




<p><strong>可得</strong></p>




<p><script type="math/tex; mode=display" id="MathJax-Element-828">\begin{cases}\frac{1}{\sigma^2}(\sum_{i=1}^2x_i-n\mu)=0,\\-\frac{n}{2\sigma^2}+\frac{1}{2(\sigma^2)^2}\sum_{i=1}^n(x_i-\mu)^2=0.\end{cases}</script></p>




<p><strong>解得</strong></p>




<p><script type="math/tex; mode=display" id="MathJax-Element-843">\begin{cases}\widehat{\mu}=\frac{1}{n}\sum_{i=1}^n x_i=\overline{x}, \\\widehat{\sigma}^2=\frac{1}{n}\sum_{i=1}^n(x_i-\overline{x})^2.\end{cases}</script></p>




<p>故<script type="math/tex" id="MathJax-Element-844">μ和δ2</script>的<strong>最大似然估计量</strong>分别为 <br>
<script type="math/tex; mode=display" id="MathJax-Element-845">\widehat{\mu}=\overline{X}，\widehat{\delta^2}=\frac{1}{n}\sum_{i=1}^n(X_i-\overline{X})^2</script></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[传统机器学习走向神经网络]]></title>
    <link href="https://edmondfrank.github.io/blog/2017/12/14/chuan-tong-ji-qi-xue-xi-zou-xiang-shen-jing-wang-luo/"/>
    <updated>2017-12-14T23:43:13+08:00</updated>
    <id>https://edmondfrank.github.io/blog/2017/12/14/chuan-tong-ji-qi-xue-xi-zou-xiang-shen-jing-wang-luo</id>
    <content type="html"><![CDATA[<p>﻿<h1 id="传统机器学习走向神经网络">传统机器学习走向神经网络</h1></p>

<h2 id="神经网络的基本结构">神经网络的基本结构</h2>




<p>首先我们先来看一下最基础的神经网络结构： <br>
<img src="https://ws1.sinaimg.cn/large/a3d23450gy1fmgm7cftunj20kf0ckaep.jpg" alt="" title=""></p>




<p>由上图的结构可以看出，这个神经网络具有三层，其中输入层不计。而中间的橙色层则为两层隐藏层，最右的蓝色层为输出层。输入从最左边的输入层进行输入，然后经过两次隐藏层和激活函数之后进行输出，这样我们可以把这个神经网络简单地表示成一下的式子： <br>
<script type="math/tex; mode=display" id="MathJax-Element-82">Y_{out} = W_iX_{in}+B</script> <br>
W为X的权重，而B为函数的偏置。 <br>
其中，偏置值B的存在有利于打破数据对称的局面，使得神经网络可以应用在非对称的数据之上。</p>




<h2 id="神经网络的基本算法">神经网络的基本算法</h2>




<p>前向传导：前向传导的思想比较简单，下面的一张图足以概括它的主要思想。 <br>
<img src="https://ws1.sinaimg.cn/large/a3d23450gy1fmgp39x2ltj20oh0gydi9.jpg" alt="" title=""></p>




<p>反向传播：反向传播的方法其实也比较简单，其主要思想是涉及求偏导，以及链式求导法则。 <br>
<img src="https://ws1.sinaimg.cn/large/a3d23450gy1fmgp6qj2wlj20mj0i441b.jpg" alt="" title=""></p>




<p>梯度下降：梯度下降法是一个最优化算法，通常也称为最速下降法。最速下降法是求解无约束优化问题最简单和最古老的方法之一，虽然现已不具有实用性，但是许多有效算法都是以它为基础进行改进和修正而得到的。最速下降法是用负梯度方向为搜索方向的，最速下降法越接近目标值，步长越小，前进越慢。</p>




<h2 id="朴素贝叶斯和神经网络">朴素贝叶斯和神经网络</h2>




<p>首先朴素贝叶斯算法的原始形式可以表达成以下的形式： <br>
<script type="math/tex" id="MathJax-Element-1467">G(x)=arg\  max\ p(y)  
\prod\limits^n_{i=1}p(x_i|y)^{x_i}</script></p>




<p>除此之外，该算法还有一下特点： <br>
<script type="math/tex" id="MathJax-Element-1468">x_i只有0，1两种取值</script> <br>
<script type="math/tex" id="MathJax-Element-1469">x_i取1意味着x_i对应了的特征“出现了”</script>  <br>
<script type="math/tex" id="MathJax-Element-1470">x_i取0意味着x_i对应了的特征“没出现”</script></p>




<p>这样转换成矩阵的形式时，我们可以采用独热编码亦称One-hot Encode。 <br>
独热编码：</p>




<p>解决了分类标签的问题，那么我们又该怎样用神经网络的线性模型形式来表达贝叶斯公式中概率相乘的情况呢？</p>




<p>没错，就是使用对数函数。根据对数函数的性质<script type="math/tex" id="MathJax-Element-1471">log_2X+log_2Y=log_2XY</script>,我们就可以通过对数变换，将乘法转换成加法的形式，我们可以把上面的朴素贝叶斯公式改写成： <br>
<script type="math/tex" id="MathJax-Element-1472">G(x)=arg\ max\ log(y)+\sum\limits^n_{i=1}x_ilog\ p(x_i|y)</script></p>




<p>那么我们就可以用退化成线性模型的神经网络来实现朴素贝叶斯模型。</p>




<h3 id="核心实现">核心实现</h3>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># 独热化处理部分</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">OneHotEncoder</span>
</span><span class='line'><span class="n">enc</span> <span class="o">=</span> <span class="n">OneHotEncoder</span><span class="p">()</span>
</span><span class='line'><span class="n">x_train</span> <span class="o">=</span> <span class="n">enc</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">x_train</span><span class="p">)</span><span class="o">.</span><span class="n">toarray</span><span class="p">()</span>
</span><span class='line'><span class="n">x_test</span> <span class="o">=</span> <span class="n">enc</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">x_test</span><span class="p">)</span><span class="o">.</span><span class="n">toarray</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c">## .....篇幅有限,此处省略其余代码</span>
</span><span class='line'>
</span><span class='line'><span class="c"># NaiveBayes -&gt; NN 权值转换部分</span>
</span><span class='line'><span class="k">class</span> <span class="nc">NB2NN</span><span class="p">(</span><span class="n">TransformationBase</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">(</span><span class="n">NB2NN</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_name_appendix</span> <span class="o">=</span> <span class="s">&quot;NaiveBayes&quot;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">model_param_settings</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="s">&quot;activations&quot;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_transform</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">hidden_units</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x_test</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_get_all_data</span><span class="p">()</span>
</span><span class='line'>        <span class="n">nb</span> <span class="o">=</span> <span class="n">MultinomialNB</span><span class="p">()</span>
</span><span class='line'>        <span class="n">nb</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_print_model_performance</span><span class="p">(</span><span class="n">nb</span><span class="p">,</span> <span class="s">&quot;Naive Bayes&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_transform_ws</span> <span class="o">=</span> <span class="p">[</span><span class="n">nb</span><span class="o">.</span><span class="n">feature_log_prob_</span><span class="o">.</span><span class="n">T</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_transform_bs</span> <span class="o">=</span> <span class="p">[</span><span class="n">nb</span><span class="o">.</span><span class="n">class_log_prior_</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>




<h2 id="决策树贝叶斯和神经网络">决策树贝叶斯和神经网络</h2>




<p>首先，决策树的原理主要就是通过数据信息熵的变化来选择当前的最优分类点，然后从根开始一步一步扩展成树。而实质上，最后成功构建出来的决策树，其从根节点开始到每个分类叶子节点的路径对应的都是一组高维空间上的超平面组合。决策树的分类也就是用一组超平面去划分数据空间，使得最后剩下一个唯一确定的标识。</p>




<p>知道决策树的本质之后，我们就可以用这样的方法来将决策树算法迁移到神经网络上： <br>
* 第一个隐藏层表达决策树的中间节点所对应的超平面 <br>
* 第二个隐藏层表达各个决策的路径 <br>
* 第二个隐藏层和输出层之间的权值矩阵表达各个叶节点</p>




<h3 id="核心实现-1">核心实现</h3>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">## 因为决策树到神经网络的转换较为复杂,此处仅贴出核心代码</span>
</span><span class='line'><span class="k">class</span> <span class="nc">DT2NN</span><span class="p">(</span><span class="n">TransformationBase</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">(</span><span class="n">DT2NN</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_name_appendix</span> <span class="o">=</span> <span class="s">&quot;DTree&quot;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">model_param_settings</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="s">&quot;activations&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;sign&quot;</span><span class="p">,</span> <span class="s">&quot;one_hot&quot;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_transform</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x_test</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_get_all_data</span><span class="p">()</span>
</span><span class='line'>        <span class="n">tree</span> <span class="o">=</span> <span class="n">DecisionTreeClassifier</span><span class="p">()</span>
</span><span class='line'>        <span class="n">tree</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_print_model_performance</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="s">&quot;Decision Tree&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">tree_structure</span> <span class="o">=</span> <span class="n">export_structure</span><span class="p">(</span><span class="n">tree</span><span class="p">)</span>
</span><span class='line'>        <span class="n">n_leafs</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">([</span><span class="mi">1</span> <span class="k">if</span> <span class="n">pair</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="k">else</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">pair</span> <span class="ow">in</span> <span class="n">tree_structure</span><span class="p">])</span>
</span><span class='line'>        <span class="n">n_internals</span> <span class="o">=</span> <span class="n">n_leafs</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Internals : {} ; Leafs : {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">n_internals</span><span class="p">,</span> <span class="n">n_leafs</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">n_internals</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span>
</span><span class='line'>        <span class="n">w1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">([</span><span class="n">x</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">n_internals</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span>
</span><span class='line'>        <span class="n">w2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">([</span><span class="n">n_internals</span><span class="p">,</span> <span class="n">n_leafs</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span>
</span><span class='line'>        <span class="n">w3</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">([</span><span class="n">n_leafs</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">n_class</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span>
</span><span class='line'>        <span class="n">node_list</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="n">node_sign_list</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="n">node_id_cursor</span> <span class="o">=</span> <span class="n">leaf_id_cursor</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">max_route_length</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">hidden_units</span> <span class="o">=</span> <span class="p">[</span><span class="n">n_internals</span><span class="p">,</span> <span class="n">n_leafs</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="n">depth</span><span class="p">,</span> <span class="n">feat_dim</span><span class="p">,</span> <span class="n">rs</span> <span class="ow">in</span> <span class="n">tree_structure</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">feat_dim</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">depth</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">node_list</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">node_sign_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">node_list</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="n">node_id_cursor</span><span class="p">,</span> <span class="n">feat_dim</span><span class="p">,</span> <span class="n">rs</span><span class="p">])</span>
</span><span class='line'>                    <span class="n">w1</span><span class="p">[</span><span class="n">feat_dim</span><span class="p">,</span> <span class="n">node_id_cursor</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>                    <span class="n">b</span><span class="p">[</span><span class="n">node_id_cursor</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="n">rs</span>
</span><span class='line'>                    <span class="n">node_id_cursor</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">node_list</span> <span class="o">=</span> <span class="n">node_list</span><span class="p">[:</span><span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>                    <span class="n">node_sign_list</span> <span class="o">=</span> <span class="n">node_sign_list</span><span class="p">[:</span><span class="n">depth</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">valid_nodes</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
</span><span class='line'>                <span class="n">local_sign_list</span> <span class="o">=</span> <span class="n">node_sign_list</span><span class="p">[:]</span>
</span><span class='line'>                <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">((</span><span class="n">node_id</span><span class="p">,</span> <span class="n">node_dim</span><span class="p">,</span> <span class="n">node_threshold</span><span class="p">),</span> <span class="n">node_sign</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span>
</span><span class='line'>                    <span class="nb">zip</span><span class="p">(</span><span class="n">node_list</span><span class="p">,</span> <span class="n">node_sign_list</span><span class="p">)</span>
</span><span class='line'>                <span class="p">):</span>
</span><span class='line'>                    <span class="n">valid_nodes</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">node_id</span><span class="p">,</span> <span class="n">node_sign</span><span class="p">))</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>                        <span class="k">for</span> <span class="n">j</span><span class="p">,</span> <span class="p">((</span><span class="n">local_id</span><span class="p">,</span> <span class="n">local_dim</span><span class="p">,</span> <span class="n">local_threshold</span><span class="p">),</span> <span class="n">local_sign</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span>
</span><span class='line'>                            <span class="n">node_list</span><span class="p">[:</span><span class="n">i</span><span class="p">],</span> <span class="n">local_sign_list</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>                        <span class="p">)):</span>
</span><span class='line'>                            <span class="k">if</span> <span class="n">node_sign</span> <span class="o">==</span> <span class="n">local_sign</span> <span class="ow">and</span> <span class="n">node_dim</span> <span class="o">==</span> <span class="n">local_dim</span><span class="p">:</span>
</span><span class='line'>                                <span class="k">if</span> <span class="p">(</span>
</span><span class='line'>                                    <span class="p">(</span><span class="n">node_sign</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">node_threshold</span> <span class="o">&lt;</span> <span class="n">local_threshold</span><span class="p">)</span> <span class="ow">or</span>
</span><span class='line'>                                    <span class="p">(</span><span class="n">node_sign</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">node_threshold</span> <span class="o">&gt;</span> <span class="n">local_threshold</span><span class="p">)</span>
</span><span class='line'>                                <span class="p">):</span>
</span><span class='line'>                                    <span class="n">local_sign_list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>                                    <span class="n">valid_nodes</span><span class="o">.</span><span class="n">remove</span><span class="p">((</span><span class="n">local_id</span><span class="p">,</span> <span class="n">local_sign</span><span class="p">))</span>
</span><span class='line'>                                    <span class="k">break</span>
</span><span class='line'>                <span class="k">for</span> <span class="n">node_id</span><span class="p">,</span> <span class="n">node_sign</span> <span class="ow">in</span> <span class="n">valid_nodes</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">w2</span><span class="p">[</span><span class="n">node_id</span><span class="p">,</span> <span class="n">leaf_id_cursor</span><span class="p">]</span> <span class="o">=</span> <span class="n">node_sign</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">valid_nodes</span><span class="p">)</span>
</span><span class='line'>                <span class="n">max_route_length</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">max_route_length</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">valid_nodes</span><span class="p">))</span>
</span><span class='line'>                <span class="n">w3</span><span class="p">[</span><span class="n">leaf_id_cursor</span><span class="p">]</span> <span class="o">=</span> <span class="n">rs</span> <span class="o">/</span> <span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">rs</span><span class="p">)</span>
</span><span class='line'>                <span class="n">leaf_id_cursor</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">w2</span> <span class="o">*=</span> <span class="n">max_route_length</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_transform_ws</span> <span class="o">=</span> <span class="p">[</span><span class="n">w1</span><span class="p">,</span> <span class="n">w2</span><span class="p">,</span> <span class="n">w3</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_transform_bs</span> <span class="o">=</span> <span class="p">[</span><span class="n">b</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c">#................ 篇幅有限,省略其余代码</span>
</span><span class='line'>
</span><span class='line'><span class="c"># DTree -&gt; NN</span>
</span><span class='line'><span class="k">def</span> <span class="nf">export_structure</span><span class="p">(</span><span class="n">tree</span><span class="p">):</span>
</span><span class='line'>    <span class="n">tree</span> <span class="o">=</span> <span class="n">tree</span><span class="o">.</span><span class="n">tree_</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">recurse</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">depth</span><span class="p">):</span>
</span><span class='line'>        <span class="n">feature_dim</span> <span class="o">=</span> <span class="n">tree</span><span class="o">.</span><span class="n">feature</span><span class="p">[</span><span class="n">node</span><span class="p">]</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">feature_dim</span> <span class="o">==</span> <span class="n">_tree</span><span class="o">.</span><span class="n">TREE_UNDEFINED</span><span class="p">:</span>
</span><span class='line'>            <span class="k">yield</span> <span class="n">depth</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">tree</span><span class="o">.</span><span class="n">value</span><span class="p">[</span><span class="n">node</span><span class="p">]</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">threshold</span> <span class="o">=</span> <span class="n">tree</span><span class="o">.</span><span class="n">threshold</span><span class="p">[</span><span class="n">node</span><span class="p">]</span>
</span><span class='line'>            <span class="k">yield</span> <span class="n">depth</span><span class="p">,</span> <span class="n">feature_dim</span><span class="p">,</span> <span class="n">threshold</span>
</span><span class='line'>            <span class="k">yield from</span> <span class="n">recurse</span><span class="p">(</span><span class="n">tree</span><span class="o">.</span><span class="n">children_left</span><span class="p">[</span><span class="n">node</span><span class="p">],</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>            <span class="k">yield</span> <span class="n">depth</span><span class="p">,</span> <span class="n">feature_dim</span><span class="p">,</span> <span class="n">threshold</span>
</span><span class='line'>            <span class="k">yield from</span> <span class="n">recurse</span><span class="p">(</span><span class="n">tree</span><span class="o">.</span><span class="n">children_right</span><span class="p">[</span><span class="n">node</span><span class="p">],</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">list</span><span class="p">(</span><span class="n">recurse</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<h2 id="模型改进">模型改进</h2>




<h3 id="对于朴素贝叶斯">对于朴素贝叶斯</h3>




<p>根据上述的原理和理论，我们可以将朴素贝叶斯和决策树转换成神经网络模型，但是转换之后是否存在意义呢？</p>




<p><strong>首先</strong>本身可以通过简单log对数转换成线性模型的朴素贝叶斯算法来说，其转换的步骤并不复杂，但却能够对朴素贝叶斯的独立假设进行一定的微调修正。</p>




<h3 id="对于决策树">对于决策树</h3>




<p>那么对于决策树来说，神经网络的介入可以对决策树的硬边界作一定的修正和“软化”作用。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深度学习入门简介（二）]]></title>
    <link href="https://edmondfrank.github.io/blog/2017/12/08/shen-du-xue-xi-ru-men-jian-jie-(er-)/"/>
    <updated>2017-12-08T12:52:08+08:00</updated>
    <id>https://edmondfrank.github.io/blog/2017/12/08/shen-du-xue-xi-ru-men-jian-jie-(er-)</id>
    <content type="html"><![CDATA[<p>﻿<h1 id="深度学习入门简介二">深度学习入门简介（二）</h1></p>

<h2 id="深度学习的三部曲">深度学习的三部曲</h2>




<h3 id="训练前的准备">训练前的准备</h3>




<p>1）训练数据 <br>
在训练一个深度学习的模型之前，我们首先需要准备的就是训练数据，若是图片的话其中就包括：图片的内容以及他的标签。 <br>
<strong>注：学习的分类目标也是包括在训练数据里面的</strong></p>




<p>2）学习目标 <br>
学习的目标往往就是一个二分类或者多分类问题。而对于最后的效果，我们需要达到当我们输入一个待预测或分类的值时，正确的结果应该对应那个最大概率的输出项。</p>




<p>3）损失函数 <br>
简单来说，深度学习的分类和回归的本质就是，找到一个使得在所有样本项上取得的误差值最小的函数。而预测值与真实值的误差我们可以通过他们之间的距离计算得出。</p>




<h3 id="最小化误差">最小化误差</h3>




<p>为了达到一个分类或预测准确的效果，我们就要找到一个网络中的对应的超参数<script type="math/tex" id="MathJax-Element-471">\theta</script>使得网络的预测与真实值的误差是最小的。其中一个简单而粗暴的方法就是：枚举法。但是这样做的效率显然非常的低效。为了能够更加优化地找到或者说是接近使得网络取得最小误差的超参数<script type="math/tex" id="MathJax-Element-472">\theta</script>我们可以采用<strong>梯度下降法</strong>，其根据预设的学习率不断更新权重的梯度来接近局部最优解。</p>




<p>其具体过程图如下所示： <br>
<img src="https://ws1.sinaimg.cn/large/a3d23450gy1fm92vbwnztj20ps0em0ub.jpg" alt="" title=""></p>




<p><strong>梯度下降的缺点：</strong> <br>
由于梯度下降每次计算时都是随机选取一个开始点，再根据学习率来慢慢减小全局误差。这样一来，学习率的设定就十分重要了，过大的学习率容易越过最低点，而过小的学习率又使得误差降低的速度过慢，且过小的学习率也会造成学习过程中陷入局部最低点后无法跳出。但实际上由于精度误差的问题梯度下降永远无法到达真正意义上的全局最低点，即无法取得全局最有解。但在多次的迭代运算后一般可以达到一个可接受的损失误差的局部最优解。</p>




<p>具体图示如下： <br>
<img src="https://ws1.sinaimg.cn/large/a3d23450gy1fm937sjcc5j20q40hcdn6.jpg" alt="" title=""></p>




<h3 id="反向传播">反向传播</h3>




<p><strong>反向传播算法</strong>：这是一种高效的计算权值梯度的方式。</p>




<p>有关算法的详细介绍可以参考：</p>




<p><a href="http://speech.ee.ntu.edu.tw/~tlkagk/courses/MLDS_2015_2/Lecture/DNN%20backprop.ecm.mp4/index.html">http://speech.ee.ntu.edu.tw/~tlkagk/courses/MLDS_2015_2/Lecture/DNN%20backprop.ecm.mp4/index.html</a></p>




<p>通常我们在使用流行框架来构建神经网络时，不用亲自考虑如何去计算和处理梯度值，框架的作者在实现框架时已经做好了相关处理。</p>




<h3 id="神经网络的理论">神经网络的理论</h3>




<p>根据 <a href="http://neuralnetworksanddeeplearning.com/chap4.html">A visual proof that neural nets can compute any function</a> 文章的描述任何的连续函数 f 都可以用一个隐藏层内有足够多的神经元的神经网络来近似。</p>




<p><strong>既然这样，为什么今天流行的是深度网络而不是广度网络呢？</strong></p>




<p>根据 <a href="https://www.microsoft.com/en-us/research/publication/conversational-speech-transcription-using-context-dependent-deep-neural-networks/">Seide, Frank, Gang Li, and Dong Yu. “Conversational Speech Transcription <br>
Using Context-Dependent Deep Neural Networks.” Interspeech. 2011. <br>
</a> 论文的研究，广度和深度网络对降低全局误差时的参数如下表所示：</p>




<p><img src="https://ws1.sinaimg.cn/large/a3d23450gy1fm98wlbz8yj20np0g2gmz.jpg" alt="fat-vs-deep" title=""></p>




<p>根据上图的研究结果，我们可以发现使用多层的神经元能够更加容易近似一些函数，这其实就跟我们的电子电路中的逻辑电路类似，即便在电子电路中两层的逻辑门电路就可以实现任意的逻辑操作，但是使用多层的逻辑门电路可以更容易的构建一些逻辑操作。</p>




<h3 id="模块化">模块化</h3>




<p>深度学习中还有一个特点就是<strong>模块化</strong>，在一层层的网络层的堆叠中，每一层都会作为一个模块来学习数据。简单来说，深度学习的过程其实就是一个自动提取特征的过程。对于传统的机器学习而言，数据科学家通过特征工程，提取出数据的特征，再利用特征对数据进行建模以此达到分类预测的效果。深度学习通过各个神经元的加权组合以及反向传播的权值调整，使得整个网络的每一层都渐渐趋向稳定，且其稳定值能够在那个维度上进行部分数据的划分，简单来说就是一个区域性的能够对数据有所区分的特性。那随着各个神经层的共同作用使得深度学习在分类预测应用上效果显著。</p>




<p>最后，深度学习在图像分类的本质大概可以用以下这张图片概括： <br>
<img src="https://ws1.sinaimg.cn/large/a3d23450gy1fm99ftf2vwj20ow0dsn0p.jpg" alt="" title=""></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深度学习入门简介]]></title>
    <link href="https://edmondfrank.github.io/blog/2017/12/02/shen-du-xue-xi-ru-men-jian-jie/"/>
    <updated>2017-12-02T17:17:32+08:00</updated>
    <id>https://edmondfrank.github.io/blog/2017/12/02/shen-du-xue-xi-ru-men-jian-jie</id>
    <content type="html"><![CDATA[<p>﻿<h1 id="深度学习入门简介">深度学习入门简介</h1></p>

<h2 id="背景">背景</h2>




<p><strong>深度学习</strong>的概念源于人工神经网络的研究。含多隐层的多层感知器就是一种深度学习结构。深度学习通过组合低层特征形成更加抽象的高层表示属性类别或特征，以发现数据的分布式特征表示。</p>




<h2 id="概念">概念</h2>




<p><strong>深度学习</strong>的概念由Hinton等人于2006年提出。基于深度置信网络(DBN)提出非监督贪心逐层训练算法，为解决深层结构相关的优化难题带来希望，随后提出多层自动编码器深层结构。此外Lecun等人提出的卷积神经网络是第一个真正多层结构学习算法，它利用空间相对关系减少参数数目以提高训练性能。</p>




<h2 id="原理">原理</h2>




<p><strong>深度学习</strong>是机器学习中一种基于对数据进行表征学习的方法。观测值（例如一幅图像）可以使用多种方式来表示，如每个像素强度值的向量，或者更抽象地表示成一系列边、特定形状的区域等。而使用某些特定的表示方法更容易从实例中学习任务（例如，人脸识别或面部表情识别）。深度学习的好处是用非监督式或半监督式的特征学习和分层特征提取高效算法来替代手工获取特征。</p>




<p>（以上内容摘取自百度百科）</p>




<p><strong>个人理解：</strong>如果说机器学习是为了找出一个能够代表输入变量和输出变量的关系的函数的话；那么深度学习就是先根据输入和输出变量之间的关系，列出一系列能够代表他们之间关系的函数，然后再从这个函数集之中提取一个最优的函数。</p>




<h2 id="结构">结构</h2>




<h3 id="神经元">神经元</h3>




<p>随着神经网络的应用和深度学习在人工智能领域的大放异彩，很多人都说神经网络的是最成功的仿真模型。那么他的结构究竟是怎样子的呢？</p>




<p><img src="https://i.loli.net/2017/12/01/5a217a29cf015.png" alt="nn.png" title=""></p>




<p>一个简单的神经网咯函数（一般称作：神经元），就如上图所示。</p>




<p>他的主要执行过程：</p>




<blockquote>
  <p>多个输入a X 各自的权重w + 偏置值b =&gt; 激活函数 =&gt; 输出</p>
</blockquote>




<p>其中，在这个流程之中，我们可能比较迷惑的是那个激活函数Activation function。</p>




<p><strong>Activation Function：</strong>即激活函数，目前的常用的激活函数由挺多的，例如，Simmoid Function，tanh，relu等等。虽然形式上不同，但是他们大体的目的都是较为一致的，就是用来加入非线性因素的，因为线性模型的表达能力不够。</p>




<p><script type="math/tex; mode=display" id="MathJax-Element-1"> 如下所示的Sigmoid Function \\\sigma(z)=\frac{1}{1+e^{-z}}</script></p>




<p>同时，激活函数可以将非常大或非常小的数据映射到“逻辑空间”[-1,1]之间，这样映射过后的数据更适合在反向传播算法中进行梯度下降。</p>




<h3 id="连接方式">连接方式</h3>




<p>上面我们提及的仅仅是神经网络中的一个神经元，他是神经网络之中最基本的组成单位。但是如果要构建一个强大智能的神经网络，仅仅靠一个神经元是不行的。于是，我们便可以将多个神经元分层连接起来，这样才构成了我们所知道的神经网络。</p>




<p>既然，神经网络的构成本质就是神经元的连接，那么不同的连接方式就会形成不同的神经网络结构如全连接前馈网络，多层感知器，卷积神经网络，循环神经网络等等。</p>




<h2 id="全连接前馈网络">全连接前馈网络</h2>




<p>在众多的连接之间，全连接的前馈网络不仅较为简单，也是很多深层网络的基础。他的基本连接方式如下图片所示：</p>




<p><img src="https://i.loli.net/2017/12/02/5a2180e6120e2.png" alt="feedforward.png" title=""></p>




<p>其中，一般来说神经网络的第一层通常都是输入层，而最后一层便是输出层以及中间的都统一称作隐藏层。深度神经网络中的“深”便代表了这个网络中间有非常多的隐藏层。</p>




<h2 id="输出层">输出层</h2>




<p>通常，输出层一般为Softmax 层，并且其可以为任意值。在应用中，输出的结果通常用概率的形式表达，其具体形式如下图所示： <br>
<img src="https://i.loli.net/2017/12/02/5a218350cc19b.png" alt="output.png" title=""></p>




<p>那么，我们知道了神经网络的组成之后，我们要是想自己构建一个神经网络，我们又该如何确定神经网络的层数和每层的神经元的个数呢？</p>




<p><strong>就目前来说，</strong>并没有相当的严谨的理论来指导神经网络的构建。我们往往需要依靠直觉和训练测试结果的误差反馈来一步一步选择我们的层数和神经元数以达到要求的效果。</p>

]]></content>
  </entry>
  
</feed>
