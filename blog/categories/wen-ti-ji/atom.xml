<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 问题集 | EdmondFrank's 时光足迹]]></title>
  <link href="https://edmondfrank.github.io/blog/categories/wen-ti-ji/atom.xml" rel="self"/>
  <link href="https://edmondfrank.github.io/"/>
  <updated>2022-05-19T10:59:11+08:00</updated>
  <id>https://edmondfrank.github.io/</id>
  <author>
    <name><![CDATA[EdmondFrank]]></name>
    <email><![CDATA[EdmomdFrank@yahoo.co.jp]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[错误:Could not reserve enough space for object heap的解决方案]]></title>
    <link href="https://edmondfrank.github.io/blog/2016/07/22/cuo-wu-could-not-reserve-enough-space-for-object-heapde-jie-jue-fang-an/"/>
    <updated>2016-07-22T20:59:57+08:00</updated>
    <id>https://edmondfrank.github.io/blog/2016/07/22/cuo-wu-could-not-reserve-enough-space-for-object-heapde-jie-jue-fang-an</id>
    <content type="html"><![CDATA[<h1>错误:Could not reserve enough space for object heap的解决方案</h1>

<h2>Reason:</h2>

<p>If you go thru this IBM link on java, it says that on 32 bit windows the recommended heap size is 1.5 GB and the Maximum heap size is 1.8 GB. So your jvm does not gets initialized for -Xmx2G and above.</p>

<p>Also if you go thru this SO answer, clearly the DLL bindings are an issue for memory reservation changing which is no trivial task. Hence what may be recommended is that you go for 64-bit Windows and a 64-bit JVM. while it will chew up more RAM, you will have much more contiguous virtual address space.</p>

<h2>Method to fix:</h2>

<blockquote><p>For Windows</p></blockquote>

<p>Go to Start → Control Panel → System → Advanced system settings → advanced(tab) → Environment Variables → System Variables → New:</p>

<p>Variable name: _JAVA_OPTIONS
Variable value: -Xmx512M</p>

<blockquote><p>For Linux</p></blockquote>

<pre><code>export _JAVA_OPTIONS=-Xmx512M
</code></pre>

<p>or
<code>
export _JAVA_OPTIONS=-Xmx1024M
</code></p>

<blockquote><p>For Android Studio</p></blockquote>

<p>Project > Gradle Scripts > gradle.properties</p>

<p>org.gradle.jvmargs=-Xms512m -Xmx1024m</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go语言var/init/main的执行顺序]]></title>
    <link href="https://edmondfrank.github.io/blog/2016/06/23/goyu-yan-var-slash-init-slash-mainde-zhi-xing-shun-xu/"/>
    <updated>2016-06-23T18:04:40+08:00</updated>
    <id>https://edmondfrank.github.io/blog/2016/06/23/goyu-yan-var-slash-init-slash-mainde-zhi-xing-shun-xu</id>
    <content type="html"><![CDATA[<h1>Go语言var/init/main的执行顺序</h1>

<p>执行顺序(降序):</p>

<ol>
<li>var</li>
<li>init</li>
<li>main</li>
</ol>


<p>大家也可以亲自动手把下面的代码复制到<a href="https://play.golang.org/">Go Playground</a>上执行看看!</p>

<h4>示例代码</h4>

<pre><code class="go">package main

var someVar = defaultVar()

func init() {
    println("main.init was called")
}

func main() {
    println("main.main was called")
}

func defaultVar() int {
    println("main.var was initialized")
    return 0
}
</code></pre>

<h4>输出结果如下:</h4>

<blockquote><p>main.var was initialized</p>

<p>main.init was called</p>

<p>main.main was called</p></blockquote>
]]></content>
  </entry>
  
</feed>
